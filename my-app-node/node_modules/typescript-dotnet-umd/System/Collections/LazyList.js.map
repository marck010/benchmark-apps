{"version":3,"sources":["System/Collections/LazyList.js","System/Collections/LazyList.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","ReadOnlyCollectionBase_1","ArgumentOutOfRangeException_1","EnumeratorBase_1","extends_1","Integer_1","__extends","LazyList","_super","source","_this","call","this","_enumerator","getEnumerator","_cached","prototype","_onDispose","e","dispose","c","length","_getCount","finish","_getEnumerator","current","EnumeratorBase","yielder","throwIfDisposed","getNext","yieldReturn","yieldBreak","get","index","Integer","assertZeroOrGreater","ArgumentOutOfRangeException","indexOf","item","result","contains","out","moveNext","push","ReadOnlyCollectionBase"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,2BAA4B,4CAA6C,+BAAgC,gBAAiB,cAAeN,IAE5K,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCR1D,IAAAC,GAAAP,EAAA,4BAIAQ,EAAAR,EAAA,6CACAS,EAAAT,EAAA,gCACAU,EAAAV,EAAA,iBACAW,EAAAX,EAAA,cAEMY,EAAYF,EAAAA,WAElBG,EAAA,SAAAC,GAMC,QAAAD,GAAYE,GAAZ,GAAAC,GAECF,EAAAG,KAAAC,OAAOA,IDGG,OCFVF,GAAKG,YAAcJ,EAAOK,gBAC1BJ,EAAKK,WDCYL,ECmGnB,MA9GiCJ,GAAAC,EAAAC,GAatBD,EAAAS,UAAAC,WAAV,WAECT,EAAAQ,UAAMC,WAAUN,KAAAC,KAChB,IAAMM,GAAIN,KAAKC,WACfD,MAAKC,YAAc,KAChBK,GAAGA,EAAEC,SAER,IAAMC,GAAIR,KAAKG,OACfH,MAAKG,QAAU,KACZK,IAAGA,EAAEC,OAAS,IAGRd,EAAAS,UAAAM,UAAV,WAECV,KAAKW,QACL,IAAMH,GAAIR,KAAKG,OACf,OAAOK,GAAIA,EAAEC,OAAS,GAGbd,EAAAS,UAAAQ,eAAV,WAAA,GAEKC,GAFLf,EAAAE,IAGC,OAAO,IAAIT,GAAAuB,eACV,WACCD,EAAU,GAEX,SAAAE,GAECjB,EAAKkB,iBACL,IAAMR,GAAIV,EAAKK,OACf,OAAQU,GAAQL,EAAEC,QAAUX,EAAKmB,UAC9BF,EAAQG,YAAYV,EAAEK,MACtBE,EAAQI,gBAIdxB,EAAAS,UAAAgB,IAAA,SAAIC,GAEHrB,KAAKgB,kBACLvB,EAAA6B,QAAQC,oBAAoBF,EAG5B,KADA,GAAMb,GAAIR,KAAKG,QACTK,EAAEC,QAAQY,GAASrB,KAAKiB,YAG9B,GAAGI,EAAMb,EAAEC,OACV,MAAOD,GAAEa,EAEV,MAAM,IAAI/B,GAAAkC,4BAA4B,QAAS,8BAGhD7B,EAAAS,UAAAqB,QAAA,SAAQC,GAEP1B,KAAKgB,iBAGL,KAFA,GAAMR,GAAIR,KAAKG,QACXwB,EAASnB,EAAEiB,QAAQC,GACjBC,OAAe3B,KAAKiB,QAAQ,SAAA7B,GAE9BA,GAAOsC,IACTC,EAASnB,EAAEC,OAAS,OAGtB,MAAOkB,IAGRhC,EAAAS,UAAAwB,SAAA,SAASF,GAER,MAAO1B,MAAKyB,QAAQC,QAGb/B,EAAAS,UAAAa,QAAR,SAAgBY,GAEf,GAAMvB,GAAIN,KAAKC,WACf,KAAIK,EAAG,OAAO,CACd,IAAGA,EAAEwB,WACL,CACC,GAAM1C,GAAQkB,EAAEO,OAGhB,OAFAb,MAAKG,QAAS4B,KAAK3C,GAChByC,GAAKA,EAAIzC,IACL,EAOR,MAHCkB,GAAEC,UACFP,KAAKC,YAAmB,MAElB,GAIAN,EAAAS,UAAAO,OAAR,WAEC,KAAMX,KAAKiB,cAKbtB,GA9GiCN,EAAA2C,uBAApBpD,GAAAe,SAAAA","file":"LazyList.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Origin: http://www.fallingcanbedeadly.com/\n * Licensing: MIT\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./ReadOnlyCollectionBase\", \"../Exceptions/ArgumentOutOfRangeException\", \"./Enumeration/EnumeratorBase\", \"../../extends\", \"../Integer\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var ReadOnlyCollectionBase_1 = require(\"./ReadOnlyCollectionBase\");\n    var ArgumentOutOfRangeException_1 = require(\"../Exceptions/ArgumentOutOfRangeException\");\n    var EnumeratorBase_1 = require(\"./Enumeration/EnumeratorBase\");\n    var extends_1 = require(\"../../extends\");\n    var Integer_1 = require(\"../Integer\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var LazyList = /** @class */ (function (_super) {\n        __extends(LazyList, _super);\n        function LazyList(source) {\n            var _this = _super.call(this) || this;\n            _this._enumerator = source.getEnumerator();\n            _this._cached = [];\n            return _this;\n        }\n        LazyList.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var e = this._enumerator;\n            this._enumerator = null;\n            if (e)\n                e.dispose();\n            var c = this._cached;\n            this._cached = null;\n            if (c)\n                c.length = 0;\n        };\n        LazyList.prototype._getCount = function () {\n            this.finish();\n            var c = this._cached;\n            return c ? c.length : 0;\n        };\n        LazyList.prototype._getEnumerator = function () {\n            var _this = this;\n            var current;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                current = 0;\n            }, function (yielder) {\n                _this.throwIfDisposed();\n                var c = _this._cached;\n                return (current < c.length || _this.getNext())\n                    ? yielder.yieldReturn(c[current++])\n                    : yielder.yieldBreak();\n            });\n        };\n        LazyList.prototype.get = function (index) {\n            this.throwIfDisposed();\n            Integer_1.Integer.assertZeroOrGreater(index);\n            var c = this._cached;\n            while (c.length <= index && this.getNext()) { }\n            if (index < c.length)\n                return c[index];\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"index\", \"Greater than total count.\");\n        };\n        LazyList.prototype.indexOf = function (item) {\n            this.throwIfDisposed();\n            var c = this._cached;\n            var result = c.indexOf(item);\n            while (result == -1 && this.getNext(function (value) {\n                if (value == item)\n                    result = c.length - 1;\n            })) { }\n            return result;\n        };\n        LazyList.prototype.contains = function (item) {\n            return this.indexOf(item) != -1;\n        };\n        LazyList.prototype.getNext = function (out) {\n            var e = this._enumerator;\n            if (!e)\n                return false;\n            if (e.moveNext()) {\n                var value = e.current;\n                this._cached.push(value);\n                if (out)\n                    out(value);\n                return true;\n            }\n            else {\n                e.dispose();\n                this._enumerator = null;\n            }\n            return false;\n        };\n        LazyList.prototype.finish = function () {\n            while (this.getNext()) { }\n        };\n        return LazyList;\n    }(ReadOnlyCollectionBase_1.ReadOnlyCollectionBase));\n    exports.LazyList = LazyList;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Origin: http://www.fallingcanbedeadly.com/\r\n * Licensing: MIT\r\n */\r\n\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {ReadOnlyCollectionBase} from \"./ReadOnlyCollectionBase\";\r\nimport {IEnumerable} from \"./Enumeration/IEnumerable\";\r\nimport {Action} from \"../FunctionTypes\";\r\nimport {IReadOnlyList} from \"./IList\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Integer} from \"../Integer\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport class LazyList<T> extends ReadOnlyCollectionBase<T> implements IReadOnlyList<T>\r\n{\r\n\r\n\tprivate _enumerator:IEnumerator<T>|null;\r\n\tprivate _cached:T[]|null;\r\n\r\n\tconstructor(source:IEnumerable<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis._enumerator = source.getEnumerator();\r\n\t\tthis._cached = [];\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst e = this._enumerator;\r\n\t\tthis._enumerator = null;\r\n\t\tif(e) e.dispose();\r\n\r\n\t\tconst c = this._cached;\r\n\t\tthis._cached = null;\r\n\t\tif(c) c.length = 0;\r\n\t}\r\n\r\n\tprotected _getCount():number\r\n\t{\r\n\t\tthis.finish();\r\n\t\tconst c = this._cached;\r\n\t\treturn c ? c.length : 0;\r\n\t}\r\n\r\n\tprotected _getEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tlet current:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t()=>{\r\n\t\t\t\tcurrent = 0;\r\n\t\t\t},\r\n\t\t\tyielder =>\r\n\t\t\t{\r\n\t\t\t\tthis.throwIfDisposed();\r\n\t\t\t\tconst c = this._cached!;\r\n\t\t\t\treturn (current<c.length || this.getNext())\r\n\t\t\t\t\t? yielder.yieldReturn(c[current++])\r\n\t\t\t\t\t: yielder.yieldBreak();\r\n\t\t\t});\r\n\t}\r\n\r\n\tget(index:number):T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tInteger.assertZeroOrGreater(index);\r\n\r\n\t\tconst c = this._cached!;\r\n\t\twhile(c.length<=index && this.getNext())\r\n\t\t{}\r\n\r\n\t\tif(index<c.length)\r\n\t\t\treturn c[index];\r\n\r\n\t\tthrow new ArgumentOutOfRangeException(\"index\", \"Greater than total count.\");\r\n\t}\r\n\r\n\tindexOf(item:T):number\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tconst c = this._cached!;\r\n\t\tlet result = c.indexOf(item);\r\n\t\twhile(result== -1 && this.getNext(value =>\r\n\t\t{\r\n\t\t\tif(value==item)\r\n\t\t\t\tresult = c.length - 1;\r\n\t\t}))\r\n\t\t{}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn this.indexOf(item)!=-1;\r\n\t}\r\n\r\n\tprivate getNext(out?:Action<T>):boolean\r\n\t{\r\n\t\tconst e = this._enumerator;\r\n\t\tif(!e) return false;\r\n\t\tif(e.moveNext())\r\n\t\t{\r\n\t\t\tconst value = e.current!;\r\n\t\t\tthis._cached!.push(value);\r\n\t\t\tif(out) out(value);\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\te.dispose();\r\n\t\t\tthis._enumerator = <any>null;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\r\n\tprivate finish():void\r\n\t{\r\n\t\twhile(this.getNext())\r\n\t\t{}\r\n\t}\r\n\r\n\r\n}"]}