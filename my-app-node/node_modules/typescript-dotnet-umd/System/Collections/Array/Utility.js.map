{"version":3,"sources":["System/Collections/Array/Utility.js","System/Collections/Array/Utility.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","indexOf","array","item","equalityComparer","Compare_1","areEqual","len","length","Types_1","Type","isTrueNaN","i","contains","replace","old","newValue","max","Infinity","ArgumentOutOfRangeException_1","ArgumentOutOfRangeException","CBL0","count","updateRange","value","start","stop","Integer_1","Integer","assertZeroOrGreater","assert","clear","register","ArgumentNullException_1","ArgumentNullException","CBN","ok","findIndex","predicate","isFunction","ArgumentException_1","ArgumentException","isNumber","forEach","source","action","applyTo","target","fn","removeIndex","index","exists","splice","remove","isFinite","found","push","repeat","element","result","initialize_1","initialize","range","first","step","isNaN","VFN","rangeUntil","until","CB0","distinct","seen","filter","e","flatten","a","recurseDepth","x","n","Object","defineProperty","copy_1","copy","copyTo"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,cAAe,gBAAiB,gBAAiB,qCAAsC,yCAA0C,+CAAgD,eAAgB,UAAWN,IAE/O,SAAUI,EAASF,GAClB,YCwBJ,SAAAM,GACCC,EAAoBC,EACpBC,GAAA,SAAAA,IAAAA,EAAyCC,EAAAC,SAGzC,IAAMC,GAAML,GAASA,EAAMM,MAC3B,IAAGD,EACH,CAEC,GAAG,YAAmB,SAAYE,EAAAC,KAAKC,UAAUR,GAChD,MAAOD,GAAMD,QAAQE,EAEtB,KAAI,GAAIS,GAAI,EAAGA,EAAEL,EAAKK,IAGrB,GAAGR,EAAiBF,EAAMU,GAAIT,GAC7B,MAAOS,GAIV,SAWD,QAAAC,GACCX,EAAoBC,EACpBC,GAEA,MAFA,UAAAA,IAAAA,EAAyCC,EAAAC,UAElCL,EAAQC,EAAOC,EAAMC,OAW7B,QAAAU,GACCZ,EACAa,EACAC,EACAC,GAEA,GAFA,SAAAA,IAAAA,EAAAC,EAAAA,IAEIhB,IAAUA,EAAMM,QAAgB,IAANS,EAAS,MAAO,EAC9C,IAAGA,EAAI,EAAG,KAAM,IAAIE,GAAAC,4BAA4B,MAAOH,EAAKI,EACxDJ,KAAKA,EAAMC,EAAAA,EAIf,KAAI,GAFAI,GAAQ,EAEJV,EAAI,EAAGL,EAAML,EAAMM,OAAQI,EAAEL,IAEjCL,EAAMU,KAAKG,IAEPb,EAAOU,GAAKI,IAChBM,EACCA,GAAOL,IAN8BL,KAU1C,MAAOU,GAWR,QAAAC,GACCrB,EACAsB,EACAC,EACAC,GAEA,GAHA,SAAAD,IAAAA,EAAA,GAGIvB,EAAJ,CAIA,GAHAyB,EAAAC,QAAQC,oBAAoBJ,EAAO,SAC/BC,GAAe,IAAPA,IAAUA,EAAOxB,EAAMM,QACnCmB,EAAAC,QAAQE,OAAOJ,EAAM,QAClBA,EAAKD,EAAO,KAAM,IAAIN,GAAAC,4BAA4B,OAAQM,EAAM,qBAEnE,KAAI,GAAId,GAAWa,EAAOb,EAAEc,EAAMd,IAE3BV,EAAOU,GAAKY,GAUpB,QAAAO,GACC7B,EACAuB,EACAC,GADA,SAAAD,IAAAA,EAAA,GAGAF,EAAYrB,EAAO,KAAMuB,EAAOC,GAUjC,QAAAM,GACC9B,EAA4BC,EAC5BC,GAEA,GAFA,SAAAA,IAAAA,EAAyCC,EAAAC,WAErCJ,EACH,KAAM,IAAI+B,GAAAC,sBAAsB,QAASC,EAC1C,IAAI5B,GAAML,EAAMM,OACV4B,GAAM7B,IAAQM,EAASX,EAAOC,EAAMC,EAE1C,OADGgC,KAAUlC,EAAOK,GAAOJ,GACpBiC,EAUR,QAAAC,GAA6BnC,EAAoBoC,GAEhD,IAAIpC,EACH,KAAM,IAAI+B,GAAAC,sBAAsB,QAASC,EAC1C,KAAI1B,EAAAC,KAAK6B,WAAWD,GACnB,KAAM,IAAIE,GAAAC,kBAAkB,YAAa,sBAE1C,IAAMlC,GAAML,EAAMM,MAClB,KAAIC,EAAAC,KAAKgC,SAASnC,GAAK,IAASA,EAAI,EACnC,KAAM,IAAIiC,GAAAC,kBAAkB,QAAS,gCAEtC,IAAG,YAAmB,QAErB,IAAI,GAAI7B,GAAI,EAAGA,EAAEL,EAAKK,IAErB,GAAG0B,EAAUpC,EAAMU,GAAIA,GACtB,MAAOA,OAKT,KAAI,GAAIA,GAAI,EAAGA,EAAEL,EAAKK,IAErB,GAAG,IAAO,IAAW0B,EAAUpC,EAAMU,GAAIA,GACxC,MAAOA,EAKV,UAgBD,QAAA+B,GACCC,EACAC,GAEA,GAAGD,GAAUC,EAGZ,IAAI,GAAIjC,GAAI,EAAGA,EAAEgC,EAAOpC,QAEpBqC,EAAOD,EAAOhC,GAAIA,MAAK,EAFKA,MAelC,QAAAkC,GAA2BC,EAA6BC,GAEvD,GAAGD,GAAUC,EAEZ,IAAI,GAAIpC,GAAI,EAAGA,EAAEmC,EAAOvC,OAAQI,IAEzBmC,EAAQnC,GAAKoC,EAAGD,EAAOnC,GAAIA,GAWpC,QAAAqC,GAA+B/C,EAAWgD,GAEzC,IAAIhD,EACH,KAAM,IAAI+B,GAAAC,sBAAsB,QAASC,EAG1C,IADAR,EAAAC,QAAQE,OAAOoB,EAAO,SACnBA,EAAM,EAAG,KAAM,IAAI/B,GAAAC,4BAA4B,QAAS8B,EAAO7B,EAGlE,IAAM8B,GAASD,EAAMhD,EAAMM,MAG3B,OAFG2C,IACFjD,EAAMkD,OAAOF,EAAO,GACdC,EAWR,QAAAE,GACCnD,EAAWsB,EAASP,EACpBb,GAEA,GAHoB,SAAAa,IAAAA,EAAAC,EAAAA,GACpB,SAAAd,IAAAA,EAAyCC,EAAAC,WAErCJ,IAAUA,EAAMM,QAAgB,IAANS,EAAS,MAAO,EAC9C,IAAGA,EAAI,EAAG,KAAM,IAAIE,GAAAC,4BAA4B,MAAOH,EAAKI,EAE5D,IAAIC,GAAQ,CACZ,IAAIL,GAAQqC,SAASrC,GAarB,CAGC,IAAI,GADEsC,MACE3C,EAAI,EAAGL,EAAML,EAAMM,OAAQI,EAAEL,KAEjCH,EAAiBF,EAAMU,GAAIY,KAE7B+B,EAAMC,KAAK5C,KACTU,EACCA,GAAOL,IAN8BL,KAU1C,IAAI,GAAIA,GAAI2C,EAAM/C,OAAS,EAAGI,GAAG,EAAGA,IAEnCV,EAAMkD,OAAOG,EAAM3C,GAAI,OAzBxB,KAAI,GAAIA,GAAKV,EAAMM,OAAS,EAAII,GAAG,EAAGA,IAElCR,EAAiBF,EAAMU,GAAIY,KAE7BtB,EAAMkD,OAAOxC,EAAG,KACdU,EAyBL,OAAOA,GASR,QAAAmC,GAA0BC,EAAWpC,GAGpC,GADAK,EAAAC,QAAQE,OAAOR,EAAO,SACnBA,EAAM,EAAG,KAAM,IAAIH,GAAAC,4BAA4B,QAASE,EAAOD,EAGlE,KAAI,GADEsC,GAASC,EAAAC,WAAcvC,GACrBV,EAAI,EAAGA,EAAEU,EAAOV,IAEvB+C,EAAO/C,GAAK8C,CAGb,OAAOC,GAWR,QAAAG,GACCC,EACAzC,EACA0C,GAEA,GAFA,SAAAA,IAAAA,EAAA,GAEGC,MAAMF,KAAWT,SAASS,GAAQ,KAAM,IAAI5C,GAAAC,4BAA4B,QAAS2C,EAAOG,EAC3F,IAAGD,MAAM3C,KAAWgC,SAAShC,GAAQ,KAAM,IAAIH,GAAAC,4BAA4B,QAASE,EAAO4C,EAC3F,IAAG5C,EAAM,EAAG,KAAM,IAAIH,GAAAC,4BAA4B,QAASE,EAAOD,EAGlE,KAAI,GADEsC,GAASC,EAAAC,WAAmBvC,GAC1BV,EAAI,EAAGA,EAAEU,EAAOV,IAEvB+C,EAAO/C,GAAKmD,EACZA,GAASC,CAGV,OAAOL,GAUR,QAAAQ,GACCJ,EACAK,EACAJ,GAEA,GAFA,SAAAA,IAAAA,EAAA,GAES,GAANA,EAAS,KAAM,IAAI7C,GAAAC,4BAA4B,OAAQ4C,EAAMK,EAChE,OAAOP,GAAMC,GAAQK,EAAQL,GAAOC,EAAMA,GAS3C,QAAAM,GAAyB1B,GAExB,IAAIA,EAAQ,QACZ,IAAM2B,KACN,OAAO3B,GAAO4B,OAAO,SAAAC,GAAK,QAAEA,IAAKF,MAAUA,EAAKE,IAAK,KAUtD,QAAAC,GAAwBC,EAASC,GAAA,SAAAA,IAAAA,EAAA,EAGhC,KAAI,GADEjB,MACE/C,EAAI,EAAGA,EAAE+D,EAAEnE,OAAQI,IAC3B,CACC,GAAIiE,GAAIF,EAAE/D,EACV,IAAG,YAAe,OAClB,CACIgE,EAAa,IAAGC,EAAIH,EAAQG,EAAGD,EAAe,GACjD,KAAI,GAAIE,GAAI,EAAGA,EAAED,EAAErE,OAAQsE,IAAKnB,EAAOH,KAAKqB,EAAEC,QAE1CnB,GAAOH,KAAKqB,GAElB,MAAOlB,GDvZJoB,OAAOC,eAAerF,EAAS,cAAgB6B,OAAO,GCT1D,IAAAf,GAAAZ,EAAA,eACA8B,EAAA9B,EAAA,iBACAQ,EAAAR,EAAA,iBACA2C,EAAA3C,EAAA,sCACAoC,EAAApC,EAAA,0CACAsB,EAAAtB,EAAA,gDAQA+D,EAAA/D,EAAA,eAEQF,GAAAkE,WAFAD,EAAAC,UACR,IAAAoB,GAAApF,EAAA,SACoBF,GAAAuF,KADZD,EAAAC,KACkBvF,EAAAwF,OADZF,EAAAE,MAGd,IACChD,GAAO,kBACPkC,EAAO,kBACPhD,EAAO,4BACP6C,EAAO,+BAWRvE,GAAAM,QAAAA,EA+BAN,EAAAkB,SAAAA,EAeAlB,EAAAmB,QAAAA,EAiCAnB,EAAA4B,YAAAA,EAwBA5B,EAAAoC,MAAAA,EAeApC,EAAAqC,SAAAA,EAmBArC,EAAA0C,UAAAA,EA6CA1C,EAAAgD,QAAAA,EAsBAhD,EAAAmD,QAAAA,EAiBAnD,EAAAsD,YAAAA,EAuBAtD,EAAA0D,OAAAA,EAkDA1D,EAAA8D,OAAAA,EAsBA9D,EAAAmE,MAAAA,EA0BAnE,EAAAwE,WAAAA,EAeAxE,EAAA2E,SAAAA,EAcA3E,EAAA+E,QAAAA","file":"Utility.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../Types\", \"../../Integer\", \"../../Compare\", \"../../Exceptions/ArgumentException\", \"../../Exceptions/ArgumentNullException\", \"../../Exceptions/ArgumentOutOfRangeException\", \"./initialize\", \"./copy\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Types_1 = require(\"../../Types\");\n    var Integer_1 = require(\"../../Integer\");\n    var Compare_1 = require(\"../../Compare\");\n    var ArgumentException_1 = require(\"../../Exceptions/ArgumentException\");\n    var ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\n    var ArgumentOutOfRangeException_1 = require(\"../../Exceptions/ArgumentOutOfRangeException\");\n    var initialize_1 = require(\"./initialize\");\n    exports.initialize = initialize_1.initialize;\n    var copy_1 = require(\"./copy\");\n    exports.copy = copy_1.copy;\n    exports.copyTo = copy_1.copyTo;\n    var CBN = 'Cannot be null.', CB0 = 'Cannot be zero.', CBL0 = 'Cannot be less than zero.', VFN = 'Must be a valid finite number';\n    /**\n     * Checks to see where the provided array contains an item/value.\n     * If the array value is null, then -1 is returned.\n     * @param array\n     * @param item\n     * @param {function?} equalityComparer\n     * @returns {number}\n     */\n    function indexOf(array, item, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n        var len = array && array.length;\n        if (len) {\n            // NaN NEVER evaluates its equality so be careful.\n            if ((array) instanceof (Array) && !Types_1.Type.isTrueNaN(item))\n                return array.indexOf(item);\n            for (var i = 0; i < len; i++) {\n                // 'areEqual' includes NaN==NaN evaluation.\n                if (equalityComparer(array[i], item))\n                    return i;\n            }\n        }\n        return -1;\n    }\n    exports.indexOf = indexOf;\n    /**\n     * Checks to see if the provided array contains an item.\n     * If the array value is null, then false is returned.\n     * @param array\n     * @param item\n     * @param {function?} equalityComparer\n     * @returns {boolean}\n     */\n    function contains(array, item, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n        return indexOf(array, item, equalityComparer) != -1;\n    }\n    exports.contains = contains;\n    /**\n     * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\n     * @param array\n     * @param old\n     * @param newValue\n     * @param max\n     * @returns {number}\n     */\n    function replace(array, old, newValue, max) {\n        if (max === void 0) { max = Infinity; }\n        if (!array || !array.length || max === 0)\n            return 0;\n        if (max < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('max', max, CBL0);\n        if (!max)\n            max = Infinity; // just in case.\n        var count = 0;\n        for (var i = 0, len = array.length; i < len; i++) {\n            if (array[i] === old) {\n                array[i] = newValue;\n                ++count;\n                if (count == max)\n                    break;\n            }\n        }\n        return count;\n    }\n    exports.replace = replace;\n    /**\n     * Replaces values of an array across a range of indexes.\n     * @param array\n     * @param value\n     * @param start\n     * @param stop\n     */\n    function updateRange(array, value, start, stop) {\n        if (start === void 0) { start = 0; }\n        if (!array)\n            return;\n        Integer_1.Integer.assertZeroOrGreater(start, 'start');\n        if (!stop && stop !== 0)\n            stop = array.length;\n        Integer_1.Integer.assert(stop, 'stop');\n        if (stop < start)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(\"stop\", stop, \"is less than start\");\n        for (var i = start; i < stop; i++) {\n            array[i] = value;\n        }\n    }\n    exports.updateRange = updateRange;\n    /**\n     * Clears (sets to null) values of an array across a range of indexes.\n     * @param array\n     * @param start\n     * @param stop\n     */\n    function clear(array, start, stop) {\n        if (start === void 0) { start = 0; }\n        updateRange(array, null, start, stop);\n    }\n    exports.clear = clear;\n    /**\n     * Ensures a value exists within an array.  If not found, adds to the end.\n     * @param array\n     * @param item\n     * @param {function?} equalityComparer\n     * @returns {boolean}\n     */\n    function register(array, item, equalityComparer) {\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n        if (!array)\n            throw new ArgumentNullException_1.ArgumentNullException('array', CBN);\n        var len = array.length; // avoid querying .length more than once. *\n        var ok = !len || !contains(array, item, equalityComparer);\n        if (ok)\n            array[len] = item; // * push would query length again.\n        return ok;\n    }\n    exports.register = register;\n    /**\n     * Returns the first index of which the provided predicate returns true.\n     * Returns -1 if always false.\n     * @param array\n     * @param predicate\n     * @returns {number}\n     */\n    function findIndex(array, predicate) {\n        if (!array)\n            throw new ArgumentNullException_1.ArgumentNullException('array', CBN);\n        if (!Types_1.Type.isFunction(predicate))\n            throw new ArgumentException_1.ArgumentException('predicate', 'Must be a function.');\n        var len = array.length;\n        if (!Types_1.Type.isNumber(len, true) || len < 0)\n            throw new ArgumentException_1.ArgumentException('array', 'Does not have a valid length.');\n        if ((array) instanceof (Array)) {\n            for (var i = 0; i < len; i++) {\n                if (predicate(array[i], i))\n                    return i;\n            }\n        }\n        else {\n            for (var i = 0; i < len; i++) {\n                if ((i) in (array) && predicate(array[i], i))\n                    return i;\n            }\n        }\n        return -1;\n    }\n    exports.findIndex = findIndex;\n    function forEach(source, action) {\n        if (source && action) {\n            // Don't cache the length since it is possible that the underlying array changed.\n            for (var i = 0; i < source.length; i++) {\n                if (action(source[i], i) === false)\n                    break;\n            }\n        }\n    }\n    exports.forEach = forEach;\n    /**\n     * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\n     * Can also be applied to a structure that indexes like an array, but may not be.\n     * @param target\n     * @param fn\n     */\n    function applyTo(target, fn) {\n        if (target && fn) {\n            for (var i = 0; i < target.length; i++) {\n                target[i] = fn(target[i], i);\n            }\n        }\n    }\n    exports.applyTo = applyTo;\n    /**\n     * Removes an entry at a specified index.\n     * @param array\n     * @param index\n     * @returns {boolean} True if the value was able to be removed.\n     */\n    function removeIndex(array, index) {\n        if (!array)\n            throw new ArgumentNullException_1.ArgumentNullException('array', CBN);\n        Integer_1.Integer.assert(index, 'index');\n        if (index < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('index', index, CBL0);\n        var exists = index < array.length;\n        if (exists)\n            array.splice(index, 1);\n        return exists;\n    }\n    exports.removeIndex = removeIndex;\n    /**\n     * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\n     * @param array\n     * @param value\n     * @param max\n     * @param {function?} equalityComparer\n     * @returns {number} The number of times the value was found and removed.\n     */\n    function remove(array, value, max, equalityComparer) {\n        if (max === void 0) { max = Infinity; }\n        if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n        if (!array || !array.length || max === 0)\n            return 0;\n        if (max < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('max', max, CBL0);\n        var count = 0;\n        if (!max || !isFinite(max)) {\n            // Don't track the indexes and remove in reverse.\n            for (var i = (array.length - 1); i >= 0; i--) {\n                if (equalityComparer(array[i], value)) {\n                    array.splice(i, 1);\n                    ++count;\n                }\n            }\n        }\n        else {\n            // Since the user will expect it to happen in forward order...\n            var found = []; // indexes;\n            for (var i = 0, len = array.length; i < len; i++) {\n                if (equalityComparer(array[i], value)) {\n                    found.push(i);\n                    ++count;\n                    if (count == max)\n                        break;\n                }\n            }\n            for (var i = found.length - 1; i >= 0; i--) {\n                array.splice(found[i], 1);\n            }\n        }\n        return count;\n    }\n    exports.remove = remove;\n    /**\n     * Simply repeats a value the number of times specified.\n     * @param element\n     * @param count\n     * @returns {T[]}\n     */\n    function repeat(element, count) {\n        Integer_1.Integer.assert(count, 'count');\n        if (count < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, CBL0);\n        var result = initialize_1.initialize(count);\n        for (var i = 0; i < count; i++) {\n            result[i] = element;\n        }\n        return result;\n    }\n    exports.repeat = repeat;\n    /**\n     * Returns a range of numbers based upon the first value and the step value.\n     * @param first\n     * @param count\n     * @param step\n     * @returns {number[]}\n     */\n    function range(first, count, step) {\n        if (step === void 0) { step = 1; }\n        if (isNaN(first) || !isFinite(first))\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('first', first, VFN);\n        if (isNaN(count) || !isFinite(count))\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, VFN);\n        if (count < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('count', count, CBL0);\n        var result = initialize_1.initialize(count);\n        for (var i = 0; i < count; i++) {\n            result[i] = first;\n            first += step;\n        }\n        return result;\n    }\n    exports.range = range;\n    /**\n     * Returns a range of numbers based upon the first value and the step value excluding any numbers at or beyond the until value.\n     * @param first\n     * @param until\n     * @param step\n     * @returns {number[]}\n     */\n    function rangeUntil(first, until, step) {\n        if (step === void 0) { step = 1; }\n        if (step == 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('step', step, CB0);\n        return range(first, (until - first) / step, step);\n    }\n    exports.rangeUntil = rangeUntil;\n    function distinct(source) {\n        if (!source)\n            return []; // Allowing for null facilitates regex filtering.\n        var seen = {};\n        return source.filter(function (e) { return !(e in seen) && (seen[e] = true); });\n    }\n    exports.distinct = distinct;\n    /**\n     * Takes any arrays within an array and inserts the values contained within in place of that array.\n     * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\n     * @param a\n     * @param recurseDepth\n     * @returns {any[]}\n     */\n    function flatten(a, recurseDepth) {\n        if (recurseDepth === void 0) { recurseDepth = 0; }\n        var result = [];\n        for (var i = 0; i < a.length; i++) {\n            var x = a[i];\n            if ((x) instanceof (Array)) {\n                if (recurseDepth > 0)\n                    x = flatten(x, recurseDepth - 1);\n                for (var n = 0; n < x.length; n++)\n                    result.push(x[n]);\n            }\n            else\n                result.push(x);\n        }\n        return result;\n    }\n    exports.flatten = flatten;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../../Types\";\r\nimport {Integer} from \"../../Integer\";\r\nimport {areEqual} from \"../../Compare\";\r\nimport {ArgumentException} from \"../../Exceptions/ArgumentException\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../../Exceptions/ArgumentOutOfRangeException\";\r\nimport {\r\n\tActionWithIndex,\r\n\tEqualityComparison,\r\n\tPredicateWithIndex,\r\n\tSelectorWithIndex\r\n} from \"../../FunctionTypes\";\r\nimport {ArrayLikeWritable} from \"./ArrayLikeWritable\";\r\nimport {initialize} from \"./initialize\";\r\nimport {copy, copyTo} from \"./copy\";\r\nexport {initialize, copy, copyTo};\r\n\r\nconst\r\n\tCBN  = 'Cannot be null.',\r\n\tCB0  = 'Cannot be zero.',\r\n\tCBL0 = 'Cannot be less than zero.',\r\n\tVFN  = 'Must be a valid finite number';\r\n\r\n\r\n/**\r\n * Checks to see where the provided array contains an item/value.\r\n * If the array value is null, then -1 is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {number}\r\n */\r\nexport function indexOf<T>(\r\n\tarray:ArrayLike<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\r\n\tconst len = array && array.length;\r\n\tif(len)\r\n\t{\r\n\t\t// NaN NEVER evaluates its equality so be careful.\r\n\t\tif((array) instanceof (Array) && !Type.isTrueNaN(item))\r\n\t\t\treturn array.indexOf(item);\r\n\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\t// 'areEqual' includes NaN==NaN evaluation.\r\n\t\t\tif(equalityComparer(array[i], item))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n}\r\n\r\n/**\r\n * Checks to see if the provided array contains an item.\r\n * If the array value is null, then false is returned.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function contains<T>(\r\n\tarray:ArrayLike<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\treturn indexOf(array, item, equalityComparer)!= -1;\r\n}\r\n\r\n/**\r\n * Finds and replaces a value from an array.  Will replaces all instances unless a maximum is specified.\r\n * @param array\r\n * @param old\r\n * @param newValue\r\n * @param max\r\n * @returns {number}\r\n */\r\nexport function replace<T>(\r\n\tarray:ArrayLikeWritable<T>,\r\n\told:T,\r\n\tnewValue:T,\r\n\tmax:number = Infinity):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\tif(!max) max = Infinity; // just in case.\r\n\r\n\tlet count = 0;\r\n\r\n\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t{\r\n\t\tif(array[i]===old)\r\n\t\t{\r\n\t\t\t(<any>array)[i] = newValue;\r\n\t\t\t++count;\r\n\t\t\tif(count==max) break;\r\n\t\t}\r\n\t}\r\n\r\n\treturn count;\r\n\r\n}\r\n\r\n/**\r\n * Replaces values of an array across a range of indexes.\r\n * @param array\r\n * @param value\r\n * @param start\r\n * @param stop\r\n */\r\nexport function updateRange<T>(\r\n\tarray:ArrayLike<T>,\r\n\tvalue:T,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tif(!array) return;\r\n\tInteger.assertZeroOrGreater(start, 'start');\r\n\tif(!stop && stop!==0) stop = array.length;\r\n\tInteger.assert(stop, 'stop');\r\n\tif(stop<start) throw new ArgumentOutOfRangeException(\"stop\", stop, \"is less than start\");\r\n\r\n\tfor(let i:number = start; i<stop; i++)\r\n\t{\r\n\t\t(<any>array)[i] = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Clears (sets to null) values of an array across a range of indexes.\r\n * @param array\r\n * @param start\r\n * @param stop\r\n */\r\nexport function clear(\r\n\tarray:ArrayLikeWritable<any>,\r\n\tstart:number = 0,\r\n\tstop?:number):void\r\n{\r\n\tupdateRange(array, null, start, stop);\r\n}\r\n\r\n/**\r\n * Ensures a value exists within an array.  If not found, adds to the end.\r\n * @param array\r\n * @param item\r\n * @param {function?} equalityComparer\r\n * @returns {boolean}\r\n */\r\nexport function register<T>(\r\n\tarray:ArrayLikeWritable<T>, item:T,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tlet len = array.length; // avoid querying .length more than once. *\r\n\tconst ok = !len || !contains(array, item, equalityComparer);\r\n\tif(ok) (<any>array)[len] = item; // * push would query length again.\r\n\treturn ok;\r\n}\r\n\r\n/**\r\n * Returns the first index of which the provided predicate returns true.\r\n * Returns -1 if always false.\r\n * @param array\r\n * @param predicate\r\n * @returns {number}\r\n */\r\nexport function findIndex<T>(array:ArrayLike<T>, predicate:PredicateWithIndex<T>):number\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\tif(!Type.isFunction(predicate))\r\n\t\tthrow new ArgumentException('predicate', 'Must be a function.');\r\n\r\n\tconst len = array.length;\r\n\tif(!Type.isNumber(len, true) || len<0)\r\n\t\tthrow new ArgumentException('array', 'Does not have a valid length.');\r\n\r\n\tif((array) instanceof (Array))\r\n\t{\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif(predicate(array[i], i))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\tfor(let i = 0; i<len; i++)\r\n\t\t{\r\n\t\t\tif((i) in (array) && predicate(array[i], i))\r\n\t\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn -1;\r\n}\r\n\r\n\r\n/**\r\n * Allows for using \"false\" to cause forEach to break.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param source\r\n * @param action\r\n */\r\nexport function forEach<T>(\r\n\tsource:ArrayLike<T>,\r\n\taction:ActionWithIndex<T>):void\r\nexport function forEach<T>(\r\n\tsource:ArrayLike<T>,\r\n\taction:PredicateWithIndex<T>):void\r\nexport function forEach<T>(\r\n\tsource:ArrayLike<T>,\r\n\taction:ActionWithIndex<T> | PredicateWithIndex<T>):void\r\n{\r\n\tif(source && action)\r\n\t{\r\n\t\t// Don't cache the length since it is possible that the underlying array changed.\r\n\t\tfor(let i = 0; i<source.length; i++)\r\n\t\t{\r\n\t\t\tif(action(source[i], i)===false)\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Is similar to Array.map() but instead of returning a new array, it updates the existing indexes.\r\n * Can also be applied to a structure that indexes like an array, but may not be.\r\n * @param target\r\n * @param fn\r\n */\r\nexport function applyTo<T>(target:ArrayLikeWritable<T>, fn:SelectorWithIndex<T,T>):void\r\n{\r\n\tif(target && fn)\r\n\t{\r\n\t\tfor(let i = 0; i<target.length; i++)\r\n\t\t{\r\n\t\t\t(<any>target)[i] = fn(target[i], i);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Removes an entry at a specified index.\r\n * @param array\r\n * @param index\r\n * @returns {boolean} True if the value was able to be removed.\r\n */\r\nexport function removeIndex<T>(array:T[], index:number):boolean\r\n{\r\n\tif(!array)\r\n\t\tthrow new ArgumentNullException('array', CBN);\r\n\r\n\tInteger.assert(index, 'index');\r\n\tif(index<0) throw new ArgumentOutOfRangeException('index', index, CBL0);\r\n\r\n\r\n\tconst exists = index<array.length;\r\n\tif(exists)\r\n\t\tarray.splice(index, 1);\r\n\treturn exists;\r\n}\r\n\r\n/**\r\n * Finds and removes a value from an array.  Will remove all instances unless a maximum is specified.\r\n * @param array\r\n * @param value\r\n * @param max\r\n * @param {function?} equalityComparer\r\n * @returns {number} The number of times the value was found and removed.\r\n */\r\nexport function remove<T>(\r\n\tarray:T[], value:T, max:number = Infinity,\r\n\tequalityComparer:EqualityComparison<T> = areEqual):number\r\n{\r\n\tif(!array || !array.length || max===0) return 0;\r\n\tif(max<0) throw new ArgumentOutOfRangeException('max', max, CBL0);\r\n\r\n\tlet count = 0;\r\n\tif(!max || !isFinite(max))\r\n\t{\r\n\t\t// Don't track the indexes and remove in reverse.\r\n\t\tfor(let i = (array.length - 1); i>=0; i--)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tarray.splice(i, 1);\r\n\t\t\t\t++count;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse\r\n\t{\r\n\t\t// Since the user will expect it to happen in forward order...\r\n\t\tconst found:number[] = []; // indexes;\r\n\t\tfor(let i = 0, len = array.length; i<len; i++)\r\n\t\t{\r\n\t\t\tif(equalityComparer(array[i], value))\r\n\t\t\t{\r\n\t\t\t\tfound.push(i);\r\n\t\t\t\t++count;\r\n\t\t\t\tif(count==max) break;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfor(let i = found.length - 1; i>=0; i--)\r\n\t\t{\r\n\t\t\tarray.splice(found[i], 1);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\treturn count;\r\n}\r\n\r\n/**\r\n * Simply repeats a value the number of times specified.\r\n * @param element\r\n * @param count\r\n * @returns {T[]}\r\n */\r\nexport function repeat<T>(element:T, count:number):T[]\r\n{\r\n\tInteger.assert(count, 'count');\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tconst result = initialize<T>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = element;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value.\r\n * @param first\r\n * @param count\r\n * @param step\r\n * @returns {number[]}\r\n */\r\n\r\nexport function range(\r\n\tfirst:number,\r\n\tcount:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(isNaN(first) || !isFinite(first)) throw new ArgumentOutOfRangeException('first', first, VFN);\r\n\tif(isNaN(count) || !isFinite(count)) throw new ArgumentOutOfRangeException('count', count, VFN);\r\n\tif(count<0) throw new ArgumentOutOfRangeException('count', count, CBL0);\r\n\r\n\tconst result = initialize<number>(count);\r\n\tfor(let i = 0; i<count; i++)\r\n\t{\r\n\t\tresult[i] = first;\r\n\t\tfirst += step;\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Returns a range of numbers based upon the first value and the step value excluding any numbers at or beyond the until value.\r\n * @param first\r\n * @param until\r\n * @param step\r\n * @returns {number[]}\r\n */\r\nexport function rangeUntil(\r\n\tfirst:number,\r\n\tuntil:number,\r\n\tstep:number = 1):number[]\r\n{\r\n\tif(step==0) throw new ArgumentOutOfRangeException('step', step, CB0);\r\n\treturn range(first, (until - first)/step, step);\r\n}\r\n\r\n/**\r\n * Returns a unique reduced set of values.\r\n * @param source\r\n */\r\nexport function distinct(source:string[]|null):string[];\r\nexport function distinct(source:number[]|null):number[];\r\nexport function distinct(source:any[]|null):any[]\r\n{\r\n\tif(!source) return []; // Allowing for null facilitates regex filtering.\r\n\tconst seen:any = {};\r\n\treturn source.filter(e => !(e in seen) && (seen[e] = true));\r\n}\r\n\r\n/**\r\n * Takes any arrays within an array and inserts the values contained within in place of that array.\r\n * For every count higher than 0 in recurseDepth it will attempt an additional pass.  Passing Infinity will flatten all arrays contained.\r\n * @param a\r\n * @param recurseDepth\r\n * @returns {any[]}\r\n */\r\nexport function flatten(a:any[], recurseDepth:number = 0):any[]\r\n{\r\n\tconst result:any[] = [];\r\n\tfor(let i = 0; i<a.length; i++)\r\n\t{\r\n\t\tlet x = a[i];\r\n\t\tif((x) instanceof (Array))\r\n\t\t{\r\n\t\t\tif(recurseDepth>0) x = flatten(x, recurseDepth - 1);\r\n\t\t\tfor(let n = 0; n<x.length; n++) result.push(x[n]);\r\n\t\t}\r\n\t\telse result.push(x);\r\n\t}\r\n\treturn result;\r\n}\r\n"]}