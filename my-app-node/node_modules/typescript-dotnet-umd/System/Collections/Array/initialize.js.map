{"version":3,"sources":["System/Collections/Array/initialize.js","System/Collections/Array/initialize.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","initialize","length","Integer_1","Integer","assert","array","Array","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,iBAAkBN,IAErD,SAAUI,EAASF,GAClB,YCDJ,SAAAM,GAA8BC,GAE7BC,EAAAC,QAAQC,OAAOH,EAAQ,SAEvB,IAAII,EAQJ,OAPGJ,GAAO,MACTI,EAAQ,GAAIC,OAAML,IAGlBI,KACAA,EAAMJ,OAASA,GAETI,EDVJE,OAAOC,eAAed,EAAS,cAAgBe,OAAO,GCT1D,IAAAP,GAAAN,EAAA,gBAOAF,GAAAM,WAAAA","file":"initialize.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../Integer\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Integer_1 = require(\"../../Integer\");\n    /**\n     * Initializes an array depending on the requested capacity.\n     * The returned array will have a .length equal to the value provided.\n     * @param length\n     * @returns {T[]}\n     */\n    function initialize(length) {\n        Integer_1.Integer.assert(length, 'length');\n        // This logic is based upon JS performance tests that show a significant difference at the level of 65536.\n        var array;\n        if (length > 65536)\n            array = new Array(length);\n        else {\n            array = [];\n            array.length = length;\n        }\n        return array;\n    }\n    exports.initialize = initialize;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Integer} from \"../../Integer\";\r\n/**\r\n * Initializes an array depending on the requested capacity.\r\n * The returned array will have a .length equal to the value provided.\r\n * @param length\r\n * @returns {T[]}\r\n */\r\nexport function initialize<T>(length:number):T[]\r\n{\r\n\tInteger.assert(length, 'length');\r\n\t// This logic is based upon JS performance tests that show a significant difference at the level of 65536.\r\n\tlet array:T[];\r\n\tif(length>65536)\r\n\t\tarray = new Array(length);\r\n\telse\r\n\t{\r\n\t\tarray = [];\r\n\t\tarray.length = length;\r\n\t}\r\n\treturn array;\r\n}"]}