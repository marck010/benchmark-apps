{"version":3,"sources":["System/Collections/Array/Sorting/quickSort.js","System/Collections/Array/Sorting/quickSort.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","quickSort","target","ArgumentNullException_1","ArgumentNullException","len","length","sort","low","high","swap","pivotIndex","Math","floor","i","j","Object","defineProperty","value"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,6CAA8CN,IAEjF,SAAUI,EAASF,GAClB,YCEJ,SAAAM,GAAoFC,GAEnF,IAAIA,EAAQ,KAAM,IAAIC,GAAAC,sBAAsB,SAC5C,IAAMC,GAAMH,EAAOI,MACnB,OAAOJ,GAAOI,OAAO,EAAIJ,EAASK,EAAKL,EAAQ,EAAGG,EAAM,GAGzD,QAAAE,GACCL,EACAM,EACAC,GAEA,GAAGD,EAAIC,EACP,CAEC,GAAIC,GAAI,OACFC,EAAaC,KAAKC,OAAOL,EAAMC,GAAM,EAE3CC,GAAOR,EAAOS,GACdT,EAAOS,GAAcT,EAAOO,GAC5BP,EAAOO,GAAQC,CAGf,KAAI,GADAI,GAAIN,EACAO,EAAIP,EAAKO,EAAEN,EAAMM,IAErBb,EAAOa,GAAGb,EAAOO,KAEnBC,EAAOR,EAAOY,GACdZ,EAAOY,GAAKZ,EAAOa,GACnBb,EAAOa,GAAKL,EACZI,IAIFJ,GAAOR,EAAOY,GACdZ,EAAOY,GAAKZ,EAAOO,GACnBP,EAAOO,GAAQC,EAEfH,EAAKL,EAAQM,EAAKM,EAAI,GACtBP,EAAKL,EAAQY,EAAI,EAAGL,GAGrB,MAAOP,GD3CJc,OAAOC,eAAetB,EAAS,cAAgBuB,OAAO,GCR1D,IAAAf,GAAAN,EAAA,4CASAF,GAAAM,UAAAA","file":"quickSort.js","sourcesContent":["/*!\n * @author Sebastian Belmar / https://github.com/sebabelmar/\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../../Exceptions/ArgumentNullException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var ArgumentNullException_1 = require(\"../../../Exceptions/ArgumentNullException\");\n    /**\n     * Quick internalSort O(n log (n))\n     * Warning: Uses recursion.\n     * @param target\n     * @returns {T[]}\n     */\n    function quickSort(target) {\n        if (!target)\n            throw new ArgumentNullException_1.ArgumentNullException(\"target\");\n        var len = target.length;\n        return target.length < 2 ? target : sort(target, 0, len - 1);\n    }\n    exports.quickSort = quickSort;\n    function sort(target, low, high) {\n        if (low < high) {\n            // Partition first...\n            var swap = void 0;\n            var pivotIndex = Math.floor((low + high) / 2);\n            swap = target[pivotIndex];\n            target[pivotIndex] = target[high];\n            target[high] = swap;\n            var i = low;\n            for (var j = low; j < high; j++) {\n                if (target[j] < target[high]) {\n                    swap = target[i];\n                    target[i] = target[j];\n                    target[j] = swap;\n                    i++;\n                }\n            }\n            swap = target[i];\n            target[i] = target[high];\n            target[high] = swap;\n            sort(target, low, i - 1);\n            sort(target, i + 1, high);\n        }\n        return target;\n    }\n});\n","/*!\r\n * @author Sebastian Belmar / https://github.com/sebabelmar/\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Primitive} from \"../../../Primitive\";\r\nimport {ArgumentNullException} from \"../../../Exceptions/ArgumentNullException\";\r\nimport {ArrayLikeWritable} from \"../ArrayLikeWritable\";\r\n\r\n/**\r\n * Quick internalSort O(n log (n))\r\n * Warning: Uses recursion.\r\n * @param target\r\n * @returns {T[]}\r\n */\r\nexport function quickSort<T extends Primitive, TArray extends ArrayLikeWritable<T>>(target:TArray):TArray\r\n{\r\n\tif(!target) throw new ArgumentNullException(\"target\");\r\n\tconst len = target.length;\r\n\treturn target.length<2 ? target : sort(target, 0, len - 1);\r\n}\r\n\r\nfunction sort<T extends Primitive, TArray extends ArrayLikeWritable<T>>(\r\n\ttarget:TArray,\r\n\tlow:number,\r\n\thigh:number):TArray\r\n{\r\n\tif(low<high)\r\n\t{\r\n\t\t// Partition first...\r\n\t\tlet swap:T;\r\n\t\tconst pivotIndex = Math.floor((low + high)/2);\r\n\r\n\t\tswap = target[pivotIndex];\r\n\t\ttarget[pivotIndex] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tlet i = low;\r\n\t\tfor(let j = low; j<high; j++)\r\n\t\t{\r\n\t\t\tif(target[j]<target[high])\r\n\t\t\t{\r\n\t\t\t\tswap = target[i];\r\n\t\t\t\ttarget[i] = target[j];\r\n\t\t\t\ttarget[j] = swap;\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tswap = target[i];\r\n\t\ttarget[i] = target[high];\r\n\t\ttarget[high] = swap;\r\n\r\n\t\tsort(target, low, i - 1);\r\n\t\tsort(target, i + 1, high);\r\n\t}\r\n\r\n\treturn target;\r\n}\r\n"]}