{"version":3,"sources":["System/Collections/Array/Dispatch.js","System/Collections/Array/Dispatch.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","dispatch","listeners","payload","trap","unsafe","copy_1","copy","Object","defineProperty","value","Types_1","VOID0","length","i","len","fn","ex","Type","isFunction","mapped","result"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,cAAe,UAAWN,IAE7D,SAAUI,EAASF,GAClB,YCWJ,SAAAM,GACCC,EACAC,EAAWC,GAEXH,EAASI,OAAOC,EAAAC,KAAKL,GAAYC,EAASC,GDdvCI,OAAOC,eAAed,EAAS,cAAgBe,OAAO,GCT1D,IAAAC,GAAAd,EAAA,eACAS,EAAAT,EAAA,UAGMe,EAAkB,MAexBjB,GAAAM,SAAAA,EAOA,SAAcA,GAuBb,QAAAI,GACCH,EACAC,EAAWC,GAEX,GAAGF,GAAaA,EAAUW,OAEzB,IAAI,GAAIC,GAAI,EAAGC,EAAMb,EAAUW,OAAQC,EAAEC,EAAKD,IAC9C,CACC,GAAIE,GAAcd,EAAUY,EAC5B,IAAIE,EACJ,IAECA,EAAGb,GAEJ,MAAMc,GAEL,IAAIb,EACH,KAAMa,EACCN,GAAAO,KAAKC,WAAWf,IACvBA,EAAKa,EAAIH,KAed,QAAAM,GACClB,EACAC,EAAWC,GAGX,IAAIF,EAAW,MAAYA,EAE3B,IAAMmB,GAAef,EAAAC,KAAKL,EAC1B,IAAGA,EAAUW,OAGZ,IAAI,GAAIC,GAAI,EAAGC,EAAMM,EAAOR,OAAQC,EAAEC,EAAKD,IAC3C,CACC,GAAIE,GAAcK,EAAOP,EACzB,KAECO,EAAOP,GAAKE,EACTA,EAAGb,GACHS,EAEJ,MAAMK,GAGL,GADAI,EAAOP,GAAKF,GACRR,EACH,KAAMa,EACCN,GAAAO,KAAKC,WAAWf,IACvBA,EAAKa,EAAIH,IAKb,MAAOO,GAjEQpB,EAAAI,OAAMA,EAkCNJ,EAAAmB,OAAMA,GAzDTnB,EAAAN,EAAAM,WAAAN,EAAAM,cA8FdN,EAAAA,WAAeM","file":"Dispatch.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../Types\", \"./copy\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Types_1 = require(\"../../Types\");\n    var copy_1 = require(\"./copy\");\n    var VOID0 = void 0;\n    /**\n     * Simply takes a payload and passes it to all the listeners.\n     * Makes a arrayCopy of the listeners before calling dispatchUnsafe.\n     *\n     * @param listeners\n     * @param payload\n     * @param trap\n     */\n    function dispatch(listeners, payload, trap) {\n        dispatch.unsafe(copy_1.copy(listeners), payload, trap);\n    }\n    exports.dispatch = dispatch;\n    (function (dispatch) {\n        /**\n         * Simply takes a payload and passes it to all the listeners.\n         *\n         * While dispatching:\n         * * This is an unsafe method if by chance any of the listeners modify the array.\n         * * It cannot prevent changes to the payload.\n         *\n         * Improving safety:\n         * * Only use a local array that isn't exposed to the listeners.\n         * * Use the dispatch method instead as it makes a arrayCopy of the listeners array.\n         * * Freeze the listeners array so it can't be modified.\n         * * Freeze the payload.\n         *\n         * Specifying trap will catch any errors and pass them along if trap is a function.\n         * A payload is used instead of arguments for easy typing.\n         *\n         *\n         * @param listeners\n         * @param payload\n         * @param trap\n         */\n        function unsafe(listeners, payload, trap) {\n            if (listeners && listeners.length) {\n                for (var i = 0, len = listeners.length; i < len; i++) {\n                    var fn = listeners[i];\n                    if (!fn)\n                        continue; // Ignore null refs.\n                    try {\n                        fn(payload);\n                    }\n                    catch (ex) {\n                        if (!trap)\n                            throw ex;\n                        else if (Types_1.Type.isFunction(trap))\n                            trap(ex, i);\n                    }\n                }\n            }\n        }\n        dispatch.unsafe = unsafe;\n        /**\n         * Simply takes a payload and passes it to all the listeners.\n         * Returns the results in an array that matches the indexes of the listeners.\n         *\n         * @param listeners\n         * @param payload\n         * @param trap\n         * @returns {any}\n         */\n        function mapped(listeners, payload, trap) {\n            if (!listeners)\n                return listeners;\n            // Reuse the arrayCopy as the array result.\n            var result = copy_1.copy(listeners);\n            if (listeners.length) {\n                for (var i = 0, len = result.length; i < len; i++) {\n                    var fn = result[i];\n                    try {\n                        result[i] = fn // Ignore null refs.\n                            ? fn(payload)\n                            : VOID0;\n                    }\n                    catch (ex) {\n                        result[i] = VOID0;\n                        if (!trap)\n                            throw ex;\n                        else if (Types_1.Type.isFunction(trap))\n                            trap(ex, i);\n                    }\n                }\n            }\n            return result;\n        }\n        dispatch.mapped = mapped;\n    })(dispatch = exports.dispatch || (exports.dispatch = {}));\n    exports.default = dispatch;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../../Types\";\r\nimport {copy} from \"./copy\";\r\nimport {Selector} from \"../../FunctionTypes\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport interface DispatchErrorHandler\r\n{\r\n\t(ex:any, index:number):void\r\n}\r\n\r\n/**\r\n * Simply takes a payload and passes it to all the listeners.\r\n * Makes a arrayCopy of the listeners before calling dispatchUnsafe.\r\n *\r\n * @param listeners\r\n * @param payload\r\n * @param trap\r\n */\r\nexport function dispatch<T>(\r\n\tlisteners:ArrayLike<Selector<T,any>>,\r\n\tpayload:T, trap?:boolean|DispatchErrorHandler):void\r\n{\r\n\tdispatch.unsafe(copy(listeners), payload, trap);\r\n}\r\n\r\nexport module dispatch {\r\n\r\n\t/**\r\n\t * Simply takes a payload and passes it to all the listeners.\r\n\t *\r\n\t * While dispatching:\r\n\t * * This is an unsafe method if by chance any of the listeners modify the array.\r\n\t * * It cannot prevent changes to the payload.\r\n\t *\r\n\t * Improving safety:\r\n\t * * Only use a local array that isn't exposed to the listeners.\r\n\t * * Use the dispatch method instead as it makes a arrayCopy of the listeners array.\r\n\t * * Freeze the listeners array so it can't be modified.\r\n\t * * Freeze the payload.\r\n\t *\r\n\t * Specifying trap will catch any errors and pass them along if trap is a function.\r\n\t * A payload is used instead of arguments for easy typing.\r\n\t *\r\n\t *\r\n\t * @param listeners\r\n\t * @param payload\r\n\t * @param trap\r\n\t */\r\n\texport function unsafe<T>(\r\n\t\tlisteners:ArrayLike<Selector<T,any>>,\r\n\t\tpayload:T, trap?:boolean|DispatchErrorHandler):void\r\n\t{\r\n\t\tif(listeners && listeners.length)\r\n\t\t{\r\n\t\t\tfor(let i = 0, len = listeners.length; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet fn:Function = listeners[i];\r\n\t\t\t\tif(!fn) continue; // Ignore null refs.\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tfn(payload);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(!trap)\r\n\t\t\t\t\t\tthrow ex;\r\n\t\t\t\t\telse if(Type.isFunction(trap))\r\n\t\t\t\t\t\ttrap(ex, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Simply takes a payload and passes it to all the listeners.\r\n\t * Returns the results in an array that matches the indexes of the listeners.\r\n\t *\r\n\t * @param listeners\r\n\t * @param payload\r\n\t * @param trap\r\n\t * @returns {any}\r\n\t */\r\n\texport function mapped<T,TResult>(\r\n\t\tlisteners:ArrayLike<Selector<T,TResult>>,\r\n\t\tpayload:T, trap?:boolean|DispatchErrorHandler):TResult[]\r\n\t{\r\n\r\n\t\tif(!listeners) return <any>listeners;\r\n\t\t// Reuse the arrayCopy as the array result.\r\n\t\tconst result:any[] = copy(listeners);\r\n\t\tif(listeners.length)\r\n\t\t{\r\n\r\n\t\t\tfor(let i = 0, len = result.length; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tlet fn:Function = result[i];\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = fn // Ignore null refs.\r\n\t\t\t\t\t\t? fn(payload)\r\n\t\t\t\t\t\t: VOID0;\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult[i] = VOID0;\r\n\t\t\t\t\tif(!trap)\r\n\t\t\t\t\t\tthrow ex;\r\n\t\t\t\t\telse if(Type.isFunction(trap))\r\n\t\t\t\t\t\ttrap(ex, i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default dispatch;"]}