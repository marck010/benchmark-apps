{"version":3,"sources":["System/Collections/Array/copy.js","System/Collections/Array/copy.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","copy","source","sourceIndex","length","Infinity","copyTo","initialize_1","initialize","Math","min","max","destination","destinationIndex","ArgumentNullException_1","ArgumentNullException","CBN","ArgumentOutOfRangeException_1","ArgumentOutOfRangeException","CBL0","sourceLength","maxLength","isFinite","newLength","i","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,eAAgB,yCAA0C,gDAAiDN,IAE9I,SAAUI,EAASF,GAClB,YCGJ,SAAAM,GACCC,EACAC,EACAC,GAEA,MAHA,UAAAD,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAAC,EAAAA,GAEIH,EACGI,EACNJ,EACAK,EAAAC,WAAcC,KAAKC,IAAIN,EAAQK,KAAKE,IAAIT,EAAOE,OAASD,EAAa,KACrEA,EAAa,EAAGC,GAJOF,EAoBzB,QAAAI,GACCJ,EACAU,EACAT,EACAU,EACAT,GAEA,GAJA,SAAAD,IAAAA,EAAA,GACA,SAAAU,IAAAA,EAAA,GACA,SAAAT,IAAAA,EAAAC,EAAAA,IAEIH,EACH,KAAM,IAAIY,GAAAC,sBAAsB,SAAUC,EAE3C,KAAIJ,EACH,KAAM,IAAIE,GAAAC,sBAAsB,cAAeC,EAEhD,IAAGb,EAAY,EACd,KAAM,IAAIc,GAAAC,4BAA4B,cAAef,EAAagB,EAEnE,IAAIC,GAAelB,EAAOE,MAC1B,KAAIgB,EACH,MAAOR,EACR,IAAGT,GAAaiB,EACf,KAAM,IAAIH,GAAAC,4BAA4B,cAAef,EAAa,oDAEnE,IAAGS,EAAYR,OAAO,EACrB,KAAM,IAAIa,GAAAC,4BAA4B,mBAAoBL,EAAkBM,EAE7E,IAAME,GAAYnB,EAAOE,OAASD,CAClC,IAAGmB,SAASlB,IAAWA,EAAOiB,EAC7B,KAAM,IAAIJ,GAAAC,4BAA4B,cAAef,EAAa,sEAEnEC,GAASK,KAAKC,IAAIN,EAAQiB,EAC1B,IAAME,GAAYV,EAAmBT,CAClCmB,GAAUX,EAAYR,SAAQQ,EAAYR,OAASmB,EAEtD,KAAI,GAAIC,GAAI,EAAGA,EAAEpB,EAAQoB,IAExBZ,EAAYC,EAAmBW,GAAKtB,EAAOC,EAAcqB,EAG1D,OAAOZ,GDjEJa,OAAOC,eAAe/B,EAAS,cAAgBgC,OAAO,GCT1D,IAAApB,GAAAV,EAAA,gBAEAiB,EAAAjB,EAAA,0CACAoB,EAAApB,EAAA,+CAQAF,GAAAM,KAAAA,CAYA,IACCe,GAAO,kBACPG,EAAO,2BAWRxB,GAAAW,OAAAA","file":"copy.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./initialize\", \"../../Exceptions/ArgumentNullException\", \"../../Exceptions/ArgumentOutOfRangeException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var initialize_1 = require(\"./initialize\");\n    var ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\n    var ArgumentOutOfRangeException_1 = require(\"../../Exceptions/ArgumentOutOfRangeException\");\n    /**\n     *\n     * @param source\n     * @param sourceIndex\n     * @param length\n     * @returns {any}\n     */\n    function copy(source, sourceIndex, length) {\n        if (sourceIndex === void 0) { sourceIndex = 0; }\n        if (length === void 0) { length = Infinity; }\n        if (!source)\n            return source; // may have passed zero? undefined? or null?\n        return copyTo(source, initialize_1.initialize(Math.min(length, Math.max(source.length - sourceIndex, 0))), sourceIndex, 0, length);\n    }\n    exports.copy = copy;\n    var CBN = 'Cannot be null.', CBL0 = 'Cannot be less than zero.';\n    /**\n     * Copies one array to another.\n     * @param source\n     * @param destination\n     * @param sourceIndex\n     * @param destinationIndex\n     * @param length An optional limit to stop copying.\n     * @returns The destination array.\n     */\n    function copyTo(source, destination, sourceIndex, destinationIndex, length) {\n        if (sourceIndex === void 0) { sourceIndex = 0; }\n        if (destinationIndex === void 0) { destinationIndex = 0; }\n        if (length === void 0) { length = Infinity; }\n        if (!source)\n            throw new ArgumentNullException_1.ArgumentNullException('source', CBN);\n        if (!destination)\n            throw new ArgumentNullException_1.ArgumentNullException('destination', CBN);\n        if (sourceIndex < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\n        var sourceLength = source.length;\n        if (!sourceLength)\n            return destination;\n        if (sourceIndex >= sourceLength)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\n        if (destination.length < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\n        var maxLength = source.length - sourceIndex;\n        if (isFinite(length) && length > maxLength)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\n        length = Math.min(length, maxLength);\n        var newLength = destinationIndex + length;\n        if (newLength > destination.length)\n            destination.length = newLength;\n        for (var i = 0; i < length; i++) {\n            destination[destinationIndex + i] = source[sourceIndex + i];\n        }\n        return destination;\n    }\n    exports.copyTo = copyTo;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {initialize} from \"./initialize\";\r\nimport {ArrayLikeWritable} from \"./ArrayLikeWritable\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {ArgumentOutOfRangeException} from \"../../Exceptions/ArgumentOutOfRangeException\";\r\n/**\r\n *\r\n * @param source\r\n * @param sourceIndex\r\n * @param length\r\n * @returns {any}\r\n */\r\nexport function copy<T>(\r\n\tsource:ArrayLike<T>,\r\n\tsourceIndex:number = 0,\r\n\tlength:number = Infinity):T[]\r\n{\r\n\tif(!source) return <any>source; // may have passed zero? undefined? or null?\r\n\treturn copyTo(\r\n\t\tsource,\r\n\t\tinitialize<T>(Math.min(length, Math.max(source.length - sourceIndex, 0))),\r\n\t\tsourceIndex, 0, length);\r\n}\r\n\r\nconst\r\n\tCBN  = 'Cannot be null.',\r\n\tCBL0 = 'Cannot be less than zero.';\r\n\r\n/**\r\n * Copies one array to another.\r\n * @param source\r\n * @param destination\r\n * @param sourceIndex\r\n * @param destinationIndex\r\n * @param length An optional limit to stop copying.\r\n * @returns The destination array.\r\n */\r\nexport function copyTo<T,TDestination extends ArrayLikeWritable<T>>(\r\n\tsource:ArrayLike<T>,\r\n\tdestination:TDestination,\r\n\tsourceIndex:number = 0,\r\n\tdestinationIndex:number = 0,\r\n\tlength:number = Infinity):TDestination\r\n{\r\n\tif(!source)\r\n\t\tthrow new ArgumentNullException('source', CBN);\r\n\r\n\tif(!destination)\r\n\t\tthrow new ArgumentNullException('destination', CBN);\r\n\r\n\tif(sourceIndex<0)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, CBL0);\r\n\r\n\tlet sourceLength = source.length;\r\n\tif(!sourceLength)\r\n\t\treturn destination;\r\n\tif(sourceIndex>=sourceLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Must be less than the length of the source array.');\r\n\r\n\tif(destination.length<0)\r\n\t\tthrow new ArgumentOutOfRangeException('destinationIndex', destinationIndex, CBL0);\r\n\r\n\tconst maxLength = source.length - sourceIndex;\r\n\tif(isFinite(length) && length>maxLength)\r\n\t\tthrow new ArgumentOutOfRangeException('sourceIndex', sourceIndex, 'Source index + length cannot exceed the length of the source array.');\r\n\r\n\tlength = Math.min(length, maxLength);\r\n\tconst newLength = destinationIndex + length;\r\n\tif(newLength>destination.length) destination.length = newLength;\r\n\r\n\tfor(let i = 0; i<length; i++)\r\n\t{\r\n\t\tdestination[destinationIndex + i] = source[sourceIndex + i];\r\n\t}\r\n\r\n\treturn destination;\r\n}\r\n"]}