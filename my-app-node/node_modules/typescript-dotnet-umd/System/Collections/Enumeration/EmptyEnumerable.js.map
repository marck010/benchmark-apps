{"version":3,"sources":["System/Collections/Enumeration/EmptyEnumerable.js","System/Collections/Enumeration/EmptyEnumerable.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","EmptyEnumerator_1","EmptyEnumerable","this","isEndless","prototype","getEnumerator","EmptyEnumerator"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,qBAAsBN,IAEzD,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCP1D,IAAAC,GAAAP,EAAA,qBACAQ,EAAA,WAEC,QAAAA,KACCC,KAAKC,WAAY,EAWnB,MARCF,GAAAG,UAAAC,cAAA,WACC,MAAOL,GAAAM,iBAOTL,IAdaV,GAAAU,gBAAAA","file":"EmptyEnumerable.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./EmptyEnumerator\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var EmptyEnumerator_1 = require(\"./EmptyEnumerator\");\n    var EmptyEnumerable = /** @class */ (function () {\n        function EmptyEnumerable() {\n            this.isEndless = false;\n        }\n        EmptyEnumerable.prototype.getEnumerator = function () {\n            return EmptyEnumerator_1.EmptyEnumerator;\n        };\n        return EmptyEnumerable;\n    }());\n    exports.EmptyEnumerable = EmptyEnumerable;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT\r\n */\r\n\r\nimport {IEnumerable} from \"./IEnumerable\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {EmptyEnumerator} from \"./EmptyEnumerator\";\r\nexport class EmptyEnumerable implements IEnumerable<any>{\r\n\r\n\tconstructor() {\r\n\t\tthis.isEndless = false;\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<any> {\r\n\t\treturn EmptyEnumerator;\r\n\t}\r\n\r\n\t/**\r\n\t * Provides a way of flagging endless enumerations that may cause issues.\r\n\t */\r\n\treadonly isEndless:boolean;\r\n}\r\n"]}