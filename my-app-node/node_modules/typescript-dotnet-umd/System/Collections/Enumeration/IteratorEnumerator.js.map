{"version":3,"sources":["System/Collections/Enumeration/IteratorEnumerator.js","System/Collections/Enumeration/IteratorEnumerator.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","SimpleEnumerableBase_1","extends_1","__extends","IteratorEnumerator","_super","_iterator","_isEndless","_this","call","this","prototype","_canMoveNext","moveNext","_","i","r","arguments","length","next","_current","done","dispose","getIsEndless","Boolean","SimpleEnumerableBase"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,yBAA0B,oBAAqBN,IAElF,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCR1D,IAAAC,GAAAP,EAAA,0BACAQ,EAAAR,EAAA,oBAEMS,EAAYD,EAAAA,WAQlBE,EAAA,SAAAC,GAMC,QAAAD,GACkBE,EACAC,GAFlB,GAAAC,GAICH,EAAAI,KAAAC,OAAOA,IDQG,OCXOF,GAAAF,UAAAA,EACAE,EAAAD,WAAAA,EDUAC,ECwBnB,MA1C2CL,GAAAC,EAAAC,GAahCD,EAAAO,UAAAC,aAAV,WAEC,MAAuB,OAAhBF,KAAKJ,WAGbF,EAAAO,UAAAE,SAAA,SAASb,GAER,GAAMc,GAAIJ,KACJK,EAAID,EAAER,SACZ,IAAGS,EACH,CACC,GAAMC,GAAIC,UAAUC,OAASH,EAAEI,KAAKnB,GAASe,EAAEI,MAE/C,IADAL,EAAEM,SAAWJ,EAAEhB,OACZgB,EAAEK,KACA,OAAO,CADDP,GAAEQ,UAGd,OAAO,GAGRlB,EAAAO,UAAAW,QAAA,WAECjB,EAAAM,UAAMW,QAAOb,KAAAC,MACPA,KAAMJ,UAAY,MAGfF,EAAAO,UAAAY,aAAV,WAEC,MAAOC,SAAQd,KAAKH,aAAeF,EAAAM,UAAMY,aAAYd,KAAAC,OAEvDN,GA1C2CH,EAAAwB,qBAA9BjC,GAAAY,mBAAAA,EA4CbZ,EAAAA,WAAeY","file":"IteratorEnumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./SimpleEnumerableBase\", \"../../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var SimpleEnumerableBase_1 = require(\"./SimpleEnumerableBase\");\n    var extends_1 = require(\"../../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    /**\n     * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\n     * This is analogous to a 'generator' and has a compatible interface.\n     *\n     *\n     */\n    var IteratorEnumerator = /** @class */ (function (_super) {\n        __extends(IteratorEnumerator, _super);\n        /**\n         * @param _iterator\n         * @param _isEndless true and false are explicit where as undefined means 'unknown'.\n         */\n        function IteratorEnumerator(_iterator, _isEndless) {\n            var _this = _super.call(this) || this;\n            _this._iterator = _iterator;\n            _this._isEndless = _isEndless;\n            return _this;\n        }\n        IteratorEnumerator.prototype._canMoveNext = function () {\n            return this._iterator != null;\n        };\n        IteratorEnumerator.prototype.moveNext = function (value) {\n            var _ = this;\n            var i = _._iterator;\n            if (i) {\n                var r = arguments.length ? i.next(value) : i.next();\n                _._current = r.value;\n                if (r.done)\n                    _.dispose();\n                else\n                    return true;\n            }\n            return false;\n        };\n        IteratorEnumerator.prototype.dispose = function () {\n            _super.prototype.dispose.call(this);\n            this._iterator = null;\n        };\n        IteratorEnumerator.prototype.getIsEndless = function () {\n            return Boolean(this._isEndless) && _super.prototype.getIsEndless.call(this);\n        };\n        return IteratorEnumerator;\n    }(SimpleEnumerableBase_1.SimpleEnumerableBase));\n    exports.IteratorEnumerator = IteratorEnumerator;\n    exports.default = IteratorEnumerator;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {IIterator} from \"./IIterator\";\r\nimport {SimpleEnumerableBase} from \"./SimpleEnumerableBase\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified stripped down enumerator that until disposed will infinitely return the provided factory.\r\n * This is analogous to a 'generator' and has a compatible interface.\r\n *\r\n *\r\n */\r\nexport class IteratorEnumerator<T> extends SimpleEnumerableBase<T>\r\n{\r\n\t/**\r\n\t * @param _iterator\r\n\t * @param _isEndless true and false are explicit where as undefined means 'unknown'.\r\n\t */\r\n\tconstructor(\r\n\t\tprivate readonly _iterator:IIterator<T>,\r\n\t\tprivate readonly _isEndless?:boolean)\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tprotected _canMoveNext():boolean\r\n\t{\r\n\t\treturn this._iterator!=null;\r\n\t}\r\n\r\n\tmoveNext(value?:any):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst i = _._iterator;\r\n\t\tif(i)\r\n\t\t{\r\n\t\t\tconst r = arguments.length ? i.next(value) : i.next();\r\n\t\t\t_._current = r.value;\r\n\t\t\tif(r.done) _.dispose();\r\n\t\t\telse return true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tsuper.dispose();\r\n\t\t(<any>this)._iterator = null;\r\n\t}\r\n\r\n\tprotected getIsEndless():boolean\r\n\t{\r\n\t\treturn Boolean(this._isEndless) && super.getIsEndless();\r\n\t}\r\n}\r\n\r\nexport default IteratorEnumerator;"]}