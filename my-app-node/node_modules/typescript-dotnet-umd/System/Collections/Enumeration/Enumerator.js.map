{"version":3,"sources":["System/Collections/Enumeration/Enumerator.js","System/Collections/Enumeration/Enumerator.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","throwIfEndless","isEndless","UnsupportedEnumerableException_1","UnsupportedEnumerableException","ENDLESS_EXCEPTION_MESSAGE","initArrayFrom","source","max","Infinity","Types_1","Type","isArrayLike","len","Math","min","length","isFinite","Array","result","from","EmptyEnumerator_1","EmptyEnumerator","ArrayEnumerator_1","ArrayEnumerator","IndexEnumerator_1","IndexEnumerator","pointer","step","isPrimitive","isEnumerable","getEnumerator","isFunction","InfiniteEnumerator_1","InfiniteEnumerator","isEnumerator","isIterator","IteratorEnumerator_1","IteratorEnumerator","instance","hasMemberOfType","FUNCTION","isEnumerableOrArrayLike","forEach","e","action","STRING_EMPTY","i","moveNext","current","dispose_1","using","f","r","next","done","value","toArray","slice","map","selector","Object","defineProperty"],"mappings":"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","file":"Enumerator.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../Disposable/dispose\", \"../../Types\", \"./ArrayEnumerator\", \"./IndexEnumerator\", \"./UnsupportedEnumerableException\", \"./InfiniteEnumerator\", \"./EmptyEnumerator\", \"./IteratorEnumerator\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var dispose_1 = require(\"../../Disposable/dispose\");\n    var Types_1 = require(\"../../Types\");\n    var ArrayEnumerator_1 = require(\"./ArrayEnumerator\");\n    var IndexEnumerator_1 = require(\"./IndexEnumerator\");\n    var UnsupportedEnumerableException_1 = require(\"./UnsupportedEnumerableException\");\n    var InfiniteEnumerator_1 = require(\"./InfiniteEnumerator\");\n    var EmptyEnumerator_1 = require(\"./EmptyEnumerator\");\n    var IteratorEnumerator_1 = require(\"./IteratorEnumerator\");\n    var STRING_EMPTY = \"\", ENDLESS_EXCEPTION_MESSAGE = 'Cannot call forEach on an endless enumerable. ' +\n        'Would result in an infinite loop that could hang the current process.';\n    function throwIfEndless(isEndless) {\n        if (isEndless)\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\n        return true;\n    }\n    exports.throwIfEndless = throwIfEndless;\n    function initArrayFrom(source, max) {\n        if (max === void 0) { max = Infinity; }\n        if (Types_1.Type.isArrayLike(source)) {\n            var len = Math.min(source.length, max);\n            if (isFinite(len)) {\n                if (len > 65535)\n                    return new Array(len);\n                var result = [];\n                result.length = len;\n                return result;\n            }\n        }\n        return [];\n    }\n    // Could be array, or IEnumerable...\n    /**\n     * Returns the enumerator for the specified collection, enumerator, or iterator.\n     * If the source is identified as IEnumerator it will return the source as is.\n     * @param source\n     * @returns {any}\n     */\n    function from(source) {\n        // To simplify and prevent null reference exceptions:\n        if (!source)\n            return EmptyEnumerator_1.EmptyEnumerator;\n        if ((source) instanceof (Array))\n            return new ArrayEnumerator_1.ArrayEnumerator(source);\n        if (Types_1.Type.isArrayLike(source)) {\n            return new IndexEnumerator_1.IndexEnumerator(function () {\n                return {\n                    source: source,\n                    length: source.length,\n                    pointer: 0,\n                    step: 1\n                };\n            });\n        }\n        if (!Types_1.Type.isPrimitive(source)) {\n            if (isEnumerable(source))\n                return source.getEnumerator();\n            if (Types_1.Type.isFunction(source))\n                return new InfiniteEnumerator_1.InfiniteEnumerator(source);\n            if (isEnumerator(source))\n                return source;\n            if (isIterator(source))\n                return new IteratorEnumerator_1.IteratorEnumerator(source);\n        }\n        throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n    }\n    exports.from = from;\n    function isEnumerable(instance) {\n        return Types_1.Type.hasMemberOfType(instance, \"getEnumerator\", Types_1.Type.FUNCTION);\n    }\n    exports.isEnumerable = isEnumerable;\n    function isEnumerableOrArrayLike(instance) {\n        return Types_1.Type.isArrayLike(instance) || isEnumerable(instance);\n    }\n    exports.isEnumerableOrArrayLike = isEnumerableOrArrayLike;\n    function isEnumerator(instance) {\n        return Types_1.Type.hasMemberOfType(instance, \"moveNext\", Types_1.Type.FUNCTION);\n    }\n    exports.isEnumerator = isEnumerator;\n    function isIterator(instance) {\n        return Types_1.Type.hasMemberOfType(instance, \"next\", Types_1.Type.FUNCTION);\n    }\n    exports.isIterator = isIterator;\n    function forEach(e, action, max) {\n        if (max === void 0) { max = Infinity; }\n        if (e === STRING_EMPTY)\n            return 0;\n        if (e && max > 0) {\n            if (Types_1.Type.isArrayLike(e)) {\n                // Assume e.length is constant or at least doesn't deviate to infinite or NaN.\n                throwIfEndless(!isFinite(max) && !isFinite(e.length));\n                var i = 0;\n                for (; i < Math.min(e.length, max); i++) {\n                    if (action(e[i], i) === false)\n                        break;\n                }\n                return i;\n            }\n            if (isEnumerator(e)) {\n                throwIfEndless(!isFinite(max) && e.isEndless);\n                var i = 0;\n                // Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\n                while (max > i && e.moveNext()) {\n                    if (action(e.current, i++) === false)\n                        break;\n                }\n                return i;\n            }\n            if (isEnumerable(e)) {\n                throwIfEndless(!isFinite(max) && e.isEndless);\n                // For enumerators that aren't EnumerableBase, ensure dispose is called.\n                return dispose_1.using(e.getEnumerator(), function (f) { return forEach(f, action, max); });\n            }\n            if (isIterator(e)) {\n                // For our purpose iterators are endless and a max must be specified before iterating.\n                throwIfEndless(!isFinite(max));\n                var i = 0, r = void 0;\n                // Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\n                while (max > i && !(r = e.next()).done) {\n                    if (action(r.value, i++) === false)\n                        break;\n                }\n                return i;\n            }\n        }\n        return -1;\n    }\n    exports.forEach = forEach;\n    /**\n     * Converts any enumerable to an array.\n     * @param source\n     * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\n     * @returns {any}\n     */\n    function toArray(source, max) {\n        if (max === void 0) { max = Infinity; }\n        if (source === STRING_EMPTY)\n            return [];\n        if (!isFinite(max) && (source) instanceof (Array))\n            return source.slice();\n        var result = initArrayFrom(source, max);\n        if (-1 === forEach(source, function (e, i) { result[i] = e; }, max))\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n        return result;\n    }\n    exports.toArray = toArray;\n    /**\n     * Converts any enumerable to an array of selected values.\n     * @param source\n     * @param selector\n     * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\n     * @returns {TResult[]}\n     */\n    function map(source, selector, max) {\n        if (max === void 0) { max = Infinity; }\n        if (source === STRING_EMPTY)\n            return [];\n        if (!isFinite(max) && (source) instanceof (Array))\n            return source.map(selector);\n        var result = initArrayFrom(source, max);\n        if (-1 === forEach(source, function (e, i) { result[i] = selector(e, i); }, max))\n            throw new UnsupportedEnumerableException_1.UnsupportedEnumerableException();\n        return result;\n    }\n    exports.map = map;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {using} from \"../../Disposable/dispose\";\r\nimport {Type} from \"../../Types\";\r\nimport {ArrayEnumerator} from \"./ArrayEnumerator\";\r\nimport {IndexEnumerator} from \"./IndexEnumerator\";\r\nimport {UnsupportedEnumerableException} from \"./UnsupportedEnumerableException\";\r\nimport {ActionWithIndex, PredicateWithIndex, SelectorWithIndex} from \"../../FunctionTypes\";\r\nimport {IEnumerator} from \"./IEnumerator\";\r\nimport {IEnumerable} from \"./IEnumerable\";\r\nimport {IEnumerableOrArray} from \"../IEnumerableOrArray\";\r\nimport {InfiniteEnumerator, InfiniteValueFactory} from \"./InfiniteEnumerator\";\r\nimport {EmptyEnumerator as Empty} from \"./EmptyEnumerator\";\r\nimport {IIterator, IIteratorResult} from \"./IIterator\";\r\nimport {IteratorEnumerator} from \"./IteratorEnumerator\";\r\nimport {ForEachEnumerable} from \"./ForEachEnumerable\";\r\n\r\n\r\nconst\r\n\tSTRING_EMPTY:string       = \"\",\r\n\tENDLESS_EXCEPTION_MESSAGE =\r\n\t\t'Cannot call forEach on an endless enumerable. ' +\r\n\t\t'Would result in an infinite loop that could hang the current process.';\r\n\r\nexport function throwIfEndless(isEndless:false):true\r\nexport function throwIfEndless(isEndless:true):never\r\nexport function throwIfEndless(isEndless:boolean|undefined):true|never\r\nexport function throwIfEndless(isEndless:boolean|undefined):true|never\r\n{\r\n\tif(isEndless)\r\n\t\tthrow new UnsupportedEnumerableException(ENDLESS_EXCEPTION_MESSAGE);\r\n\treturn true;\r\n}\r\n\r\nfunction initArrayFrom(\r\n\tsource:ForEachEnumerable<any>,\r\n\tmax:number = Infinity):any[]\r\n{\r\n\tif(Type.isArrayLike(source))\r\n\t{\r\n\t\tconst len = Math.min(source.length, max);\r\n\t\tif(isFinite(len))\r\n\t\t{\r\n\t\t\tif(len>65535) return new Array(len);\r\n\t\t\tconst result:any[] = [];\r\n\t\t\tresult.length = len;\r\n\t\t\treturn result;\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n}\r\n\r\n\r\n// Could be array, or IEnumerable...\r\n\r\n/**\r\n * Returns the enumerator for the specified collection, enumerator, or iterator.\r\n * If the source is identified as IEnumerator it will return the source as is.\r\n * @param source\r\n * @returns {any}\r\n */\r\nexport function from<T>(source:ForEachEnumerable<T>|InfiniteValueFactory<T>):IEnumerator<T>\r\n{\r\n\t// To simplify and prevent null reference exceptions:\r\n\tif(!source)\r\n\t\treturn Empty;\r\n\r\n\tif((source)instanceof(Array))\r\n\t\treturn new ArrayEnumerator<T>(<T[]>source);\r\n\r\n\tif(Type.isArrayLike<T>(source))\r\n\t{\r\n\t\treturn new IndexEnumerator<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsource: source,\r\n\t\t\t\t\tlength: source.length,\r\n\t\t\t\t\tpointer: 0,\r\n\t\t\t\t\tstep: 1\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tif(!Type.isPrimitive(source))\r\n\t{\r\n\t\tif(isEnumerable<T>(source))\r\n\t\t\treturn source.getEnumerator();\r\n\r\n\t\tif(Type.isFunction(source))\r\n\t\t\treturn new InfiniteEnumerator(source);\r\n\r\n\t\tif(isEnumerator<T>(source))\r\n\t\t\treturn source;\r\n\r\n\t\tif(isIterator<T>(source))\r\n\t\t\treturn new IteratorEnumerator<T>(source);\r\n\r\n\t}\r\n\r\n\tthrow new UnsupportedEnumerableException();\r\n}\r\n\r\nexport function isEnumerable<T>(instance:any):instance is IEnumerable<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerable<T>>(instance, \"getEnumerator\", Type.FUNCTION);\r\n}\r\n\r\nexport function isEnumerableOrArrayLike<T>(instance:any):instance is IEnumerableOrArray<T>\r\n{\r\n\treturn Type.isArrayLike(instance) || isEnumerable(instance);\r\n}\r\n\r\nexport function isEnumerator<T>(instance:any):instance is IEnumerator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IEnumerator<T>>(instance, \"moveNext\", Type.FUNCTION);\r\n}\r\n\r\nexport function isIterator<T>(instance:any):instance is IIterator<T>\r\n{\r\n\treturn Type.hasMemberOfType<IIterator<T>>(instance, \"next\", Type.FUNCTION);\r\n}\r\n\r\n/**\r\n * Flexible method for iterating any enumerable, enumerable, iterator, array, or array-like object.\r\n * @param e The enumeration to loop on.\r\n * @param action The action to take on each.\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns the total times iterated.  If the enumerable is unrecognized then -1.\r\n */\r\n\r\nexport function forEach<T>(\r\n\te:ForEachEnumerable<T>,\r\n\taction:ActionWithIndex<T>,\r\n\tmax?:number):number\r\n\r\nexport function forEach<T>(\r\n\te:ForEachEnumerable<T>,\r\n\taction:PredicateWithIndex<T>,\r\n\tmax?:number):number\r\n\r\nexport function forEach<T>(\r\n\te:ForEachEnumerable<T>,\r\n\taction:ActionWithIndex<T> | PredicateWithIndex<T>,\r\n\tmax:number = Infinity):number\r\n{\r\n\tif(<any>e===STRING_EMPTY) return 0;\r\n\r\n\tif(e && max>0)\r\n\t{\r\n\t\tif(Type.isArrayLike<T>(e))\r\n\t\t{\r\n\t\t\t// Assume e.length is constant or at least doesn't deviate to infinite or NaN.\r\n\t\t\tthrowIfEndless(!isFinite(max) && !isFinite(e.length));\r\n\t\t\tlet i = 0;\r\n\t\t\tfor(; i<Math.min(e.length, max); i++)\r\n\t\t\t{\r\n\t\t\t\tif(action(e[i], i)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\r\n\r\n\t\tif(isEnumerator<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(!isFinite(max) && e.isEndless);\r\n\r\n\t\t\tlet i = 0;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(max>i && e.moveNext())\r\n\t\t\t{\r\n\t\t\t\tif(action(<any>e.current, i++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\r\n\t\tif(isEnumerable<T>(e))\r\n\t\t{\r\n\t\t\tthrowIfEndless(!isFinite(max) && e.isEndless);\r\n\r\n\t\t\t// For enumerators that aren't EnumerableBase, ensure dispose is called.\r\n\t\t\treturn using(\r\n\t\t\t\t(<IEnumerable<T>>e).getEnumerator(),\r\n\t\t\t\tf=>forEach(f, action, max)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\tif(isIterator<T>(e))\r\n\t\t{\r\n\t\t\t// For our purpose iterators are endless and a max must be specified before iterating.\r\n\t\t\tthrowIfEndless(!isFinite(max));\r\n\r\n\t\t\tlet i = 0, r:IIteratorResult<T>;\r\n\t\t\t// Return value of action can be anything, but if it is (===) false then the forEach will discontinue.\r\n\t\t\twhile(max>i && !(r = e.next()).done)\r\n\t\t\t{\r\n\t\t\t\tif(action(<any>r.value, i++)===false)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\r\n\treturn -1;\r\n\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array.\r\n * @param source\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns {any}\r\n */\r\nexport function toArray<T>(\r\n\tsource:ForEachEnumerable<T>,\r\n\tmax:number = Infinity):T[]\r\n{\r\n\tif(<any>source===STRING_EMPTY) return [];\r\n\r\n\tif(!isFinite(max) && (source)instanceof(Array))\r\n\t\treturn source.slice();\r\n\r\n\tconst result:T[] = initArrayFrom(source, max);\r\n\tif(-1===forEach(source, (e, i) => { result[i] = e; }, max))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}\r\n\r\n/**\r\n * Converts any enumerable to an array of selected values.\r\n * @param source\r\n * @param selector\r\n * @param max Stops after max is reached.  Allows for forEach to be called on infinite enumerations.\r\n * @returns {TResult[]}\r\n */\r\n\r\nexport function map<T,TResult>(\r\n\tsource:ForEachEnumerable<T>,\r\n\tselector:SelectorWithIndex<T,TResult>,\r\n\tmax:number = Infinity):TResult[]\r\n{\r\n\tif(<any>source===STRING_EMPTY) return [];\r\n\r\n\tif(!isFinite(max) && (source)instanceof(Array))\r\n\t\treturn source.map(selector);\r\n\r\n\tconst result:TResult[] = initArrayFrom(source, max);\r\n\tif(-1===forEach(source, (e, i) => { result[i] = selector(e, i); }, max))\r\n\t\tthrow new UnsupportedEnumerableException();\r\n\r\n\treturn result;\r\n}"]}