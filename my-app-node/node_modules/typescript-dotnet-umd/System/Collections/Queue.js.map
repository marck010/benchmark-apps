{"version":3,"sources":["System/Collections/Queue.js","System/Collections/Queue.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","assertZeroOrGreater","value","property","ArgumentOutOfRangeException_1","ArgumentOutOfRangeException","assertIntegerZeroOrGreater","Integer_1","Integer","assert","Object","defineProperty","Compare_1","AU","Types_1","EnumeratorBase_1","NotImplementedException_1","InvalidOperationException_1","CollectionBase_1","extends_1","__extends","VOID0","MINIMUM_GROW","SHRINK_THRESHOLD","GROW_FACTOR_HALF","DEFAULT_CAPACITY","emptyArray","freeze","Queue","_super","source","equalityComparer","areEqual","_this","call","this","_","_head","_tail","_size","Type","isNumber","capacity","_array","initialize","se","isArrayLike","length","_importEntries","_capacity","prototype","getCount","_addInternal","item","size","len","newCapacity","setCapacity","tail","_removeInternal","max","NotImplementedException","_clearInternal","array","head","clear","trimExcess","_onDispose","dump","Infinity","result","isFinite","_tryDequeueInternal","push","_signalModification","forEach","action","throwIfDisposed","_version","newArray","copyTo","enqueue","add","out","removed","_incrementModified","dequeue","throwIfEmpty","assertModifiable","tryDequeue","InvalidOperationException","_getElement","index","peek","threshold","Math","floor","isNaN","getEnumerator","version","EnumeratorBase","yielder","assertVersion","yieldBreak","yieldReturn","CollectionBase"],"mappings":"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","file":"Queue.js","sourcesContent":["/*!\n* @author electricessence / https://github.com/electricessence/\n* Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\n* Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n*/\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Compare\", \"./Array/Utility\", \"../Types\", \"../Integer\", \"./Enumeration/EnumeratorBase\", \"../Exceptions/NotImplementedException\", \"../Exceptions/InvalidOperationException\", \"../Exceptions/ArgumentOutOfRangeException\", \"./CollectionBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Compare_1 = require(\"../Compare\");\n    var AU = require(\"./Array/Utility\");\n    var Types_1 = require(\"../Types\");\n    var Integer_1 = require(\"../Integer\");\n    var EnumeratorBase_1 = require(\"./Enumeration/EnumeratorBase\");\n    var NotImplementedException_1 = require(\"../Exceptions/NotImplementedException\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var ArgumentOutOfRangeException_1 = require(\"../Exceptions/ArgumentOutOfRangeException\");\n    var CollectionBase_1 = require(\"./CollectionBase\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var MINIMUM_GROW = 4;\n    var SHRINK_THRESHOLD = 32; // Unused?\n    // var GROW_FACTOR: number = 200;  // double each time\n    var GROW_FACTOR_HALF = 100;\n    var DEFAULT_CAPACITY = MINIMUM_GROW;\n    var emptyArray = Object.freeze([]);\n    var Queue = /** @class */ (function (_super) {\n        __extends(Queue, _super);\n        function Queue(source, equalityComparer) {\n            if (equalityComparer === void 0) { equalityComparer = Compare_1.areEqual; }\n            var _this = _super.call(this, VOID0, equalityComparer) || this;\n            var _ = _this;\n            _._head = 0;\n            _._tail = 0;\n            _._size = 0;\n            if (!source)\n                _._array = emptyArray;\n            else {\n                if (Types_1.Type.isNumber(source)) {\n                    var capacity = source;\n                    assertIntegerZeroOrGreater(capacity, \"capacity\");\n                    _._array = capacity\n                        ? AU.initialize(capacity)\n                        : emptyArray;\n                }\n                else {\n                    var se = source;\n                    _._array = AU.initialize(Types_1.Type.isArrayLike(se)\n                        ? se.length\n                        : DEFAULT_CAPACITY);\n                    _._importEntries(se);\n                }\n            }\n            _._capacity = _._array.length;\n            return _this;\n        }\n        Queue.prototype.getCount = function () {\n            return this._size;\n        };\n        Queue.prototype._addInternal = function (item) {\n            var _ = this;\n            var size = _._size;\n            var len = _._capacity;\n            if (size == len) {\n                var newCapacity = len * GROW_FACTOR_HALF;\n                if (newCapacity < len + MINIMUM_GROW)\n                    newCapacity = len + MINIMUM_GROW;\n                _.setCapacity(newCapacity);\n                len = _._capacity;\n            }\n            var tail = _._tail;\n            _._array[tail] = item;\n            _._tail = (tail + 1) % len;\n            _._size = size + 1;\n            return true;\n        };\n        //noinspection JSUnusedLocalSymbols\n        Queue.prototype._removeInternal = function (item, max) {\n            //noinspection HtmlUnknownTag\n            throw new NotImplementedException_1.NotImplementedException(\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\n                \" since it would require destroying the underlying array to remove the item.\");\n        };\n        Queue.prototype._clearInternal = function () {\n            var _ = this;\n            var array = _._array, head = _._head, tail = _._tail, size = _._size;\n            if (head < tail)\n                AU.clear(array, head, tail);\n            else {\n                AU.clear(array, head);\n                AU.clear(array, 0, tail);\n            }\n            _._head = 0;\n            _._tail = 0;\n            _._size = 0;\n            _.trimExcess();\n            return size;\n        };\n        Queue.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var _ = this;\n            if (_._array != emptyArray) {\n                _._array.length = _._capacity = 0;\n                _._array = emptyArray;\n            }\n        };\n        /**\n         * Dequeues entries into an array.\n         */\n        Queue.prototype.dump = function (max) {\n            if (max === void 0) { max = Infinity; }\n            var _ = this;\n            var result = [];\n            if (isFinite(max)) {\n                Integer_1.Integer.assertZeroOrGreater(max);\n                if (max !== 0) {\n                    while (max-- && _._tryDequeueInternal(function (value) {\n                        result.push(value);\n                    })) { }\n                }\n            }\n            else {\n                while (_._tryDequeueInternal(function (value) {\n                    result.push(value);\n                })) { }\n            }\n            _.trimExcess();\n            _._signalModification();\n            return result;\n        };\n        Queue.prototype.forEach = function (action) {\n            return _super.prototype.forEach.call(this, action, true);\n        };\n        Queue.prototype.setCapacity = function (capacity) {\n            var _ = this;\n            assertIntegerZeroOrGreater(capacity, \"capacity\");\n            var array = _._array, len = _._capacity;\n            if (capacity > len)\n                _.throwIfDisposed();\n            if (capacity == len)\n                return this;\n            var head = _._head, tail = _._tail, size = _._size;\n            // Special case where we can simply extend the length of the array. (JavaScript only)\n            if (array != emptyArray && capacity > len && head < tail) {\n                array.length = _._capacity = capacity;\n                _._version++;\n                return this;\n            }\n            // We create a new array because modifying an existing one could be slow.\n            var newArray = AU.initialize(capacity);\n            if (size > 0) {\n                if (head < tail) {\n                    AU.copyTo(array, newArray, head, 0, size);\n                }\n                else {\n                    AU.copyTo(array, newArray, head, 0, len - head);\n                    AU.copyTo(array, newArray, 0, len - head, tail);\n                }\n            }\n            _._array = newArray;\n            _._capacity = capacity;\n            _._head = 0;\n            _._tail = (size == capacity) ? 0 : size;\n            _._signalModification(true);\n            return this;\n        };\n        Queue.prototype.enqueue = function (item) {\n            return this.add(item);\n        };\n        Queue.prototype._tryDequeueInternal = function (out) {\n            var _ = this;\n            if (!_._size)\n                return false;\n            var array = _._array, head = _._head;\n            var removed = _._array[head];\n            array[head] = null;\n            _._head = (head + 1) % _._capacity;\n            _._size--;\n            _._incrementModified();\n            out(removed);\n            return true;\n        };\n        Queue.prototype.dequeue = function (throwIfEmpty) {\n            if (throwIfEmpty === void 0) { throwIfEmpty = false; }\n            var _ = this;\n            _.assertModifiable();\n            var result = VOID0;\n            if (!this.tryDequeue(function (value) { result = value; }) && throwIfEmpty)\n                throw new InvalidOperationException_1.InvalidOperationException(\"Cannot dequeue an empty queue.\");\n            return result;\n        };\n        /**\n         * Checks to see if the queue has entries an pulls an entry from the head of the queue and passes it to the out handler.\n         * @param out The 'out' handler that receives the value if it exists.\n         * @returns {boolean} True if a value was retrieved.  False if not.\n         */\n        Queue.prototype.tryDequeue = function (out) {\n            var _ = this;\n            if (!_._size)\n                return false;\n            _.assertModifiable();\n            // A single dequeue shouldn't need update recursion tracking...\n            if (this._tryDequeueInternal(out)) {\n                // This may preemptively trigger the _onModified.\n                if (_._size < _._capacity / 2)\n                    _.trimExcess(SHRINK_THRESHOLD);\n                _._signalModification();\n                return true;\n            }\n            return false;\n        };\n        Queue.prototype._getElement = function (index) {\n            assertIntegerZeroOrGreater(index, \"index\");\n            var _ = this;\n            return _._array[(_._head + index) % _._capacity];\n        };\n        Queue.prototype.peek = function (throwIfEmpty) {\n            if (throwIfEmpty === void 0) { throwIfEmpty = false; }\n            if (this._size == 0) {\n                if (throwIfEmpty)\n                    throw new InvalidOperationException_1.InvalidOperationException(\"Cannot call peek on an empty queue.\");\n                return VOID0;\n            }\n            return this._array[this._head];\n        };\n        Queue.prototype.trimExcess = function (threshold) {\n            var _ = this;\n            var size = _._size;\n            if (size < Math.floor(_._capacity * 0.9) && (!threshold && threshold !== 0 || isNaN(threshold) || threshold < size))\n                _.setCapacity(size);\n        };\n        Queue.prototype.getEnumerator = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var index, version, size;\n            return new EnumeratorBase_1.EnumeratorBase(function () {\n                version = _._version;\n                size = _._size;\n                index = 0;\n            }, function (yielder) {\n                _.throwIfDisposed();\n                _.assertVersion(version);\n                if (index == size)\n                    return yielder.yieldBreak();\n                return yielder.yieldReturn(_._getElement(index++));\n            });\n        };\n        return Queue;\n    }(CollectionBase_1.CollectionBase));\n    exports.Queue = Queue;\n    function assertZeroOrGreater(value, property) {\n        if (value < 0)\n            throw new ArgumentOutOfRangeException_1.ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\n        return true;\n    }\n    function assertIntegerZeroOrGreater(value, property) {\n        Integer_1.Integer.assert(value, property);\n        return assertZeroOrGreater(value, property);\n    }\n    exports.default = Queue;\n});\n","﻿/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based Upon: http://referencesource.microsoft.com/#System/CompMod/system/collections/generic/queue.cs\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual} from \"../Compare\";\r\nimport * as AU from \"./Array/Utility\";\r\nimport {Type} from \"../Types\";\r\nimport {Integer} from \"../Integer\";\r\nimport {EnumeratorBase} from \"./Enumeration/EnumeratorBase\";\r\nimport {NotImplementedException} from \"../Exceptions/NotImplementedException\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ArgumentOutOfRangeException} from \"../Exceptions/ArgumentOutOfRangeException\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {Action, ActionWithIndex, EqualityComparison, PredicateWithIndex} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\nconst MINIMUM_GROW:number = 4;\r\nconst SHRINK_THRESHOLD:number = 32; // Unused?\r\n// var GROW_FACTOR: number = 200;  // double each time\r\nconst GROW_FACTOR_HALF:number = 100;\r\nconst DEFAULT_CAPACITY:number = MINIMUM_GROW;\r\nconst emptyArray:any = Object.freeze([]);\r\n\r\nexport class Queue<T>\r\nextends CollectionBase<T>\r\n{\r\n\r\n\tprivate _array:T[];\r\n\tprivate _head:number;       // First valid element in the queue\r\n\tprivate _tail:number;       // Last valid element in the queue\r\n\tprivate _size:number;       // Number of elements.\r\n\tprivate _capacity:number;   // Maps to _array.length;\r\n\r\n\tconstructor(\r\n\t\tsource?:IEnumerableOrArray<T> | number,\r\n\t\tequalityComparer:EqualityComparison<T> = areEqual)\r\n\t{\r\n\t\tsuper(VOID0, equalityComparer);\r\n\t\tconst _ = this;\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\tif(!source)\r\n\t\t\t_._array = emptyArray;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(Type.isNumber(source))\r\n\t\t\t{\r\n\t\t\t\tconst capacity = <number>source;\r\n\t\t\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\t\t\t_._array = capacity\r\n\t\t\t\t\t? AU.initialize<T>(capacity)\r\n\t\t\t\t\t: emptyArray;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tconst se = <IEnumerableOrArray<T>> source;\r\n\t\t\t\t_._array = AU.initialize<T>(\r\n\t\t\t\t\tType.isArrayLike(se)\r\n\t\t\t\t\t\t? se.length\r\n\t\t\t\t\t\t: DEFAULT_CAPACITY\r\n\t\t\t\t);\r\n\r\n\t\t\t\t_._importEntries(se);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._capacity = _._array.length;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._size;\r\n\t}\r\n\r\n\tprotected _addInternal(item:T):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst size = _._size;\r\n\t\tlet len = _._capacity;\r\n\t\tif(size==len)\r\n\t\t{\r\n\t\t\tlet newCapacity = len*GROW_FACTOR_HALF;\r\n\t\t\tif(newCapacity<len + MINIMUM_GROW)\r\n\t\t\t\tnewCapacity = len + MINIMUM_GROW;\r\n\r\n\t\t\t_.setCapacity(newCapacity);\r\n\t\t\tlen = _._capacity;\r\n\t\t}\r\n\r\n\t\tconst tail = _._tail;\r\n\t\t_._array[tail] = item;\r\n\t\t_._tail = (tail + 1)%len;\r\n\t\t_._size = size + 1;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t//noinspection JSUnusedLocalSymbols\r\n\tprotected _removeInternal(item:T, max?:number):number\r\n\t{\r\n\t\t//noinspection HtmlUnknownTag\r\n\t\tthrow new NotImplementedException(\r\n\t\t\t\"ICollection\\<T\\>.remove is not implemented in Queue\\<T\\>\" +\r\n\t\t\t\" since it would require destroying the underlying array to remove the item.\"\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst array = _._array, head = _._head, tail = _._tail, size = _._size;\r\n\t\tif(head<tail)\r\n\t\t\tAU.clear(array, head, tail);\r\n\t\telse\r\n\t\t{\r\n\t\t\tAU.clear(array, head);\r\n\t\t\tAU.clear(array, 0, tail);\r\n\t\t}\r\n\r\n\t\t_._head = 0;\r\n\t\t_._tail = 0;\r\n\t\t_._size = 0;\r\n\r\n\t\t_.trimExcess();\r\n\r\n\t\treturn size;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst _ = this;\r\n\t\tif(_._array!=emptyArray)\r\n\t\t{\r\n\t\t\t_._array.length = _._capacity = 0;\r\n\t\t\t_._array = emptyArray;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Dequeues entries into an array.\r\n\t */\r\n\tdump(max:number = Infinity):T[]\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst result:T[] = [];\r\n\r\n\t\tif(isFinite(max))\r\n\t\t{\r\n\t\t\tInteger.assertZeroOrGreater(max);\r\n\t\t\tif(max!==0)\r\n\t\t\t{\r\n\t\t\t\twhile(max-- && _._tryDequeueInternal(value=>{\r\n\t\t\t\t\tresult.push(value);\r\n\t\t\t\t})) {}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\twhile( _._tryDequeueInternal(value=>{\r\n\t\t\t\tresult.push(value);\r\n\t\t\t})) { }\r\n\t\t}\r\n\r\n\t\t_.trimExcess();\r\n\t\t_._signalModification();\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tforEach(action:ActionWithIndex<T>):number\r\n\tforEach(action:PredicateWithIndex<T>):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>):number\r\n\t{\r\n\t\treturn super.forEach(action, true);\r\n\t}\r\n\r\n\tsetCapacity(capacity:number):this\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tassertIntegerZeroOrGreater(capacity, \"capacity\");\r\n\r\n\t\tconst array = _._array, len = _._capacity;\r\n\t\tif(capacity>len) _.throwIfDisposed();\r\n\t\tif(capacity==len)\r\n\t\t\treturn this;\r\n\r\n\t\tconst head = _._head, tail = _._tail, size = _._size;\r\n\r\n\t\t// Special case where we can simply extend the length of the array. (JavaScript only)\r\n\t\tif(array!=emptyArray && capacity>len && head<tail)\r\n\t\t{\r\n\t\t\tarray.length = _._capacity = capacity;\r\n\t\t\t_._version++;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n\t\t// We create a new array because modifying an existing one could be slow.\r\n\t\tconst newArray:T[] = AU.initialize<T>(capacity);\r\n\t\tif(size>0)\r\n\t\t{\r\n\t\t\tif(head<tail)\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, size);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tAU.copyTo(array, newArray, head, 0, len - head);\r\n\t\t\t\tAU.copyTo(array, newArray, 0, len - head, tail);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t_._array = newArray;\r\n\t\t_._capacity = capacity;\r\n\t\t_._head = 0;\r\n\t\t_._tail = (size==capacity) ? 0 : size;\r\n\r\n\t\t_._signalModification(true);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tenqueue(item:T):this\r\n\t{\r\n\t\treturn this.add(item);\r\n\t}\r\n\r\n\tprotected _tryDequeueInternal(out:Action<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!_._size) return false;\r\n\r\n\t\tconst array = _._array, head = _._head;\r\n\r\n\t\tconst removed = _._array[head];\r\n\t\tarray[head] = <any>null;\r\n\t\t_._head = (head + 1)%_._capacity;\r\n\r\n\t\t_._size--;\r\n\r\n\t\t_._incrementModified();\r\n\r\n\t\tout(removed);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Pulls an entry from the head of the queue and returns it.\r\n\t * Returns undefined if the queue is already empty.\r\n\t */\r\n\tdequeue():T|undefined\r\n\r\n\t/**\r\n\t * Pulls an entry from the head of the queue and returns it.\r\n\t * Returns undefined if the queue is already empty and throwIfEmpty is false.\r\n\t * Throws an InvalidOperationException if the queue is already empty and throwIfEmpty is true.\r\n\t * @param throwIfEmpty\r\n\t */\r\n\tdequeue(throwIfEmpty:true):T\r\n\r\n\t/**\r\n\t * Pulls an entry from the head of the queue and returns it.\r\n\t * Returns undefined if the queue is already empty and throwIfEmpty is false.\r\n\t * Throws an InvalidOperationException if the queue is already empty and throwIfEmpty is true.\r\n\t * @param throwIfEmpty\r\n\t */\r\n\tdequeue(throwIfEmpty:boolean):T|undefined\r\n\tdequeue(throwIfEmpty:boolean = false):T|undefined\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.assertModifiable();\r\n\r\n\t\tlet result:T|undefined = VOID0;\r\n\t\tif(!this.tryDequeue( value => { result = value; }) && throwIfEmpty)\r\n\t\t\tthrow new InvalidOperationException(\"Cannot dequeue an empty queue.\");\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks to see if the queue has entries an pulls an entry from the head of the queue and passes it to the out handler.\r\n\t * @param out The 'out' handler that receives the value if it exists.\r\n\t * @returns {boolean} True if a value was retrieved.  False if not.\r\n\t */\r\n\ttryDequeue(out:Action<T>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!_._size) return false;\r\n\t\t_.assertModifiable();\r\n\r\n\t\t// A single dequeue shouldn't need update recursion tracking...\r\n\t\tif(this._tryDequeueInternal(out)) {\r\n\t\t\t// This may preemptively trigger the _onModified.\r\n\t\t\tif(_._size<_._capacity/2)\r\n\t\t\t\t_.trimExcess(SHRINK_THRESHOLD);\r\n\r\n\t\t\t_._signalModification();\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate _getElement(index:number):T\r\n\t{\r\n\t\tassertIntegerZeroOrGreater(index, \"index\");\r\n\r\n\t\tconst _ = this;\r\n\t\treturn _._array[(_._head + index)%_._capacity];\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the entry at the head of the queue.\r\n\t * Returns undefined if the queue is already empty.\r\n\t */\r\n\tpeek():T|undefined\r\n\r\n\t/**\r\n\t * Returns the entry at the head of the queue.\r\n\t * Returns undefined if the queue is already empty and throwIfEmpty is false.\r\n\t * Throws an InvalidOperationException if the queue is already empty and throwIfEmpty is true.\r\n\t * @param throwIfEmpty\r\n\t */\r\n\tpeek(throwIfEmpty:true):T\r\n\r\n\t/**\r\n\t * Returns the entry at the head of the queue.\r\n\t * Returns undefined if the queue is already empty and throwIfEmpty is false.\r\n\t * Throws an InvalidOperationException if the queue is already empty and throwIfEmpty is true.\r\n\t * @param throwIfEmpty\r\n\t */\r\n\tpeek(throwIfEmpty:boolean):T|undefined\r\n\tpeek(throwIfEmpty:boolean = false):T|undefined\r\n\t{\r\n\t\tif(this._size==0) {\r\n\t\t\tif(throwIfEmpty)\r\n\t\t\t\tthrow new InvalidOperationException(\"Cannot call peek on an empty queue.\");\r\n\t\t\treturn VOID0;\r\n\t\t}\r\n\r\n\r\n\t\treturn this._array[this._head];\r\n\t}\r\n\r\n\ttrimExcess(threshold?:number):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tconst size = _._size;\r\n\t\tif(size<Math.floor(_._capacity*0.9) && (!threshold && threshold!==0 || isNaN(threshold) || threshold<size))\r\n\t\t\t_.setCapacity(size);\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\r\n\t\tlet index:number, version:number, size:number;\r\n\t\treturn new EnumeratorBase<T>(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tversion = _._version;\r\n\t\t\t\tsize = _._size;\r\n\t\t\t\tindex = 0;\r\n\t\t\t},\r\n\t\t\t(yielder) =>\r\n\t\t\t{\r\n\t\t\t\t_.throwIfDisposed();\r\n\t\t\t\t_.assertVersion(version);\r\n\r\n\t\t\t\tif(index==size)\r\n\t\t\t\t\treturn yielder.yieldBreak();\r\n\r\n\t\t\t\treturn yielder.yieldReturn(_._getElement(index++));\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction assertZeroOrGreater(value:number, property:string):true|never\r\n{\r\n\tif(value<0)\r\n\t\tthrow new ArgumentOutOfRangeException(property, value, \"Must be greater than zero\");\r\n\r\n\treturn true;\r\n}\r\n\r\nfunction assertIntegerZeroOrGreater(value:number, property:string):true|never\r\n{\r\n\tInteger.assert(value, property);\r\n\treturn assertZeroOrGreater(value, property);\r\n}\r\n\r\nexport default Queue;\r\n"]}