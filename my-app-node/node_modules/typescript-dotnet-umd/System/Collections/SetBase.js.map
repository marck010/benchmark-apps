{"version":3,"sources":["System/Collections/SetBase.js","System/Collections/SetBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","LinkedNodeList_1","ArgumentNullException_1","Enumerator_1","EmptyEnumerator_1","dispose_1","Compare_1","CollectionBase_1","extends_1","__extends","VOID0","OTHER","SetBase","_super","source","_this","call","this","areEqual","_importEntries","prototype","_getSet","s","_set","LinkedNodeList","getCount","unsafeCount","exceptWith","other","_","ArgumentNullException","forEach","_removeInternal","_incrementModified","_signalModification","intersectWith","n","contains","using","newUsing","o","isProperSubsetOf","isProperSupersetOf","count","result","isSupersetOf","add","isSubsetOf","overlaps","setEquals","symmetricExceptWith","_addInternal","unionWith","importEntries","_clearInternal","clear","_onDispose","item","_getNode","getEnumerator","throwIfDisposed","valueEnumeratorFrom","EmptyEnumerator","action","useCopy","node","i","_removeNode","remove","removeFirst","first","removeLast","last","CollectionBase"],"mappings":"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","file":"SetBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./LinkedNodeList\", \"../Exceptions/ArgumentNullException\", \"./Enumeration/Enumerator\", \"./Enumeration/EmptyEnumerator\", \"../Disposable/dispose\", \"../Compare\", \"./CollectionBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var LinkedNodeList_1 = require(\"./LinkedNodeList\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var Enumerator_1 = require(\"./Enumeration/Enumerator\");\n    var EmptyEnumerator_1 = require(\"./Enumeration/EmptyEnumerator\");\n    var dispose_1 = require(\"../Disposable/dispose\");\n    var Compare_1 = require(\"../Compare\");\n    var CollectionBase_1 = require(\"./CollectionBase\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var VOID0 = void 0;\n    var OTHER = 'other';\n    var SetBase = /** @class */ (function (_super) {\n        __extends(SetBase, _super);\n        function SetBase(source) {\n            var _this = _super.call(this, VOID0, Compare_1.areEqual) || this;\n            _this._importEntries(source);\n            return _this;\n        }\n        SetBase.prototype._getSet = function () {\n            var s = this._set;\n            if (!s)\n                this._set = s = new LinkedNodeList_1.LinkedNodeList();\n            return s;\n        };\n        SetBase.prototype.getCount = function () {\n            return this._set ? this._set.unsafeCount : 0;\n        };\n        SetBase.prototype.exceptWith = function (other) {\n            var _ = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            Enumerator_1.forEach(other, function (v) {\n                if (_._removeInternal(v))\n                    _._incrementModified();\n            });\n            _._signalModification();\n        };\n        SetBase.prototype.intersectWith = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var _ = this;\n            if (other instanceof SetBase) {\n                var s = _._set;\n                if (s)\n                    s.forEach(function (n) {\n                        if (!other.contains(n.value) && _._removeInternal(n.value))\n                            _._incrementModified();\n                    }, true);\n                _._signalModification();\n            }\n            else {\n                dispose_1.using(_.newUsing(other), function (o) { return _.intersectWith(o); });\n            }\n        };\n        SetBase.prototype.isProperSubsetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return other instanceof SetBase\n                ? other.isProperSupersetOf(this)\n                : dispose_1.using(this.newUsing(other), function (o) { return o.isProperSupersetOf(_this); });\n        };\n        SetBase.prototype.isProperSupersetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = true, count;\n            if (other instanceof SetBase) {\n                result = this.isSupersetOf(other);\n                count = other.getCount();\n            }\n            else {\n                count = dispose_1.using(this.newUsing(), function (o) {\n                    Enumerator_1.forEach(other, function (v) {\n                        o.add(v); // We have to add to another set in order to filter out duplicates.\n                        // contains == false will cause this to exit.\n                        return result = _this.contains(v);\n                    });\n                    return o.getCount();\n                });\n            }\n            return result && this.getCount() > count;\n        };\n        SetBase.prototype.isSubsetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return other instanceof SetBase\n                ? other.isSupersetOf(this)\n                : dispose_1.using(this.newUsing(other), function (o) { return o.isSupersetOf(_this); });\n        };\n        SetBase.prototype.isSupersetOf = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = true;\n            Enumerator_1.forEach(other, function (v) {\n                return result = _this.contains(v);\n            });\n            return result;\n        };\n        SetBase.prototype.overlaps = function (other) {\n            var _this = this;\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var result = false;\n            Enumerator_1.forEach(other, function (v) { return !(result = _this.contains(v)); });\n            return result;\n        };\n        SetBase.prototype.setEquals = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            return this.getCount() == (other instanceof SetBase\n                ? other.getCount()\n                : dispose_1.using(this.newUsing(other), function (o) { return o.getCount(); }))\n                && this.isSubsetOf(other);\n        };\n        SetBase.prototype.symmetricExceptWith = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(OTHER);\n            var _ = this;\n            if (other instanceof SetBase) {\n                Enumerator_1.forEach(other, function (v) {\n                    if (_.contains(v)) {\n                        if (_._removeInternal(v))\n                            _._incrementModified();\n                    }\n                    else {\n                        if (_._addInternal(v))\n                            _._incrementModified();\n                    }\n                });\n                _._signalModification();\n            }\n            else {\n                dispose_1.using(this.newUsing(other), function (o) { return _.symmetricExceptWith(o); });\n            }\n        };\n        SetBase.prototype.unionWith = function (other) {\n            this.importEntries(other);\n        };\n        SetBase.prototype._clearInternal = function () {\n            var s = this._set;\n            return s ? s.clear() : 0;\n        };\n        SetBase.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this._set = null;\n        };\n        SetBase.prototype.contains = function (item) {\n            return !(!this.getCount() || !this._getNode(item));\n        };\n        SetBase.prototype.getEnumerator = function () {\n            var _ = this;\n            _.throwIfDisposed();\n            var s = _._set;\n            return s && _.getCount()\n                ? LinkedNodeList_1.LinkedNodeList.valueEnumeratorFrom(s)\n                : EmptyEnumerator_1.EmptyEnumerator;\n        };\n        SetBase.prototype.forEach = function (action, useCopy) {\n            return useCopy\n                ? _super.prototype.forEach.call(this, action, useCopy)\n                : this._set.forEach(function (node, i) { return action(node.value, i); });\n        };\n        SetBase.prototype._removeNode = function (node) {\n            return !!node\n                && this.remove(node.value) != 0;\n        };\n        SetBase.prototype.removeFirst = function () {\n            var s = this._set;\n            return this._removeNode(s && s.first);\n        };\n        SetBase.prototype.removeLast = function () {\n            var s = this._set;\n            return this._removeNode(s && s.last);\n        };\n        return SetBase;\n    }(CollectionBase_1.CollectionBase));\n    exports.SetBase = SetBase;\n    exports.default = SetBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {LinkedNodeList} from \"./LinkedNodeList\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {forEach} from \"./Enumeration/Enumerator\";\r\nimport {EmptyEnumerator} from \"./Enumeration/EmptyEnumerator\";\r\nimport {using} from \"../Disposable/dispose\";\r\nimport {areEqual} from \"../Compare\";\r\nimport {CollectionBase} from \"./CollectionBase\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {ILinkedNodeWithValue} from \"./ILinkedListNode\";\r\nimport {ActionWithIndex, PredicateWithIndex} from \"../FunctionTypes\";\r\nimport {IEnumerator} from \"./Enumeration/IEnumerator\";\r\nimport {IEnumerableOrArray} from \"./IEnumerableOrArray\";\r\nimport {ISet} from \"./ISet\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst VOID0:undefined = void 0;\r\nconst OTHER = 'other';\r\n\r\nexport abstract class SetBase<T>\r\nextends CollectionBase<T> implements ISet<T>, IDisposable\r\n{\r\n\r\n\tconstructor(source?:IEnumerableOrArray<T>)\r\n\t{\r\n\t\tsuper(VOID0, areEqual);\r\n\t\tthis._importEntries(source);\r\n\t}\r\n\r\n\tprotected abstract newUsing(source?:IEnumerableOrArray<T>):SetBase<T>;\r\n\r\n\tprotected _set:LinkedNodeList<ILinkedNodeWithValue<T>>;\r\n\r\n\tprotected _getSet():LinkedNodeList<ILinkedNodeWithValue<T>>\r\n\t{\r\n\t\tlet s = this._set;\r\n\t\tif(!s) this._set = s = new LinkedNodeList<ILinkedNodeWithValue<T>>();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tprotected getCount():number\r\n\t{\r\n\t\treturn this._set ? this._set.unsafeCount : 0;\r\n\t}\r\n\r\n\texceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t_._incrementModified();\r\n\t\t});\r\n\r\n\t\t_._signalModification();\r\n\t}\r\n\r\n\tintersectWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tconst _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tlet s = _._set;\r\n\t\t\tif(s) s.forEach(n=>\r\n\t\t\t{\r\n\t\t\t\tif(!other.contains(n.value) && _._removeInternal(<any>n.value))\r\n\t\t\t\t\t_._incrementModified();\r\n\t\t\t},true);\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(_.newUsing(other), o=>_.intersectWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tisProperSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isProperSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isProperSupersetOf(this));\r\n\t}\r\n\r\n\tisProperSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = true, count:number;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tresult = this.isSupersetOf(other);\r\n\t\t\tcount = other.getCount();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tcount = using(this.newUsing(), o=>\r\n\t\t\t{\r\n\t\t\t\tforEach(other, v=>\r\n\t\t\t\t{\r\n\t\t\t\t\to.add(v); // We have to add to another set in order to filter out duplicates.\r\n\t\t\t\t\t// contains == false will cause this to exit.\r\n\t\t\t\t\treturn result = this.contains(v);\r\n\t\t\t\t});\r\n\t\t\t\treturn o.getCount();\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn result && this.getCount()>count;\r\n\t}\r\n\r\n\tisSubsetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn other instanceof SetBase\r\n\t\t\t? other.isSupersetOf(this)\r\n\t\t\t: using(this.newUsing(other), o=> o.isSupersetOf(this));\r\n\t}\r\n\r\n\tisSupersetOf(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = true;\r\n\t\tforEach(other, v=>\r\n\t\t{\r\n\t\t\treturn result = this.contains(v);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\toverlaps(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tlet result = false;\r\n\t\tforEach(other, v => !(result = this.contains(v)));\r\n\t\treturn result;\r\n\t}\r\n\r\n\tsetEquals(other:IEnumerableOrArray<T>):boolean\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\treturn this.getCount()==(\r\n\t\t\t\tother instanceof SetBase\r\n\t\t\t\t\t? other.getCount()\r\n\t\t\t\t\t: using(this.newUsing(other), o=> o.getCount()))\r\n\t\t\t&& this.isSubsetOf(other);\r\n\t}\r\n\r\n\tsymmetricExceptWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(OTHER);\r\n\r\n\t\tconst _ = this;\r\n\t\tif(other instanceof SetBase)\r\n\t\t{\r\n\t\t\tforEach(other, v=>\r\n\t\t\t{\r\n\t\t\t\tif(_.contains(v))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._removeInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tif(_._addInternal(v))\r\n\t\t\t\t\t\t_._incrementModified();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t_._signalModification();\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tusing(this.newUsing(other), o=>_.symmetricExceptWith(o));\r\n\t\t}\r\n\t}\r\n\r\n\tunionWith(other:IEnumerableOrArray<T>):void\r\n\t{\r\n\t\tthis.importEntries(other);\r\n\t}\r\n\r\n\r\n\tprotected _clearInternal():number\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn s ? s.clear() : 0;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis._set = <any>null;\r\n\t}\r\n\r\n\tprotected abstract _getNode(item:T):ILinkedNodeWithValue<T>|undefined;\r\n\r\n\tcontains(item:T):boolean\r\n\t{\r\n\t\treturn !(!this.getCount() || !this._getNode(item));\r\n\t}\r\n\r\n\tgetEnumerator():IEnumerator<T>\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed();\r\n\t\tconst s = _._set;\r\n\t\treturn s && _.getCount()\r\n\t\t\t? LinkedNodeList.valueEnumeratorFrom<T>(s)\r\n\t\t\t: EmptyEnumerator;\r\n\t}\r\n\r\n\tforEach(action:ActionWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:PredicateWithIndex<T>, useCopy?:boolean):number\r\n\tforEach(action:ActionWithIndex<T> | PredicateWithIndex<T>, useCopy?:boolean):number\r\n\t{\r\n\t\treturn useCopy\r\n\t\t\t? super.forEach(action, useCopy)\r\n\t\t\t: this._set.forEach((node, i)=>action(<any>node.value, i));\r\n\t}\r\n\r\n\tprotected _removeNode(node:ILinkedNodeWithValue<T>|null|undefined):boolean\r\n\t{\r\n\t\treturn !!node\r\n\t\t\t&& this.remove(<any>node.value)!=0;\r\n\t}\r\n\r\n\tremoveFirst():boolean\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn this._removeNode(s && s.first);\r\n\t}\r\n\r\n\tremoveLast():boolean\r\n\t{\r\n\t\tconst s = this._set;\r\n\t\treturn this._removeNode(s && s.last);\r\n\t}\r\n\r\n\r\n}\r\n\r\nexport default SetBase;"]}