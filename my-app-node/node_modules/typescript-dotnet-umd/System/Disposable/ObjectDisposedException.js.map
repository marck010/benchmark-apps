{"version":3,"sources":["System/Disposable/ObjectDisposedException.js","System/Disposable/ObjectDisposedException.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","InvalidOperationException_1","extends_1","__extends","NAME","ObjectDisposedException","_super","objectName","message","innerException","call","this","_","prototype","getName","toString","oName","name","throwIfDisposed","disposable","wasDisposed","InvalidOperationException"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,0CAA2C,iBAAkBN,IAEhG,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCT1D,IAAAC,GAAAP,EAAA,2CAEAQ,EAAAR,EAAA,iBAEMS,EAAYD,EAAAA,WAGZE,EAAc,0BAIpBC,EAAA,SAAAC,GAMC,QAAAD,GACCE,EACAC,EACAC,GDDU,MCGVH,GAAAI,KAAAC,KAAMH,GAAW,GAAIC,EAAgB,SAACG,GAE/BA,EAAGL,WAAaA,KACrBI,KA4BJ,MA1C6CR,GAAAE,EAAAC,GAkBlCD,EAAAQ,UAAAC,QAAV,WAEC,MAAOV,IAGRC,EAAAQ,UAAAE,SAAA,WAEC,GAAMH,GAAID,KACNK,EAAQJ,EAAEL,UAGd,OAFAS,GAAQA,EAAS,IAAMA,EAAQ,KAAQ,GAEhC,IAAMJ,EAAEK,KAAO,KAAOD,EAAQJ,EAAEJ,QAAU,KAG3CH,EAAAa,gBAAP,SACCC,EACAZ,EACAC,GAEA,GAAGW,EAAWC,YACb,KAAM,IAAIf,GAAwBE,EAAYC,EAC/C,QAAO,GAGTH,GA1C6CJ,EAAAoB,0BAAhC7B,GAAAa,wBAAAA,EA4Cbb,EAAAA,WAAea","file":"ObjectDisposedException.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Exceptions/InvalidOperationException\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var NAME = 'ObjectDisposedException';\n    var ObjectDisposedException = /** @class */ (function (_super) {\n        __extends(ObjectDisposedException, _super);\n        // For simplicity and consistency, lets stick with 1 signature.\n        function ObjectDisposedException(objectName, message, innerException) {\n            return _super.call(this, message || '', innerException, function (_) {\n                _.objectName = objectName;\n            }) || this;\n        }\n        ObjectDisposedException.prototype.getName = function () {\n            return NAME;\n        };\n        ObjectDisposedException.prototype.toString = function () {\n            var _ = this;\n            var oName = _.objectName;\n            oName = oName ? ('{' + oName + '} ') : '';\n            return '[' + _.name + ': ' + oName + _.message + ']';\n        };\n        ObjectDisposedException.throwIfDisposed = function (disposable, objectName, message) {\n            if (disposable.wasDisposed)\n                throw new ObjectDisposedException(objectName, message);\n            return true;\n        };\n        return ObjectDisposedException;\n    }(InvalidOperationException_1.InvalidOperationException));\n    exports.ObjectDisposedException = ObjectDisposedException;\n    exports.default = ObjectDisposedException;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\nimport {Error, InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {IDisposableAware} from \"./IDisposableAware\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\nconst NAME:string = 'ObjectDisposedException';\r\n\r\nexport {Error};\r\n\r\nexport class ObjectDisposedException extends InvalidOperationException\r\n{\r\n\r\n\treadonly objectName:string;\r\n\r\n\t// For simplicity and consistency, lets stick with 1 signature.\r\n\tconstructor(\r\n\t\tobjectName:string,\r\n\t\tmessage?:string,\r\n\t\tinnerException?:Error)\r\n\t{\r\n\t\tsuper(message || '', innerException, (_)=>\r\n\t\t{\r\n\t\t\t(<any>_).objectName = objectName;\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprotected getName():string\r\n\t{\r\n\t\treturn NAME;\r\n\t}\r\n\r\n\ttoString():string\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet oName = _.objectName;\r\n\t\toName = oName ? ('{' + oName + '} ') : '';\r\n\r\n\t\treturn '[' + _.name + ': ' + oName + _.message + ']';\r\n\t}\r\n\r\n\tstatic throwIfDisposed(\r\n\t\tdisposable:IDisposableAware,\r\n\t\tobjectName:string,\r\n\t\tmessage?:string):true|never\r\n\t{\r\n\t\tif(disposable.wasDisposed)\r\n\t\t\tthrow new ObjectDisposedException(objectName, message);\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nexport default ObjectDisposedException;"]}