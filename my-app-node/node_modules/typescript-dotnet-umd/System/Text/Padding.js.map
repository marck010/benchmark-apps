{"version":3,"sources":["System/Text/Padding.js","System/Text/Padding.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","padStringLeft","source","minLength","pad","SPACE","Utility_1","repeat","length","padStringRight","padNumberLeft","ZERO","Types_1","Type","isNumber","Error","EMPTY","padNumberRight","padLeft","isString","padRight","Object","defineProperty","value"],"mappings":"CAAA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,aAAcN,IAE7D,SAAUI,EAASF,GAClB,YCHJ,SAAAM,GAA8BC,EAAeC,EAAkBC,GAE9D,MAF8D,UAAAA,IAAAA,EAAAC,GAEvDD,GAAOD,EAAU,EACpBG,EAAAC,OAAOH,EAAKD,EAAYD,EAAOM,QAAUN,EAC1CA,EAGJ,QAAAO,GAA+BP,EAAeC,EAAkBC,GAE/D,MAF+D,UAAAA,IAAAA,EAAAC,GAExDD,GAAOD,EAAU,EACpBD,EAASI,EAAAC,OAAOH,EAAKD,EAAYD,EAAOM,QACzCN,EAGJ,QAAAQ,GAA8BR,EAAeC,EAAkBC,GAE9D,GAF8D,SAAAA,IAAAA,EAAAO,IAE1DC,EAAAC,KAAKC,SAASZ,GAAQ,GACzB,KAAM,IAAIa,OAAM,yBAIjB,OAFIb,KAAQA,EAAS,GAEdD,EAAcC,EAASI,EAAAU,MAAOb,EAAWC,EAAME,EAAAU,OAIvD,QAAAC,GAA+Bf,EAAeC,EAAkBC,GAE/D,GAF+D,SAAAA,IAAAA,EAAAO,IAE3DC,EAAAC,KAAKC,SAASZ,GAAQ,GACzB,KAAM,IAAIa,OAAM,yBAIjB,OAFIb,KAAQA,EAAS,GAEdO,EAAeP,EAASI,EAAAU,MAAOb,EAAWC,EAAME,EAAAU,OAKxD,QAAAE,GAAwBhB,EAAsBC,EAAkBC,GAE/D,GAAGQ,EAAAC,KAAKM,SAASjB,GAAS,MAAOD,GAAcC,EAAQC,EAAWC,EAClE,IAAGQ,EAAAC,KAAKC,SAASZ,GAAQ,GAAO,MAAOQ,GAAcR,EAAQC,EAAWC,EACxE,MAAM,IAAIW,OAAM,wBAKjB,QAAAK,GAAyBlB,EAAsBC,EAAkBC,GAEhE,GAAGQ,EAAAC,KAAKM,SAASjB,GAAS,MAAOO,GAAeP,EAAQC,EAAWC,EACnE,IAAGQ,EAAAC,KAAKC,SAASZ,GAAQ,GAAO,MAAOe,GAAef,EAAQC,EAAWC,EACzE,MAAM,IAAIW,OAAM,wBD9CbM,OAAOC,eAAe3B,EAAS,cAAgB4B,OAAO,GCV1D,IAAAX,GAAAf,EAAA,YACAS,EAAAT,EAAA,aAEMQ,EAAQ,IACRM,EAAO,GAEbhB,GAAAM,cAAAA,EAOAN,EAAAc,eAAAA,EAOAd,EAAAe,cAAAA,EAWAf,EAAAsB,eAAAA,EAYAtB,EAAAuB,QAAAA,EASAvB,EAAAyB,SAAAA","file":"Padding.js","sourcesContent":["(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"./Utility\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Types_1 = require(\"../Types\");\n    var Utility_1 = require(\"./Utility\");\n    var SPACE = ' ';\n    var ZERO = '0';\n    function padStringLeft(source, minLength, pad) {\n        if (pad === void 0) { pad = SPACE; }\n        return pad && minLength > 0\n            ? (Utility_1.repeat(pad, minLength - source.length) + source)\n            : source;\n    }\n    exports.padStringLeft = padStringLeft;\n    function padStringRight(source, minLength, pad) {\n        if (pad === void 0) { pad = SPACE; }\n        return pad && minLength > 0\n            ? (source + Utility_1.repeat(pad, minLength - source.length))\n            : source;\n    }\n    exports.padStringRight = padStringRight;\n    function padNumberLeft(source, minLength, pad) {\n        if (pad === void 0) { pad = ZERO; }\n        if (!Types_1.Type.isNumber(source, true))\n            throw new Error(\"Cannot pad non-number.\");\n        if (!source)\n            source = 0;\n        return padStringLeft(source + Utility_1.EMPTY, minLength, pad + Utility_1.EMPTY);\n    }\n    exports.padNumberLeft = padNumberLeft;\n    function padNumberRight(source, minLength, pad) {\n        if (pad === void 0) { pad = ZERO; }\n        if (!Types_1.Type.isNumber(source, true))\n            throw new Error(\"Cannot pad non-number.\");\n        if (!source)\n            source = 0;\n        return padStringRight(source + Utility_1.EMPTY, minLength, pad + Utility_1.EMPTY);\n    }\n    exports.padNumberRight = padNumberRight;\n    function padLeft(source, minLength, pad) {\n        if (Types_1.Type.isString(source))\n            return padStringLeft(source, minLength, pad);\n        if (Types_1.Type.isNumber(source, true))\n            return padNumberLeft(source, minLength, pad);\n        throw new Error(\"Invalid source type.\");\n    }\n    exports.padLeft = padLeft;\n    function padRight(source, minLength, pad) {\n        if (Types_1.Type.isString(source))\n            return padStringRight(source, minLength, pad);\n        if (Types_1.Type.isNumber(source, true))\n            return padNumberRight(source, minLength, pad);\n        throw new Error(\"Invalid source type.\");\n    }\n    exports.padRight = padRight;\n});\n","import {Type} from \"../Types\";\r\nimport {repeat, EMPTY} from \"./Utility\";\r\n\r\nconst SPACE = ' ';\r\nconst ZERO = '0';\r\n\r\nexport function padStringLeft(source:string, minLength:number, pad:string = SPACE):string\r\n{\r\n\treturn pad && minLength>0\r\n\t\t? (repeat(pad, minLength - source.length) + source)\r\n\t\t: source;\r\n}\r\n\r\nexport function padStringRight(source:string, minLength:number, pad:string = SPACE):string\r\n{\r\n\treturn pad && minLength>0\r\n\t\t? (source + repeat(pad, minLength - source.length))\r\n\t\t: source;\r\n}\r\n\r\nexport function padNumberLeft(source:number, minLength:number, pad:string|number = ZERO):string\r\n{\r\n\tif(!Type.isNumber(source, true))\r\n\t\tthrow new Error(\"Cannot pad non-number.\");\r\n\r\n\tif(!source) source = 0;\r\n\r\n\treturn padStringLeft(source + EMPTY, minLength, pad + EMPTY);\r\n}\r\n\r\n\r\nexport function padNumberRight(source:number, minLength:number, pad:string|number = ZERO):string\r\n{\r\n\tif(!Type.isNumber(source, true))\r\n\t\tthrow new Error(\"Cannot pad non-number.\");\r\n\r\n\tif(!source) source = 0;\r\n\r\n\treturn padStringRight(source + EMPTY, minLength, pad + EMPTY);\r\n}\r\n\r\nexport function padLeft(source:string, minLength:number, pad?:string):string\r\nexport function padLeft(source:number, minLength:number, pad?:string|number):string\r\nexport function padLeft(source:string|number, minLength:number, pad?:any):string\r\n{\r\n\tif(Type.isString(source)) return padStringLeft(source, minLength, pad);\r\n\tif(Type.isNumber(source, true)) return padNumberLeft(source, minLength, pad);\r\n\tthrow new Error(\"Invalid source type.\");\r\n}\r\n\r\nexport function padRight(source:string, minLength:number, pad?:string):string\r\nexport function padRight(source:number, minLength:number, pad?:string|number):string\r\nexport function padRight(source:string|number, minLength:number, pad?:any):string\r\n{\r\n\tif(Type.isString(source)) return padStringRight(source, minLength, pad);\r\n\tif(Type.isNumber(source, true)) return padNumberRight(source, minLength, pad);\r\n\tthrow new Error(\"Invalid source type.\");\r\n}"]}