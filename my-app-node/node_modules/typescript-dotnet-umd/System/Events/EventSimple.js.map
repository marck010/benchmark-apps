{"version":3,"sources":["System/Events/EventSimple.js","System/Events/EventSimple.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","extends_1","EventSimple","this","_listeners","prototype","add","listener","push","remove","index","indexOf","splice","dispatch","params","_i","arguments","length","listeners","_a","listeners_1","f","call","toMulticastFunction","listeners_2","dispose"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,iBAAkBN,IAErD,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCR1D,IAAAC,GAAAP,EAAA,iBAQAQ,GANkBD,EAAAA,WAMlB,WAAA,QAAAC,KAEkBC,KAAAC,cAuClB,MArCCF,GAAAG,UAAAC,IAAA,SAAIC,GAEHJ,KAAKC,WAAWI,KAAKD,IAGtBL,EAAAG,UAAAI,OAAA,SAAOF,GAEN,GAAMG,GAAQP,KAAKC,WAAWO,QAAQJ,EACnCG,GAAM,GACTP,KAAKC,WAAWQ,OAAOF,EAAO,IAG/BR,EAAAG,UAAAQ,SAAA,WDOW,ICPF,GAAAC,MAAAC,EAAA,EAAAA,EAAAC,UAAAC,OAAAF,IAAAD,EAAAC,GAAAC,UAAAD,EAGR,KAAa,GADPG,GAAYf,KAAKC,WACVe,EAAA,EAAAC,EAAAF,EAAAC,EAAAC,EAAAH,OAAAE,IAAS,CAAlB,GAAIE,GAACD,EAAAD,EAERE,GAAEC,KAAKR,KAITZ,EAAAG,UAAAkB,oBAAA,WAEC,GAAML,GAAYf,KAAKC,UACvB,OAAO,YAEN,IAAa,GAAAW,GAAA,EAAAS,EAAAN,EAAAH,EAAAS,EAAAP,OAAAF,IAAS,CAAlB,GAAIM,GAACG,EAAAT,EAERM,GAAEC,KAAKN,cAKVd,EAAAG,UAAAoB,QAAA,WAECtB,KAAKC,WAAWa,OAAS,GAE3Bf,KDKIV,GAAAA,WAAkBU","file":"EventSimple.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based on Netjs mscorlib.ts\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    /**\n     * A simple event dispatcher provided as an alternative to built-in event.\n     * If just dispatching a payload to a uniform set of functions, it may be better to just use the utilities in System/Collections/Array/Dispatch.\n     */\n    var EventSimple = /** @class */ (function () {\n        function EventSimple() {\n            this._listeners = [];\n        }\n        EventSimple.prototype.add = function (listener) {\n            this._listeners.push(listener);\n        };\n        EventSimple.prototype.remove = function (listener) {\n            var index = this._listeners.indexOf(listener);\n            if (index < 0)\n                return;\n            this._listeners.splice(index, 1);\n        };\n        EventSimple.prototype.dispatch = function () {\n            var params = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                params[_i] = arguments[_i];\n            }\n            var listeners = this._listeners;\n            for (var _a = 0, listeners_1 = listeners; _a < listeners_1.length; _a++) {\n                var f = listeners_1[_a];\n                f.call(params);\n            }\n        };\n        EventSimple.prototype.toMulticastFunction = function () {\n            var listeners = this._listeners;\n            return function () {\n                for (var _i = 0, listeners_2 = listeners; _i < listeners_2.length; _i++) {\n                    var f = listeners_2[_i];\n                    f.call(arguments);\n                }\n            };\n        };\n        EventSimple.prototype.dispose = function () {\n            this._listeners.length = 0;\n        };\n        return EventSimple;\n    }());\n    exports.default = EventSimple;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on Netjs mscorlib.ts\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simple event dispatcher provided as an alternative to built-in event.\r\n * If just dispatching a payload to a uniform set of functions, it may be better to just use the utilities in System/Collections/Array/Dispatch.\r\n */\r\nexport default class EventSimple<T extends Function> implements IDisposable\r\n{\r\n\tprivate readonly _listeners:T[] = [];\r\n\r\n\tadd(listener:T):void\r\n\t{\r\n\t\tthis._listeners.push(listener);\r\n\t}\r\n\r\n\tremove(listener:T):void\r\n\t{\r\n\t\tconst index = this._listeners.indexOf(listener);\r\n\t\tif(index<0) return;\r\n\t\tthis._listeners.splice(index, 1);\r\n\t}\r\n\r\n\tdispatch(...params:any[]):void\r\n\t{\r\n\t\tconst listeners = this._listeners;\r\n\t\tfor(let f of listeners)\r\n\t\t{\r\n\t\t\tf.call(params);\r\n\t\t}\r\n\t}\r\n\r\n\ttoMulticastFunction():Function\r\n\t{\r\n\t\tconst listeners = this._listeners;\r\n\t\treturn function()\r\n\t\t{\r\n\t\t\tfor(let f of listeners)\r\n\t\t\t{\r\n\t\t\t\tf.call(arguments);\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tthis._listeners.length = 0;\r\n\t}\r\n}"]}