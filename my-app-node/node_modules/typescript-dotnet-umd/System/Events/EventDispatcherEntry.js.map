{"version":3,"sources":["System/Events/EventDispatcherEntry.js","System/Events/EventDispatcherEntry.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Types_1","DisposableBase_1","ArgumentNullException_1","ArgumentException_1","Compare_1","extends_1","__extends","NAME","EventDispatcherEntry","_super","type","listener","params","finalizer","_this","call","this","ArgumentNullException","Type","isObject","hasMemberOfType","FUNCTION","ArgumentException","_","_disposableObjectName","prototype","_onDispose","dispatch","e","wasDisposed","l","d","isFunction","handleEvent","matches","equals","other","areEquivalent","DisposableBase"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,+BAAgC,sCAAuC,kCAAmC,aAAc,iBAAkBN,IAEzL,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCT1D,IAAAC,GAAAP,EAAA,YACAQ,EAAAR,EAAA,gCACAS,EAAAT,EAAA,uCACAU,EAAAV,EAAA,mCACAW,EAAAX,EAAA,cAGAY,EAAAZ,EAAA,iBAGMa,EAAYD,EAAAA,WAEZE,EAAO,uBACbC,EAAA,SAAAC,GAIC,QAAAD,GACQE,EACAC,EACAC,EACPC,GAJD,GAAAC,GAMCL,EAAAM,KAAAC,KAAMH,IAAUG,IAEhB,IAPOF,EAAAJ,KAAAA,EACAI,EAAAH,SAAAA,EACAG,EAAAF,OAAAA,GAKHD,EACH,KAAM,IAAIT,GAAAe,sBAAsB,WACjC,IAAGjB,EAAAkB,KAAKC,SAASR,KAAcX,EAAAkB,KAAKE,gBAAgBT,EAAU,cAAeX,EAAAkB,KAAKG,UACjF,KAAM,IAAIlB,GAAAmB,kBAAkB,WAAY,wEAEzC,IAAMC,GAAIT,CDKA,OCJVS,GAAEb,KAAOA,EACTa,EAAEZ,SAAWA,EACbY,EAAEX,OAASA,EACXW,EAAEC,sBAAwBjB,EDCTO,ECqDnB,MA1EQR,GAAAE,EAAAC,GAuBGD,EAAAiB,UAAAC,WAAV,WAECjB,EAAAgB,UAAMC,WAAUX,KAAAC,MAChBA,KAAKL,SAAgB,MAQtBH,EAAAiB,UAAAE,SAAA,SAASC,GAER,GAAML,GAAIP,IACV,IAAGO,EAAEM,YAAa,OAAO,CAEzB,IAAMC,GAAIP,EAAEZ,SAAUoB,EAAID,GAAKF,EAAElB,MAAMa,EAAEb,IAQzC,OAPGqB,KAEC/B,EAAAkB,KAAKc,WAAWF,GACZP,EAAGZ,SAASiB,GAEIE,EAAGG,YAAYL,IAEhCG,GASRvB,EAAAiB,UAAAS,QAAA,SAAQxB,EAAaC,GAEpB,GAAMY,GAAIP,IACV,OAAOO,GAAEb,MAAMA,GACXa,EAAEZ,UAAUA,GAQjBH,EAAAiB,UAAAU,OAAA,SAAOC,GAEN,GAAMb,GAAIP,IACV,OAAOO,GAAEW,QAAQE,EAAM1B,KAAM0B,EAAMzB,WAC/BP,EAAAiC,cAAcd,EAAEX,OAAQwB,EAAMxB,QAAQ,IAE5CJ,GA1EQP,EAAAqC,eADK/C,GAAAiB,qBAAAA,EA6EbjB,EAAAA,WAAeiB","file":"EventDispatcherEntry.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"../Disposable/DisposableBase\", \"../Exceptions/ArgumentNullException\", \"../Exceptions/ArgumentException\", \"../Compare\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Types_1 = require(\"../Types\");\n    var DisposableBase_1 = require(\"../Disposable/DisposableBase\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var ArgumentException_1 = require(\"../Exceptions/ArgumentException\");\n    var Compare_1 = require(\"../Compare\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var NAME = \"EventDispatcherEntry\";\n    var EventDispatcherEntry = /** @class */ (function (_super) {\n        __extends(EventDispatcherEntry, _super);\n        function EventDispatcherEntry(type, listener, params, finalizer) {\n            var _this = _super.call(this, finalizer) || this;\n            _this.type = type;\n            _this.listener = listener;\n            _this.params = params;\n            if (!listener)\n                throw new ArgumentNullException_1.ArgumentNullException('listener');\n            if (Types_1.Type.isObject(listener) && !Types_1.Type.hasMemberOfType(listener, \"handleEvent\", Types_1.Type.FUNCTION))\n                throw new ArgumentException_1.ArgumentException('listener', \"is invalid type.  Must be a function or an object with 'handleEvent'.\");\n            var _ = _this;\n            _.type = type;\n            _.listener = listener;\n            _.params = params;\n            _._disposableObjectName = NAME;\n            return _this;\n        }\n        EventDispatcherEntry.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            this.listener = null;\n        };\n        /**\n         * Safely dispatches an event if entry is not disposed and type matches.\n         * @param e\n         * @returns {IEventListener|boolean}\n         */\n        EventDispatcherEntry.prototype.dispatch = function (e) {\n            var _ = this;\n            if (_.wasDisposed)\n                return false;\n            var l = _.listener, d = l && e.type == _.type;\n            if (d) {\n                if (Types_1.Type.isFunction(l))\n                    _.listener(e); // Use 'this' to ensure call reference.\n                else\n                    l.handleEvent(e);\n            }\n            return d;\n        };\n        /**\n         * Compares type and listener object only.\n         * @param type\n         * @param listener\n         * @returns {boolean}\n         */\n        EventDispatcherEntry.prototype.matches = function (type, listener) {\n            var _ = this;\n            return _.type == type\n                && _.listener == listener;\n        };\n        /**\n         * Compares type, listener, and priority.\n         * @param other\n         * @returns {boolean}\n         */\n        EventDispatcherEntry.prototype.equals = function (other) {\n            var _ = this;\n            return _.matches(other.type, other.listener)\n                && Compare_1.areEquivalent(_.params, other.params, false);\n        };\n        return EventDispatcherEntry;\n    }(DisposableBase_1.DisposableBase));\n    exports.EventDispatcherEntry = EventDispatcherEntry;\n    exports.default = EventDispatcherEntry;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {DisposableBase} from \"../Disposable/DisposableBase\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\nimport {ArgumentException} from \"../Exceptions/ArgumentException\";\r\nimport {areEquivalent} from \"../Compare\";\r\nimport {IEventListener} from \"./IEventListener\";\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Closure} from \"../FunctionTypes\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME = \"EventDispatcherEntry\";\r\nexport class EventDispatcherEntry<TParams>\r\nextends DisposableBase implements IEquatable<EventDispatcherEntry<TParams>>\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic type:string,\r\n\t\tpublic listener:IEventListener,\r\n\t\tpublic params?:TParams,\r\n\t\tfinalizer?:Closure)//, useWeakReference: boolean = false)\r\n\t{\r\n\t\tsuper(finalizer);\r\n\r\n\t\tif(!listener)\r\n\t\t\tthrow new ArgumentNullException('listener');\r\n\t\tif(Type.isObject(listener) && !Type.hasMemberOfType(listener, \"handleEvent\", Type.FUNCTION))\r\n\t\t\tthrow new ArgumentException('listener', \"is invalid type.  Must be a function or an object with 'handleEvent'.\");\r\n\r\n\t\tconst _ = this;\r\n\t\t_.type = type;\r\n\t\t_.listener = listener;\r\n\t\t_.params = params;\r\n\t\t_._disposableObjectName = NAME;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tthis.listener = <any>null;\r\n\t}\r\n\r\n\t/**\r\n\t * Safely dispatches an event if entry is not disposed and type matches.\r\n\t * @param e\r\n\t * @returns {IEventListener|boolean}\r\n\t */\r\n\tdispatch(e:Event):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_.wasDisposed) return false;\r\n\r\n\t\tconst l = _.listener, d = l && e.type==_.type;\r\n\t\tif(d)\r\n\t\t{\r\n\t\t\tif(Type.isFunction(l))\r\n\t\t\t\t(<any>_).listener(e); // Use 'this' to ensure call reference.\r\n\t\t\telse\r\n\t\t\t\t(<EventListenerObject>l).handleEvent(e);\r\n\t\t}\r\n\t\treturn d;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares type and listener object only.\r\n\t * @param type\r\n\t * @param listener\r\n\t * @returns {boolean}\r\n\t */\r\n\tmatches(type:string, listener:IEventListener):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.type==type\r\n\t\t\t&& _.listener==listener;\r\n\t}\r\n\r\n\t/**\r\n\t * Compares type, listener, and priority.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:EventDispatcherEntry<TParams>):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.matches(other.type, other.listener)\r\n\t\t\t&& areEquivalent(_.params, other.params, false);\r\n\t}\r\n}\r\n\r\nexport default EventDispatcherEntry;"]}