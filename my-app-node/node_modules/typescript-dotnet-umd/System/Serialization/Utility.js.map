{"version":3,"sources":["System/Serialization/Utility.js","System/Serialization/Utility.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","toString","value","defaultForUnknown","Types_1","Type","STRING","BOOLEAN","TRUE","FALSE","NUMBER","EMPTY","isSerializable","serialize","ex","InvalidOperationException_1","InvalidOperationException","data","instance","hasMemberOfType","FUNCTION","toPrimitive","caseInsensitive","unknownHandler","toLowerCase","UNDEFINED","cleaned","replace","test","int","parseInt","isNaN","number","parseFloat","Object","defineProperty"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,2CAA4CN,IAE3F,SAAUI,EAASF,GAClB,YCAJ,SAAAM,GACCC,EACAC,GAGA,GAAIP,GAASM,CACb,cAAcN,IAEb,IAAKQ,GAAAC,KAAKC,OACT,MAAOV,EACR,KAAKQ,GAAAC,KAAKE,QACT,MAAOX,GAAIY,EAAOC,CACnB,KAAKL,GAAAC,KAAKK,OACT,MAAOC,GAAQf,CAChB,SAEC,GAAM,MAAHA,EACF,MAAOA,EAER,IAAGgB,EAAehB,GACjB,MAAOA,GAAEiB,WACL,IAAGV,EACP,MAAOA,EAER,IAAMW,GAAK,GAAIC,GAAAC,0BAA0B,+CAEzC,MADAF,GAAGG,KAAY,MAAIrB,EACbkB,GAMT,QAAAF,GAA+BM,GAE9B,MAAOd,GAAAC,KAAKc,gBAA+BD,EAAU,YAAad,EAAAC,KAAKe,UAGxE,QAAAC,GACCnB,EACAoB,EACAC,GAIA,GAAGrB,EAIF,OAFGoB,IAAiBpB,EAAQA,EAAMsB,eAE3BtB,GAEN,IAAK,OACJ,MAAO,KACR,KAAKE,GAAAC,KAAKoB,UACT,MACD,KAAKjB,GACJ,OAAO,CACR,KAAKC,GACJ,OAAO,CACR,SAEC,GAAMiB,GAAUxB,EAAMyB,QAAQ,eAAgBhB,EAC9C,IAAGe,EAGF,GAAG,SAASE,KAAKF,GACjB,CACC,GAAMG,GAAMC,SAASJ,EACrB,KAAIK,MAAMF,GAAM,MAAOA,OAGxB,CACC,GAAMG,GAASC,WAAW/B,EAC1B,KAAI6B,MAAMC,GAAS,MAAOA,GAQzBT,IAAgBrB,EAAQqB,EAAerB,IAO7C,MAAOA,GDtFJgC,OAAOC,eAAexC,EAAS,cAAgBO,OAAO,GCT1D,IAAAE,GAAAP,EAAA,YACAkB,EAAAlB,EAAA,2CAKMc,EAAQ,GAAIH,EAAO,OAAQC,EAAQ,OAEzCd,GAAAM,SAAAA,EAgCAN,EAAAiB,eAAAA,EAKAjB,EAAA0B,YAAAA","file":"Utility.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"../Exceptions/InvalidOperationException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Types_1 = require(\"../Types\");\n    var InvalidOperationException_1 = require(\"../Exceptions/InvalidOperationException\");\n    var EMPTY = '', TRUE = 'true', FALSE = 'false';\n    function toString(value, defaultForUnknown) {\n        var v = value;\n        switch (typeof v) {\n            case Types_1.Type.STRING:\n                return v;\n            case Types_1.Type.BOOLEAN:\n                return v ? TRUE : FALSE;\n            case Types_1.Type.NUMBER:\n                return EMPTY + v;\n            default:\n                if (v == null)\n                    return v;\n                if (isSerializable(v))\n                    return v.serialize();\n                else if (defaultForUnknown)\n                    return defaultForUnknown;\n                var ex = new InvalidOperationException_1.InvalidOperationException('Attempting to serialize unidentifiable type.');\n                ex.data['value'] = v;\n                throw ex;\n        }\n    }\n    exports.toString = toString;\n    function isSerializable(instance) {\n        return Types_1.Type.hasMemberOfType(instance, 'serialize', Types_1.Type.FUNCTION);\n    }\n    exports.isSerializable = isSerializable;\n    function toPrimitive(value, caseInsensitive, unknownHandler) {\n        if (value) {\n            if (caseInsensitive)\n                value = value.toLowerCase();\n            switch (value) {\n                case 'null':\n                    return null;\n                case Types_1.Type.UNDEFINED:\n                    return void (0);\n                case TRUE:\n                    return true;\n                case FALSE:\n                    return false;\n                default:\n                    var cleaned = value.replace(/^\\s+|,|\\s+$/g, EMPTY);\n                    if (cleaned) {\n                        if (/^\\d+$/g.test(cleaned)) {\n                            var int = parseInt(cleaned);\n                            if (!isNaN(int))\n                                return int;\n                        }\n                        else {\n                            var number = parseFloat(value);\n                            if (!isNaN(number))\n                                return number;\n                        }\n                    }\n                    // Handle Dates...  Possibly JSON?\n                    // Instead of throwing we allow for handling...\n                    if (unknownHandler)\n                        value = unknownHandler(value);\n                    break;\n            }\n        }\n        return value;\n    }\n    exports.toPrimitive = toPrimitive;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {InvalidOperationException} from \"../Exceptions/InvalidOperationException\";\r\nimport {ISerializable} from \"./ISerializable\";\r\nimport {Primitive} from \"../Primitive\";\r\n\r\n\r\nconst EMPTY = '', TRUE = 'true', FALSE = 'false';\r\n\r\nexport function toString(\r\n\tvalue:Primitive|ISerializable|undefined|null,\r\n\tdefaultForUnknown?:string):string\r\n{\r\n\r\n\tlet v = <any>value;\r\n\tswitch(typeof v)\r\n\t{\r\n\t\tcase Type.STRING:\r\n\t\t\treturn v;\r\n\t\tcase Type.BOOLEAN:\r\n\t\t\treturn v ? TRUE : FALSE;\r\n\t\tcase Type.NUMBER:\r\n\t\t\treturn EMPTY + v;\r\n\t\tdefault:\r\n\r\n\t\t\tif(v==null)\r\n\t\t\t\treturn v;\r\n\r\n\t\t\tif(isSerializable(v))\r\n\t\t\t\treturn v.serialize();\r\n\t\t\telse if(defaultForUnknown)\r\n\t\t\t\treturn defaultForUnknown;\r\n\r\n\t\t\tconst ex = new InvalidOperationException('Attempting to serialize unidentifiable type.');\r\n\t\t\tex.data['value'] = v;\r\n\t\t\tthrow ex;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport function isSerializable(instance:any):instance is ISerializable\r\n{\r\n\treturn Type.hasMemberOfType<ISerializable>(instance, 'serialize', Type.FUNCTION);\r\n}\r\n\r\nexport function toPrimitive(\r\n\tvalue:string,\r\n\tcaseInsensitive?:boolean,\r\n\tunknownHandler?:(v:string)=>string):Primitive|null|undefined\r\n{\r\n\r\n\r\n\tif(value)\r\n\t{\r\n\t\tif(caseInsensitive) value = value.toLowerCase();\r\n\r\n\t\tswitch(value)\r\n\t\t{\r\n\t\t\tcase 'null':\r\n\t\t\t\treturn null;\r\n\t\t\tcase Type.UNDEFINED:\r\n\t\t\t\treturn void(0);\r\n\t\t\tcase TRUE:\r\n\t\t\t\treturn true;\r\n\t\t\tcase FALSE:\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconst cleaned = value.replace(/^\\s+|,|\\s+$/g, EMPTY);\r\n\t\t\t\tif(cleaned)\r\n\t\t\t\t{\r\n\r\n\t\t\t\t\tif(/^\\d+$/g.test(cleaned))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst int = parseInt(cleaned);\r\n\t\t\t\t\t\tif(!isNaN(int)) return int;\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst number = parseFloat(value);\r\n\t\t\t\t\t\tif(!isNaN(number)) return number;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handle Dates...  Possibly JSON?\r\n\r\n\t\t\t\t// Instead of throwing we allow for handling...\r\n\t\t\t\tif(unknownHandler) value = unknownHandler(value);\r\n\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn value;\r\n\r\n}\r\n"]}