{"version":3,"sources":["System/Validation/ValidationResult.js","System/Validation/ValidationResult.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","VALID","ValidationResult","isValid","message","data","this","freeze","prototype","equals","other","_","get","enumerable","configurable","invalid"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCN1D,IAAIC,GAA8B,KAKlCC,EAAA,WAMC,QAAAA,GACUC,EACAC,EACAC,GAFA,SAAAF,IAAAA,GAAA,GAEA,SAAAE,IAAAA,EAAA,MAFAC,KAAAH,QAAAA,EACAG,KAAAF,QAAAA,EACAE,KAAAD,KAAAA,EAETC,KAAKH,QAAUA,EACfG,KAAKF,QAAUA,EACfE,KAAKD,KAAOA,EAGZP,OAAOS,OAAOD,MAiChB,MA3BCJ,GAAAM,UAAAC,OAAA,SAAOC,GAEN,GAAMC,GAAIL,IACV,OAAOK,GAAER,UAAUO,EAAMP,SACrBQ,EAAEP,SAASO,EAAEP,SACbO,EAAEN,MAAMM,EAAEN,MAQfP,OAAAC,eAAWG,EAAA,SDCAU,ICDX,WAEC,MAAOX,KAAUA,EAAQ,GAAIC,KAAiB,MDEpCW,YAAY,EACZC,cAAc,ICGlBZ,EAAAa,QAAP,SACCX,EACAC,GAEA,MAFA,UAAAA,IAAAA,EAAA,MAEO,GAAIH,KAAiB,GAAOE,EAASC,IAE9CH,IDEIV,GAAAA,WAAkBU","file":"ValidationResult.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var VALID = null;\n    /**\n     * A class for generating responses to validation.\n     */\n    var ValidationResult = /** @class */ (function () {\n        /**\n         * Allows for rare cases that ValidationResult.valid and ValidationResult.invalid() don't cover.\n         */\n        function ValidationResult(isValid, message, data) {\n            if (isValid === void 0) { isValid = false; }\n            if (data === void 0) { data = null; }\n            this.isValid = isValid;\n            this.message = message;\n            this.data = data;\n            this.isValid = isValid;\n            this.message = message;\n            this.data = data;\n            // Readonly...\n            Object.freeze(this);\n        }\n        /**\n         * Allows for comparing another IValidationResult to see if they are equal.\n         */\n        ValidationResult.prototype.equals = function (other) {\n            var _ = this;\n            return _.isValid === other.isValid\n                && _.message == _.message\n                && _.data == _.data;\n        };\n        Object.defineProperty(ValidationResult, \"valid\", {\n            /**\n             * Represents a single/shared instance of a valid result.\n             * Allows for returning this instance like you would return 'true'.\n             */\n            get: function () {\n                return VALID || (VALID = new ValidationResult(true));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Factory method for easily creating an invalid result.\n         */\n        ValidationResult.invalid = function (message, data) {\n            if (data === void 0) { data = null; }\n            return new ValidationResult(false, message, data);\n        };\n        return ValidationResult;\n    }());\n    exports.default = ValidationResult;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport {IValidationResult} from \"./IValidationResult\"; // For compatibility with (let, const, function, class);\r\n\r\nlet VALID:ValidationResult|null = null;\r\n\r\n/**\r\n * A class for generating responses to validation.\r\n */\r\nexport default\r\nclass ValidationResult implements IValidationResult, IEquatable<IValidationResult>\r\n{\r\n\t/**\r\n\t * Allows for rare cases that ValidationResult.valid and ValidationResult.invalid() don't cover.\r\n\t */\r\n\tconstructor(\r\n\t\treadonly isValid:boolean = false,\r\n\t\treadonly message?:string,\r\n\t\treadonly data:any = null)\r\n\t{\r\n\t\tthis.isValid = isValid;\r\n\t\tthis.message = message;\r\n\t\tthis.data = data;\r\n\r\n\t\t// Readonly...\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Allows for comparing another IValidationResult to see if they are equal.\r\n\t */\r\n\tequals(other:IValidationResult):boolean\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn _.isValid===other.isValid\r\n\t\t\t&& _.message==_.message\r\n\t\t\t&& _.data==_.data;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Represents a single/shared instance of a valid result.\r\n\t * Allows for returning this instance like you would return 'true'.\r\n\t */\r\n\tstatic get valid():IValidationResult\r\n\t{\r\n\t\treturn VALID || (VALID = new ValidationResult(true));\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for easily creating an invalid result.\r\n\t */\r\n\tstatic invalid(\r\n\t\tmessage:string,\r\n\t\tdata:any = null):IValidationResult\r\n\t{\r\n\t\treturn new ValidationResult(false, message, data);\r\n\t}\r\n}\r\n"]}