{"version":3,"sources":["System/Threading/Tasks/Task.js","System/Threading/Tasks/Task.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","TaskHandlerBase_1","ArgumentNullException_1","Lazy_1","extends_1","__extends","Task","_super","valueFactory","_this","call","this","ArgumentNullException","_result","Lazy","prototype","_onExecute","getValue","getResult","getState","r","status","getStatus","result","isValueCreated","error","start","defer","runSynchronously","get","enumerable","configurable","throwIfDisposed","_onDispose","dispose","TaskHandlerBase"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,oBAAqB,yCAA0C,aAAc,oBAAqBN,IAErI,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCT1D,IAAAC,GAAAP,EAAA,qBACAQ,EAAAR,EAAA,0CAEAS,EAAAT,EAAA,cAGAU,EAAAV,EAAA,oBAEMW,EAAYD,EAAAA,WAMlBE,EAAA,SAAAC,GAIC,QAAAD,GAAYE,GAAZ,GAAAC,GAECF,EAAAG,KAAAC,OAAOA,IACP,KAAIH,EAAc,KAAM,IAAIN,GAAAU,sBAAsB,eDMxC,OCLVH,GAAKI,QAAU,GAAIV,GAAAW,KAAKN,IAAc,IDKrBC,ECgEnB,MA7E6BJ,GAAAC,EAAAC,GAWlBD,EAAAS,UAAAC,WAAV,WAECL,KAAKE,QAAQI,YAGJX,EAAAS,UAAAG,UAAV,WAEC,MAAOP,MAAKE,QAAQb,OAGXM,EAAAS,UAAAI,SAAV,WAEC,GAAMC,GAAIT,KAAKE,OACf,OAAOO,KACLC,OAAQV,KAAKW,YACbC,OAAQH,EAAEI,eAAiBJ,EAAEpB,MAAQ,OACrCyB,MAAOL,EAAEK,QAKZnB,EAAAS,UAAAW,MAAA,SAAMC,GAEc,GAAhBhB,KAAKW,aAEPf,EAAAQ,UAAMW,MAAKhB,KAAAC,KAACgB,IAIdrB,EAAAS,UAAAa,iBAAA,WAEoB,GAAhBjB,KAAKW,aAEPf,EAAAQ,UAAMa,iBAAgBlB,KAAAC,OAIxBb,OAAAC,eAAIO,EAAAS,UAAA,SDROc,ICQX,WAEC,MAAOlB,MAAKQ,YDPFW,YAAY,EACZC,cAAc,ICSzBjC,OAAAC,eAAIO,EAAAS,UAAA,UDNOc,ICMX,WAIC,MAFAlB,MAAKqB,kBACLrB,KAAKiB,mBACEjB,KAAKO,aDLFY,YAAY,EACZC,cAAc,ICOzBjC,OAAAC,eAAIO,EAAAS,UAAA,SDJOc,ICIX,WAGC,MADAlB,MAAKqB,kBACErB,KAAKE,QAAQY,ODHVK,YAAY,EACZC,cAAc,ICKfzB,EAAAS,UAAAkB,WAAV,WAEC1B,EAAAQ,UAAMkB,WAAUvB,KAAAC,KAChB,IAAMS,GAAIT,KAAKE,OAEZO,KAEIT,KAAME,QAAU,KACtBO,EAAEc,YAGL5B,GA7E6BL,EAAAkC,gBAAhB3C,GAAAc,KAAAA,EA+Ebd,EAAAA,WAAec","file":"Task.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./TaskHandlerBase\", \"../../Exceptions/ArgumentNullException\", \"../../Lazy\", \"../../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var TaskHandlerBase_1 = require(\"./TaskHandlerBase\");\n    var ArgumentNullException_1 = require(\"../../Exceptions/ArgumentNullException\");\n    var Lazy_1 = require(\"../../Lazy\");\n    var extends_1 = require(\"../../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    /**\n     * A simplified synchronous (but deferrable) version of Task<T>\n     * Asynchronous operations should use Promise<T>.\n     */\n    var Task = /** @class */ (function (_super) {\n        __extends(Task, _super);\n        function Task(valueFactory) {\n            var _this = _super.call(this) || this;\n            if (!valueFactory)\n                throw new ArgumentNullException_1.ArgumentNullException('valueFactory');\n            _this._result = new Lazy_1.Lazy(valueFactory, false);\n            return _this;\n        }\n        Task.prototype._onExecute = function () {\n            this._result.getValue();\n        };\n        Task.prototype.getResult = function () {\n            return this._result.value; // This will detect any potential recursion.\n        };\n        Task.prototype.getState = function () {\n            var r = this._result;\n            return r && {\n                status: this.getStatus(),\n                result: r.isValueCreated ? r.value : void 0,\n                error: r.error\n            };\n        };\n        Task.prototype.start = function (defer) {\n            if (this.getStatus() == 0 /* Created */) {\n                _super.prototype.start.call(this, defer);\n            }\n        };\n        Task.prototype.runSynchronously = function () {\n            if (this.getStatus() == 0 /* Created */) {\n                _super.prototype.runSynchronously.call(this);\n            }\n        };\n        Object.defineProperty(Task.prototype, \"state\", {\n            get: function () {\n                return this.getState();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Task.prototype, \"result\", {\n            get: function () {\n                this.throwIfDisposed();\n                this.runSynchronously();\n                return this.getResult();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Task.prototype, \"error\", {\n            get: function () {\n                this.throwIfDisposed();\n                return this._result.error;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Task.prototype._onDispose = function () {\n            _super.prototype._onDispose.call(this);\n            var r = this._result;\n            if (r) {\n                this._result = null;\n                r.dispose();\n            }\n        };\n        return Task;\n    }(TaskHandlerBase_1.TaskHandlerBase));\n    exports.Task = Task;\n    exports.default = Task;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TaskHandlerBase} from \"./TaskHandlerBase\";\r\nimport {ArgumentNullException} from \"../../Exceptions/ArgumentNullException\";\r\nimport {Func} from \"../../FunctionTypes\";\r\nimport {Lazy} from \"../../Lazy\";\r\nimport {ITaskState} from \"./ITaskState\";\r\nimport {TaskStatus} from \"./TaskStatus\";\r\nimport __extendsImport from \"../../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A simplified synchronous (but deferrable) version of Task<T>\r\n * Asynchronous operations should use Promise<T>.\r\n */\r\nexport class Task<T> extends TaskHandlerBase\r\n{\r\n\tprivate readonly _result:Lazy<T>;\r\n\r\n\tconstructor(valueFactory:Func<T>)\r\n\t{\r\n\t\tsuper();\r\n\t\tif(!valueFactory) throw new ArgumentNullException('valueFactory');\r\n\t\tthis._result = new Lazy(valueFactory, false);\r\n\t}\r\n\r\n\tprotected _onExecute():void\r\n\t{\r\n\t\tthis._result.getValue();\r\n\t}\r\n\r\n\tprotected getResult():T\r\n\t{\r\n\t\treturn this._result.value; // This will detect any potential recursion.\r\n\t}\r\n\r\n\tprotected getState():ITaskState<T>\r\n\t{\r\n\t\tconst r = this._result;\r\n\t\treturn r && {\r\n\t\t\t\tstatus: this.getStatus(),\r\n\t\t\t\tresult: r.isValueCreated ? r.value : void 0,\r\n\t\t\t\terror: r.error\r\n\t\t\t};\r\n\t}\r\n\r\n\r\n\tstart(defer?:number):void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.start(defer);\r\n\t\t}\r\n\t}\r\n\r\n\trunSynchronously():void\r\n\t{\r\n\t\tif(this.getStatus()==TaskStatus.Created)\r\n\t\t{\r\n\t\t\tsuper.runSynchronously();\r\n\t\t}\r\n\t}\r\n\r\n\tget state():ITaskState<T>\r\n\t{\r\n\t\treturn this.getState();\r\n\t}\r\n\r\n\tget result():T\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\tthis.runSynchronously();\r\n\t\treturn this.getResult();\r\n\t}\r\n\r\n\tget error():any\r\n\t{\r\n\t\tthis.throwIfDisposed();\r\n\t\treturn this._result.error;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tsuper._onDispose();\r\n\t\tconst r = this._result;\r\n\r\n\t\tif(r)\r\n\t\t{\r\n\t\t\t(<any>this)._result = null;\r\n\t\t\tr.dispose();\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Task;"]}