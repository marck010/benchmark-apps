{"version":3,"sources":["System/Environment.js","System/Environment.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","r","eval","ex","isCommonJS","resolve","isRequireJS","toUrl","defined","isNodeJS","process","toString","nextTick","freeze"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,QAASF,SAClB,YACAM,QAAOC,eAAeP,QAAS,cAAgBQ,OAAO,GCN1D,IAAIC,EACJ,KACCA,EAAIC,KAAK,WAEV,MAAOC,KAKNX,QAAAY,cACMH,IAAKA,EAAEI,SAIbb,QAAAc,eACML,GAAKA,EAAEM,OAASN,EAAEO,SAcxBhB,QAAAiB,SACmB,gBAATC,UACe,qBAArBA,QAAQC,YACW,QAAnBD,QAAQE,QAIb,KAAMd,OAAOe,OAAOrB,SACpB,MAAMW","file":"Environment.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // Need to spoof this so WebPack doesn't panic (warnings).\n    var r;\n    try {\n        r = eval('require');\n    }\n    catch (ex) { }\n    //noinspection JSUnusedGlobalSymbols\n    exports.isCommonJS = !!(r && r.resolve);\n    //noinspection JSUnusedGlobalSymbols\n    exports.isRequireJS = !!(r && r.toUrl && r.defined);\n    /*\n     * Ensure is in a real Node environment, with a `process.nextTick`.\n     * To see through fake Node environments:\n     * Mocha test runner - exposes a `process` global without a `nextTick`\n     * Browserify - exposes a `process.nexTick` function that uses\n     * `setTimeout`. In this case `setImmediate` is preferred because\n     * it is faster. Browserify's `process.toString()` yields\n     * \"[object Object]\", while in a real Node environment\n     * `process.nextTick()` yields \"[object process]\".\n     */\n    exports.isNodeJS = typeof process == \"object\"\n        && process.toString() === \"[object process]\"\n        && process.nextTick != void 0;\n    //noinspection JSUnusedAssignment\n    try {\n        Object.freeze(exports);\n    }\n    catch (ex) { }\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\ndeclare const process:any;\r\n\r\n// Need to spoof this so WebPack doesn't panic (warnings).\r\nlet r:any;\r\ntry {\r\n\tr = eval('require');\r\n}\r\ncatch (ex) {}\r\n\r\n\r\n//noinspection JSUnusedGlobalSymbols\r\nexport const\r\n\tisCommonJS:boolean\r\n\t\t= !!(r && r.resolve);\r\n\r\n//noinspection JSUnusedGlobalSymbols\r\nexport const\r\n\tisRequireJS:boolean\r\n\t\t= !!(r && r.toUrl && r.defined);\r\n\r\n/*\r\n * Ensure is in a real Node environment, with a `process.nextTick`.\r\n * To see through fake Node environments:\r\n * Mocha test runner - exposes a `process` global without a `nextTick`\r\n * Browserify - exposes a `process.nexTick` function that uses\r\n * `setTimeout`. In this case `setImmediate` is preferred because\r\n * it is faster. Browserify's `process.toString()` yields\r\n * \"[object Object]\", while in a real Node environment\r\n * `process.nextTick()` yields \"[object process]\".\r\n */\r\n\r\nexport const\r\n\tisNodeJS:boolean\r\n\t\t= typeof process==\"object\"\r\n\t\t&& process.toString()===\"[object process]\"\r\n\t\t&& process.nextTick!= void 0;\r\n\r\ndeclare const exports:any;\r\n//noinspection JSUnusedAssignment\r\ntry { Object.freeze(exports); }\r\ncatch(ex) { }\r\n"]}