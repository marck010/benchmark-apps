{"version":3,"sources":["System/Timers/Timer.js","System/Timers/Timer.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","ObservableBase_1","extends_1","__extends","Timer","_super","_interval","_maxCount","_initialDelay","Infinity","_this","call","this","_count","startNew","millisecondInterval","maxCount","initialDelay","t","start","prototype","get","_cancel","enumerable","configurable","_","throwIfDisposed","i_1","setInterval","_onTick","clearInterval","i_2","setTimeout","clearTimeout","stop","cancel","reset","complete","_onCompleted","_onDispose","timer","reInitTimer","index","max","isComplete","_onNext","ObservableBase"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,+BAAgC,iBAAkBN,IAErF,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCR1D,IAAAC,GAAAP,EAAA,gCAEAQ,EAAAR,EAAA,iBAGMS,EAAYD,EAAAA,WAKlBE,EAAA,SAAAC,GAMC,QAAAD,GACSE,EACAC,EACAC,GADA,SAAAD,IAAAA,EAAAE,EAAAA,GACA,SAAAD,IAAAA,EAAAF,EAHT,IAAAI,GAKCL,EAAAM,KAAAC,OAAOA,IAEP,IANQF,EAAAJ,UAAAA,EACAI,EAAAH,UAAAA,EACAG,EAAAF,cAAAA,EALDE,EAAAG,OAAgB,EASR,OAAZP,EACF,KAAM,oCACP,IAAGA,EAAU,EACZ,KAAM,gCDIG,OAAOI,GCwJnB,MA5KmCP,GAAAC,EAAAC,GA0B3BD,EAAAU,SAAP,SACCC,EACAC,EACAC,GADA,SAAAD,IAAAA,EAAAP,EAAAA,GACA,SAAAQ,IAAAA,EAAAF,EAEA,IAAMG,GAAI,GAAId,GAAMW,EAAqBC,EAAUC,EAEnD,OADAC,GAAEC,QACKD,GAORpB,OAAAC,eAAIK,EAAAgB,UAAA,aDCOC,ICDX,WAEC,QAAST,KAAKU,SDEJC,YAAY,EACZC,cAAc,ICIzB1B,OAAAC,eAAIK,EAAAgB,UAAA,SDGOC,ICHX,WAEC,MAAOT,MAAKC,QDIFU,YAAY,EACZC,cAAc,ICCzBpB,EAAAgB,UAAAD,MAAA,WAEC,GAAMM,GAAIb,IAEV,IADAa,EAAEC,gBAAgB,sDACdD,EAAEH,SAAWG,EAAEZ,OAAOY,EAAElB,UAG3B,GAAGkB,EAAEZ,QAAUY,EAAEjB,gBAAgBiB,EAAEnB,UACnC,CACC,GAAIqB,GAAIC,YACPxB,EAAMyB,QACNJ,EAAEnB,UACFmB,EAEDA,GAAEH,QAAU,WAEXQ,cAAcH,QAIhB,CACC,GAAII,GAAIC,WACP5B,EAAMyB,QACNJ,EAAEjB,cACFiB,GAAG,EAEJA,GAAEH,QAAU,WAEXW,aAAaF,MAUjB3B,EAAAgB,UAAAc,KAAA,WAECtB,KAAKuB,UAMN/B,EAAAgB,UAAAgB,MAAA,WAECxB,KAAKsB,OACLtB,KAAKC,OAAS,GAOfT,EAAAgB,UAAAiB,SAAA,WAIC,MAFAzB,MAAKuB,SACLvB,KAAK0B,eACE1B,KAAKC,QAObT,EAAAgB,UAAAe,OAAA,WAEC,QAAGvB,KAAKU,UAEPV,KAAKU,UACLV,KAAKU,QAAU,MACR,IAKClB,EAAAgB,UAAAmB,WAAV,WAEC3B,KAAKuB,SACL9B,EAAAe,UAAMmB,WAAU5B,KAAAC,OAIFR,EAAAyB,QAAf,SACCW,EACAC,GAEA,GAAMC,GAAaF,EAAM3B,SACnB8B,EAAaH,EAAMjC,UACnBqC,EAAaJ,EAAM3B,QAAQ8B,CAE9BF,KAEFD,EAAML,SACNK,EAAMrB,SAGJyB,GAEFJ,EAAMN,OAGJQ,EAAMC,GAERH,EAAMK,QAAQH,GAGZE,GAEFJ,EAAMF,gBAITlC,GA5KmCH,EAAA6C,eDyI/BtD,GAAAA,WAAkBY","file":"Timer.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Observable/ObservableBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var ObservableBase_1 = require(\"../Observable/ObservableBase\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    /**\n     * A timer class that uses an Observable pattern to allow for subscribing to ticks.\n     */\n    var Timer = /** @class */ (function (_super) {\n        __extends(Timer, _super);\n        function Timer(_interval, _maxCount, _initialDelay) {\n            if (_maxCount === void 0) { _maxCount = Infinity; }\n            if (_initialDelay === void 0) { _initialDelay = _interval; }\n            var _this = _super.call(this) || this;\n            _this._interval = _interval;\n            _this._maxCount = _maxCount;\n            _this._initialDelay = _initialDelay;\n            _this._count = 0;\n            if (_interval === null)\n                throw \"'interval' must be a valid number.\";\n            if (_interval < 0)\n                throw \"'interval' cannot be negative.\";\n            return _this;\n        }\n        /**\n         * Initializes a new timer and starts it.\n         * @param millisecondInterval\n         * @param maxCount\n         * @param initialDelay\n         * @returns {Timer}\n         */\n        Timer.startNew = function (millisecondInterval, maxCount, initialDelay) {\n            if (maxCount === void 0) { maxCount = Infinity; }\n            if (initialDelay === void 0) { initialDelay = millisecondInterval; }\n            var t = new Timer(millisecondInterval, maxCount, initialDelay);\n            t.start();\n            return t;\n        };\n        Object.defineProperty(Timer.prototype, \"isRunning\", {\n            /**\n             * Returns true if the timer is running.\n             * @returns {boolean}\n             */\n            get: function () {\n                return !!this._cancel;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Timer.prototype, \"count\", {\n            /**\n             * Returns the number of times the timer has ticked (onNext);\n             * @returns {number}\n             */\n            get: function () {\n                return this._count;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Starts the timer.\n         */\n        Timer.prototype.start = function () {\n            var _ = this;\n            _.throwIfDisposed(\"This timer has been disposed and can't be reused.\");\n            if (!_._cancel && _._count < _._maxCount) {\n                // For now, if it's isn't the start...\n                if (_._count || _._initialDelay === _._interval) {\n                    var i_1 = setInterval(Timer._onTick, _._interval, _);\n                    _._cancel = function () {\n                        clearInterval(i_1);\n                    };\n                }\n                else {\n                    var i_2 = setTimeout(Timer._onTick, _._initialDelay, _, true);\n                    _._cancel = function () {\n                        clearTimeout(i_2);\n                    };\n                }\n            }\n        };\n        /**\n         * Stops the timer.  Is the same as cancel.\n         */\n        Timer.prototype.stop = function () {\n            this.cancel();\n        };\n        /**\n         * Stops the timer and resets the count.\n         */\n        Timer.prototype.reset = function () {\n            this.stop();\n            this._count = 0;\n        };\n        /**\n         * Forces the onComplete to propagate and returns the number of times the timer ticked.\n         * @returns {number}\n         */\n        Timer.prototype.complete = function () {\n            this.cancel();\n            this._onCompleted();\n            return this._count;\n        };\n        /**\n         * Cancels the timer and returns true if the timer was running.  Returns false if already cancelled.\n         * @returns {boolean}\n         */\n        Timer.prototype.cancel = function () {\n            if (this._cancel) {\n                this._cancel();\n                this._cancel = null;\n                return true;\n            }\n            return false;\n        };\n        Timer.prototype._onDispose = function () {\n            this.cancel();\n            _super.prototype._onDispose.call(this);\n        };\n        // We use a private static here so there's no need to create a handler every time.\n        Timer._onTick = function (timer, reInitTimer) {\n            var index = timer._count++, max = timer._maxCount, isComplete = timer._count >= max;\n            if (reInitTimer) {\n                timer.cancel();\n                timer.start();\n            }\n            if (isComplete) {\n                timer.stop();\n            }\n            if (index < max) {\n                timer._onNext(index);\n            }\n            if (isComplete) {\n                timer._onCompleted();\n            }\n        };\n        return Timer;\n    }(ObservableBase_1.ObservableBase));\n    exports.default = Timer;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ICancellable} from \"../Threading/ICancellable\";\r\nimport {ObservableBase} from \"../Observable/ObservableBase\";\r\nimport {ITimer} from \"./ITimer\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Closure} from \"../FunctionTypes\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n/**\r\n * A timer class that uses an Observable pattern to allow for subscribing to ticks.\r\n */\r\nexport default class Timer extends ObservableBase<number> implements ITimer, ICancellable\r\n{\r\n\r\n\tprivate _cancel:Closure | null;\r\n\tprivate _count:number = 0;\r\n\r\n\tconstructor(\r\n\t\tprivate _interval:number,\r\n\t\tprivate _maxCount:number = Infinity,\r\n\t\tprivate _initialDelay = _interval)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tif(_interval===null)\r\n\t\t\tthrow \"'interval' must be a valid number.\";\r\n\t\tif(_interval<0)\r\n\t\t\tthrow \"'interval' cannot be negative.\";\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes a new timer and starts it.\r\n\t * @param millisecondInterval\r\n\t * @param maxCount\r\n\t * @param initialDelay\r\n\t * @returns {Timer}\r\n\t */\r\n\tstatic startNew(\r\n\t\tmillisecondInterval:number,\r\n\t\tmaxCount:number = Infinity,\r\n\t\tinitialDelay:number = millisecondInterval):Timer\r\n\t{\r\n\t\tconst t = new Timer(millisecondInterval, maxCount, initialDelay);\r\n\t\tt.start();\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if the timer is running.\r\n\t * @returns {boolean}\r\n\t */\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn !!this._cancel;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of times the timer has ticked (onNext);\r\n\t * @returns {number}\r\n\t */\r\n\tget count():number\r\n\t{\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\t/**\r\n\t * Starts the timer.\r\n\t */\r\n\tstart():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_.throwIfDisposed(\"This timer has been disposed and can't be reused.\");\r\n\t\tif(!_._cancel && _._count<_._maxCount)\r\n\t\t{\r\n\t\t\t// For now, if it's isn't the start...\r\n\t\t\tif(_._count || _._initialDelay===_._interval)\r\n\t\t\t{\r\n\t\t\t\tlet i = setInterval(\r\n\t\t\t\t\tTimer._onTick,\r\n\t\t\t\t\t_._interval,\r\n\t\t\t\t\t_);\r\n\r\n\t\t\t\t_._cancel = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tclearInterval(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tlet i = setTimeout(\r\n\t\t\t\t\tTimer._onTick,\r\n\t\t\t\t\t_._initialDelay,\r\n\t\t\t\t\t_, true);\r\n\r\n\t\t\t\t_._cancel = ()=>\r\n\t\t\t\t{\r\n\t\t\t\t\tclearTimeout(i);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Stops the timer.  Is the same as cancel.\r\n\t */\r\n\tstop():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t}\r\n\r\n\t/**\r\n\t * Stops the timer and resets the count.\r\n\t */\r\n\treset():void\r\n\t{\r\n\t\tthis.stop();\r\n\t\tthis._count = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Forces the onComplete to propagate and returns the number of times the timer ticked.\r\n\t * @returns {number}\r\n\t */\r\n\tcomplete():number\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tthis._onCompleted();\r\n\t\treturn this._count;\r\n\t}\r\n\r\n\t/**\r\n\t * Cancels the timer and returns true if the timer was running.  Returns false if already cancelled.\r\n\t * @returns {boolean}\r\n\t */\r\n\tcancel():boolean\r\n\t{\r\n\t\tif(this._cancel)\r\n\t\t{\r\n\t\t\tthis._cancel();\r\n\t\t\tthis._cancel = null;\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprotected _onDispose():void\r\n\t{\r\n\t\tthis.cancel();\r\n\t\tsuper._onDispose();\r\n\t}\r\n\r\n\t// We use a private static here so there's no need to create a handler every time.\r\n\tprivate static _onTick(\r\n\t\ttimer:Timer,\r\n\t\treInitTimer?:boolean):void\r\n\t{\r\n\t\tconst index      = timer._count++,\r\n\t\t      max        = timer._maxCount,\r\n\t\t      isComplete = timer._count>=max;\r\n\r\n\t\tif(reInitTimer)\r\n\t\t{\r\n\t\t\ttimer.cancel();\r\n\t\t\ttimer.start();\r\n\t\t}\r\n\r\n\t\tif(isComplete)\r\n\t\t{\r\n\t\t\ttimer.stop();\r\n\t\t}\r\n\r\n\t\tif(index<max)\r\n\t\t{\r\n\t\t\ttimer._onNext(index);\r\n\t\t}\r\n\r\n\t\tif(isComplete)\r\n\t\t{\r\n\t\t\ttimer._onCompleted();\r\n\t\t}\r\n\t}\r\n\r\n}"]}