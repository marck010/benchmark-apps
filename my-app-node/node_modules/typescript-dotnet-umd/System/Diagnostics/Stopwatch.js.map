{"version":3,"sources":["System/Diagnostics/Stopwatch.js","System/Diagnostics/Stopwatch.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","getTimestampMilliseconds","Date","getTime","Object","defineProperty","value","TimeSpan_1","Stopwatch","this","reset","prototype","get","_isRunning","enumerable","configurable","startNew","s","start","measure","closure","TimeSpan","_","_startTimeStamp","stop","_elapsed","currentLapMilliseconds","NaN","lap","t","e","zero","timeElapsed","elapsedMilliseconds"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,oBAAqBN,IAExD,SAAUI,EAASF,GAClB,YCLJ,SAAAM,KAEC,OAAO,GAAKC,OAAQC,UDIjBC,OAAOC,eAAeV,EAAS,cAAgBW,OAAO,GCT1D,IAAAC,GAAAV,EAAA,oBAQAW,EAAA,WAkBC,QAAAA,KAECC,KAAKC,QA6FP,MA7GQF,GAAAP,yBAAP,WAEC,MAAOA,MAORG,OAAAC,eAAIG,EAAAG,UAAA,aDCOC,ICDX,WAEC,MAAOH,MAAKI,YDEFC,YAAY,EACZC,cAAc,ICKlBP,EAAAQ,SAAP,WAEC,GAAMC,GAAI,GAAIT,EAEd,OADAS,GAAEC,QACKD,GAGDT,EAAAW,QAAP,SAAeC,GAEd,GAAMF,GAAQjB,GAEd,OADAmB,KACO,GAAIb,GAAAc,SAASpB,IAA6BiB,IAGlDV,EAAAG,UAAAO,MAAA,WAEC,GAAMI,GAAIb,IACNa,GAAET,aAELS,EAAEC,gBAAkBtB,IACpBqB,EAAET,YAAa,IAIjBL,EAAAG,UAAAa,KAAA,WAEC,GAAMF,GAAIb,IACPa,GAAET,aAEJS,EAAEG,UAAYH,EAAEI,uBAChBJ,EAAET,YAAa,IAIjBL,EAAAG,UAAAD,MAAA,WAEC,GAAMY,GAAIb,IACVa,GAAEG,SAAW,EACbH,EAAET,YAAa,EACfS,EAAEC,gBAAkBI,KAKrBnB,EAAAG,UAAAiB,IAAA,WAEC,GAAMN,GAAIb,IACV,IAAGa,EAAET,WACL,CACC,GAAMgB,GAAI5B,IACJgB,EAAIK,EAAEC,gBACNO,EAAID,EAAIZ,CAGd,OAFAK,GAAEC,gBAAkBM,EACpBP,EAAEG,UAAYK,EACP,GAAIvB,GAAAc,SAASS,GAGpB,MAAOvB,GAAAc,SAASU,MAGlB3B,OAAAC,eAAIG,EAAAG,UAAA,0BDjBOC,ICiBX,WAEC,MAAOH,MAAKI,WACRZ,IAA6BQ,KAAKc,gBACnC,GDhBOT,YAAY,EACZC,cAAc,ICkBzBX,OAAAC,eAAIG,EAAAG,UAAA,cDfOC,ICeX,WAEC,MAAOH,MAAKI,WACT,GAAIN,GAAAc,SAASZ,KAAKiB,wBAClBnB,EAAAc,SAASU,MDdFjB,YAAY,EACZC,cAAc,ICgBzBX,OAAAC,eAAIG,EAAAG,UAAA,uBDbOC,ICaX,WAEC,GAAMU,GAAIb,KACNuB,EAAcV,EAAEG,QAKpB,OAHGH,GAAET,aACJmB,GAAeV,EAAEI,wBAEXM,GDdGlB,YAAY,EACZC,cAAc,ICgBzBX,OAAAC,eAAIG,EAAAG,UAAA,WDbOC,ICaX,WAEC,MAAO,IAAIL,GAAAc,SAASZ,KAAKwB,sBDZfnB,YAAY,EACZC,cAAc,ICc1BP,IDVIb,GAAAA,WAAkBa","file":"Stopwatch.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Time/TimeSpan\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var TimeSpan_1 = require(\"../Time/TimeSpan\");\n    function getTimestampMilliseconds() {\n        return (new Date()).getTime();\n    }\n    var Stopwatch = /** @class */ (function () {\n        function Stopwatch() {\n            this.reset();\n        }\n        Stopwatch.getTimestampMilliseconds = function () {\n            return getTimestampMilliseconds();\n        };\n        Object.defineProperty(Stopwatch.prototype, \"isRunning\", {\n            get: function () {\n                return this._isRunning;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Stopwatch.startNew = function () {\n            var s = new Stopwatch();\n            s.start();\n            return s;\n        };\n        Stopwatch.measure = function (closure) {\n            var start = getTimestampMilliseconds();\n            closure();\n            return new TimeSpan_1.TimeSpan(getTimestampMilliseconds() - start);\n        };\n        Stopwatch.prototype.start = function () {\n            var _ = this;\n            if (!_._isRunning) {\n                _._startTimeStamp = getTimestampMilliseconds();\n                _._isRunning = true;\n            }\n        };\n        Stopwatch.prototype.stop = function () {\n            var _ = this;\n            if (_._isRunning) {\n                _._elapsed += _.currentLapMilliseconds;\n                _._isRunning = false;\n            }\n        };\n        Stopwatch.prototype.reset = function () {\n            var _ = this;\n            _._elapsed = 0;\n            _._isRunning = false;\n            _._startTimeStamp = NaN;\n        };\n        // Effectively calls a stop start and continues timing...\n        // Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\n        Stopwatch.prototype.lap = function () {\n            var _ = this;\n            if (_._isRunning) {\n                var t = getTimestampMilliseconds();\n                var s = _._startTimeStamp;\n                var e = t - s;\n                _._startTimeStamp = t;\n                _._elapsed += e;\n                return new TimeSpan_1.TimeSpan(e);\n            }\n            else\n                return TimeSpan_1.TimeSpan.zero;\n        };\n        Object.defineProperty(Stopwatch.prototype, \"currentLapMilliseconds\", {\n            get: function () {\n                return this._isRunning\n                    ? (getTimestampMilliseconds() - this._startTimeStamp)\n                    : 0;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"currentLap\", {\n            get: function () {\n                return this._isRunning\n                    ? new TimeSpan_1.TimeSpan(this.currentLapMilliseconds)\n                    : TimeSpan_1.TimeSpan.zero;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"elapsedMilliseconds\", {\n            get: function () {\n                var _ = this;\n                var timeElapsed = _._elapsed;\n                if (_._isRunning)\n                    timeElapsed += _.currentLapMilliseconds;\n                return timeElapsed;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Stopwatch.prototype, \"elapsed\", {\n            get: function () {\n                return new TimeSpan_1.TimeSpan(this.elapsedMilliseconds);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return Stopwatch;\n    }());\n    exports.default = Stopwatch;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {TimeSpan} from \"../Time/TimeSpan\";\r\nimport {ITimer} from \"../Timers/ITimer\";\r\n\r\nfunction getTimestampMilliseconds():number\r\n{\r\n\treturn (new Date()).getTime();\r\n}\r\n\r\nexport default\r\nclass Stopwatch implements ITimer\r\n{\r\n\r\n\tstatic getTimestampMilliseconds():number\r\n\t{\r\n\t\treturn getTimestampMilliseconds();\r\n\t}\r\n\r\n\tprivate _elapsed:number;\r\n\tprivate _startTimeStamp:number;\r\n\r\n\tprivate _isRunning:boolean;\r\n\tget isRunning():boolean\r\n\t{\r\n\t\treturn this._isRunning;\r\n\t}\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.reset();\r\n\t}\r\n\r\n\tstatic startNew():Stopwatch\r\n\t{\r\n\t\tconst s = new Stopwatch();\r\n\t\ts.start();\r\n\t\treturn s;\r\n\t}\r\n\r\n\tstatic measure(closure:()=>void):TimeSpan\r\n\t{\r\n\t\tconst start = getTimestampMilliseconds();\r\n\t\tclosure();\r\n\t\treturn new TimeSpan(getTimestampMilliseconds() - start);\r\n\t}\r\n\r\n\tstart():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(!_._isRunning)\r\n\t\t{\r\n\t\t\t_._startTimeStamp = getTimestampMilliseconds();\r\n\t\t\t_._isRunning = true;\r\n\t\t}\r\n\t}\r\n\r\n\tstop():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._isRunning)\r\n\t\t{\r\n\t\t\t_._elapsed += _.currentLapMilliseconds;\r\n\t\t\t_._isRunning = false;\r\n\t\t}\r\n\t}\r\n\r\n\treset():void\r\n\t{\r\n\t\tconst _ = this;\r\n\t\t_._elapsed = 0;\r\n\t\t_._isRunning = false;\r\n\t\t_._startTimeStamp = NaN;\r\n\t}\r\n\r\n\t// Effectively calls a stop start and continues timing...\r\n\t// Can also be called to effectively start a lap before calling it again to get the elapsed lap time.\r\n\tlap():TimeSpan\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._isRunning)\r\n\t\t{\r\n\t\t\tconst t = getTimestampMilliseconds();\r\n\t\t\tconst s = _._startTimeStamp;\r\n\t\t\tconst e = t - s;\r\n\t\t\t_._startTimeStamp = t;\r\n\t\t\t_._elapsed += e;\r\n\t\t\treturn new TimeSpan(e);\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn TimeSpan.zero;\r\n\t}\r\n\r\n\tget currentLapMilliseconds():number\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? (getTimestampMilliseconds() - this._startTimeStamp)\r\n\t\t\t: 0;\r\n\t}\r\n\r\n\tget currentLap():TimeSpan\r\n\t{\r\n\t\treturn this._isRunning\r\n\t\t\t? new TimeSpan(this.currentLapMilliseconds)\r\n\t\t\t: TimeSpan.zero;\r\n\t}\r\n\r\n\tget elapsedMilliseconds():number\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet timeElapsed = _._elapsed;\r\n\r\n\t\tif(_._isRunning)\r\n\t\t\ttimeElapsed += _.currentLapMilliseconds;\r\n\r\n\t\treturn timeElapsed;\r\n\t}\r\n\r\n\tget elapsed():TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.elapsedMilliseconds);\r\n\t}\r\n\r\n}\r\n"]}