{"version":3,"sources":["System/Observable/ObservableBase.js","System/Observable/ObservableBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","processAction","observers","handler","observersErrors","_i","observers_1","length","s","ex","push","observer","console","error","message","OBSERVER_ERROR_MESSAGE","errors","Object","defineProperty","value","SubscribableBase_1","extends_1","__extends","ObservableBase","_super","apply","this","arguments","prototype","_onNext","_getSubscribers","onNext","_onError","onError","_onCompleted","_unsubscribeAll","onCompleted","subscribe","subscriber","isFn","call","SubscribableBase"],"mappings":";;;;;;CAMA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,qBAAsB,iBAAkBN,IAE3E,SAAUI,EAASF,GAClB,YC+DJ,SAAAM,GACCC,EACAC,GAEA,GAAID,EAAJ,CAGA,IAAa,GAFTE,GAAwD,KAE/CC,EAAA,EAAAC,EAAAJ,EAAAG,EAAAC,EAAAC,OAAAF,IAAS,CAAlB,GAAIG,GAACF,EAAAD,EAER,KAECF,EAAQK,GAET,MAAMC,GAELL,EAAkBA,MAElBA,EAAgBM,MAAMC,SAAUH,EAAGC,GAAIA,KAMzC,GAFAP,EAAUK,OAAS,EAEhBH,GAAmBA,EAAgBG,OACtC,CACC,IAAGK,UAAWA,QAAQC,MAEjB,MACJC,QAASC,EACTC,OAAQZ,EAHRQ,SAAQC,MAAME,EAAwBX,KDxFrCa,OAAOC,eAAevB,EAAS,cAAgBwB,OAAO,GCT1D,IAAAC,GAAAvB,EAAA,sBAKAwB,EAAAxB,EAAA,iBAEMyB,EAAYD,EAAAA,WAIlBE,EAAA,SAAAC,GAAA,QAAAD,KDOY,MAAkB,QAAXC,GAAmBA,EAAOC,MAAMC,KAAMC,YAAcD,KCiDvE,MAvDQJ,GAAAC,EAAAC,GAGGD,EAAAK,UAAAC,QAAV,SAAkBV,GAEjBlB,EACCyB,KAAKI,kBACL,SAAAtB,GAAOA,EAAEuB,QAAUvB,EAAEuB,OAAOZ,MAIpBI,EAAAK,UAAAI,SAAV,SAAmBnB,GAElBZ,EACCyB,KAAKI,kBACL,SAAAtB,GAAOA,EAAEyB,SAAWzB,EAAEyB,QAAQpB,MAItBU,EAAAK,UAAAM,aAAV,WAECjC,EACCyB,KAAKS,iBAAgB,GACrB,SAAA3B,GAAOA,EAAE4B,aAAe5B,EAAE4B,iBAS5Bb,EAAAK,UAAAS,UAAA,SACCC,EACAL,EACAG,GAEA,GAAI5B,GACA+B,EAA0B,kBAAZD,EAClB,IAAGL,GAAWG,GAAeG,EAC7B,CACC,GAAGD,IAAeC,EAAM,KAAM,0BAC9B/B,IACCuB,OAAmBO,EACnBL,QAASA,EACTG,YAAaA,OAKd5B,GAAkB8B,CAGnB,OAAOd,GAAAI,UAAMS,UAASG,KAAAd,KAAClB,IAEzBe,GAvDQH,EAAAqB,iBADc9C,GAAA4B,eAAAA,CA0DtB,IAAMR,GAAgC,uEAqCtCpB,GAAAA,WAAe4B","file":"ObservableBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * C# Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./SubscribableBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var SubscribableBase_1 = require(\"./SubscribableBase\");\n    var extends_1 = require(\"../../extends\");\n    //noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    // Can be used as a base class, mixin, or simply reference on how to implement the pattern.\n    var ObservableBase = /** @class */ (function (_super) {\n        __extends(ObservableBase, _super);\n        function ObservableBase() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        ObservableBase.prototype._onNext = function (value) {\n            processAction(this._getSubscribers(), function (s) { s.onNext && s.onNext(value); });\n        };\n        ObservableBase.prototype._onError = function (error) {\n            processAction(this._getSubscribers(), function (s) { s.onError && s.onError(error); });\n        };\n        ObservableBase.prototype._onCompleted = function () {\n            processAction(this._unsubscribeAll(true), function (s) { s.onCompleted && s.onCompleted(); });\n        };\n        ObservableBase.prototype.subscribe = function (subscriber, onError, onCompleted) {\n            var s;\n            var isFn = typeof subscriber == 'function';\n            if (onError || onCompleted || isFn) {\n                if (subscriber && !isFn)\n                    throw \"Invalid subscriber type.\";\n                s = {\n                    onNext: subscriber,\n                    onError: onError,\n                    onCompleted: onCompleted\n                };\n            }\n            else {\n                s = subscriber;\n            }\n            return _super.prototype.subscribe.call(this, s);\n        };\n        return ObservableBase;\n    }(SubscribableBase_1.SubscribableBase));\n    exports.ObservableBase = ObservableBase;\n    var OBSERVER_ERROR_MESSAGE = 'One or more observers had errors when attempting to pass information.';\n    function processAction(observers, handler) {\n        if (!observers)\n            return;\n        var observersErrors = null;\n        for (var _i = 0, observers_1 = observers; _i < observers_1.length; _i++) {\n            var s = observers_1[_i];\n            try {\n                handler(s);\n            }\n            catch (ex) {\n                observersErrors = observersErrors || [];\n                // Don't let one error prevent others from recieving information.\n                observersErrors.push({ observer: s, ex: ex });\n            }\n        }\n        observers.length = 0;\n        if (observersErrors && observersErrors.length) {\n            if (console && console.error)\n                console.error(OBSERVER_ERROR_MESSAGE, observersErrors);\n            else\n                throw {\n                    message: OBSERVER_ERROR_MESSAGE,\n                    errors: observersErrors\n                };\n        }\n    }\n    exports.default = ObservableBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * C# Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\nimport {SubscribableBase} from \"./SubscribableBase\";\r\nimport {IObservable} from \"./IObservable\";\r\nimport {IObserver} from \"./IObserver\";\r\nimport {IDisposable} from \"../Disposable/IDisposable\";\r\nimport {Action, Closure} from \"../FunctionTypes\";\r\nimport __extendsImport from \"../../extends\";\r\n//noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\n\r\nexport abstract class ObservableBase<T>\r\nextends SubscribableBase<IObserver<T>> implements IObservable<T>\r\n{\r\n\r\n\tprotected _onNext(value:T):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onNext && s.onNext(value); }\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onError(error:any):void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._getSubscribers(),\r\n\t\t\ts => { s.onError && s.onError(error); }\r\n\t\t);\r\n\t}\r\n\r\n\tprotected _onCompleted():void\r\n\t{\r\n\t\tprocessAction(\r\n\t\t\tthis._unsubscribeAll(true),\r\n\t\t\ts => { s.onCompleted && s.onCompleted(); }\r\n\t\t);\r\n\t}\r\n\r\n\tsubscribe(subscriber:IObserver<T>):IDisposable\r\n\tsubscribe(\r\n\t\tsubscriber:Action<T>,\r\n\t\tonError?:Action<any>,\r\n\t\tonCompleted?:Closure):IDisposable\r\n\tsubscribe(\r\n\t\tsubscriber:IObserver<T> | Action<T>,\r\n\t\tonError?:Action<any>,\r\n\t\tonCompleted?:Closure):IDisposable\r\n\t{\r\n\t\tlet s:IObserver<T>;\r\n\t\tlet isFn = typeof subscriber=='function';\r\n\t\tif(onError || onCompleted || isFn)\r\n\t\t{\r\n\t\t\tif(subscriber && !isFn) throw \"Invalid subscriber type.\";\r\n\t\t\ts = {\r\n\t\t\t\tonNext: <Action<T>>subscriber,\r\n\t\t\t\tonError: onError,\r\n\t\t\t\tonCompleted: onCompleted\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\ts = <IObserver<T>>subscriber;\r\n\t\t}\r\n\r\n\t\treturn super.subscribe(s);\r\n\t}\r\n}\r\n\r\nconst OBSERVER_ERROR_MESSAGE:string = 'One or more observers had errors when attempting to pass information.';\r\n\r\nfunction processAction<T>(\r\n\tobservers:IObserver<T>[]|null,\r\n\thandler:(s:IObserver<T>)=>void)\r\n{\r\n\tif(!observers) return;\r\n\tlet observersErrors:{observer:IObserver<T>,ex:any}[]|null = null;\r\n\r\n\tfor(let s of observers)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\thandler(s);\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tobserversErrors = observersErrors || [];\r\n\t\t\t// Don't let one error prevent others from recieving information.\r\n\t\t\tobserversErrors.push({observer: s, ex: ex});\r\n\t\t}\r\n\t}\r\n\r\n\tobservers.length = 0;\r\n\r\n\tif(observersErrors && observersErrors.length)\r\n\t{\r\n\t\tif(console && console.error)\r\n\t\t\tconsole.error(OBSERVER_ERROR_MESSAGE, observersErrors);\r\n\t\telse throw {\r\n\t\t\tmessage: OBSERVER_ERROR_MESSAGE,\r\n\t\t\terrors: observersErrors\r\n\t\t};\r\n\t}\r\n\r\n}\r\n\r\nexport default ObservableBase;"]}