{"version":3,"sources":["System/Observable/Subscription.js","System/Observable/Subscription.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Subscription","_subscribable","_subscriber","this","prototype","get","enumerable","configurable","dispose","subscriber","subscribable","unsubscribe"],"mappings":";;;;;;CAMA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCH1D,IAAAC,GAAA,WAEC,QAAAA,GACSC,EACAC,GAER,GAHQC,KAAAF,cAAAA,EACAE,KAAAD,YAAAA,GAEJD,IAAkBC,EACrB,KAAM,8CAiDT,MA9CCL,QAAAC,eAAIE,EAAAI,UAAA,cDKOC,ICLX,WAEC,MAAOF,MAAKD,aDMFI,YAAY,EACZC,cAAc,ICWzBV,OAAAC,eAAIE,EAAAI,UAAA,eDMOC,ICNX,WAEC,OAAQF,KAAKF,gBAAkBE,KAAKD,aDO1BI,YAAY,EACZC,cAAc,ICLzBP,EAAAI,UAAAI,QAAA,WAEC,GAAMC,GAAaN,KAAKM,WAClBC,EAAeP,KAAKF,aAG1BE,MAAKF,cAAqB,IAE1B,KAEIQ,GAAcC,GAEhBA,EAAaC,YAAYF,GDKjB,QCCTN,KAAKD,YAAmB,OAG3BF,IAxDaT,GAAAS,aAAAA,EA0DbT,EAAAA,WAAeS","file":"Subscription.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    /**\n     * A registration that an IObservable returns that can be disposed in order to cancel sending data to the observer.\n     */\n    var Subscription = /** @class */ (function () {\n        function Subscription(_subscribable, _subscriber) {\n            this._subscribable = _subscribable;\n            this._subscriber = _subscriber;\n            if (!_subscribable || !_subscriber)\n                throw 'Subscribable and subscriber cannot be null.';\n        }\n        Object.defineProperty(Subscription.prototype, \"subscriber\", {\n            get: function () {\n                return this._subscriber;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(Subscription.prototype, \"wasDisposed\", {\n            /*\n             In the case where we could possibly have the following happen:\n        \r\n             var u = observable.subscribe(observer);\n        \r\n             ...\n        \r\n             u.dispose(); // Should only be allowed to unsubscribe once and then it's useless.\n        \r\n             // Resubscribing creates a new instance.\n             var x = observable.subscribe(observer);\n        \r\n             u.dispose(); // Calling this again should do nothing and 'x' should still work.\n             */\n            get: function () {\n                return !this._subscribable || !this._subscriber;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Subscription.prototype.dispose = function () {\n            var subscriber = this.subscriber;\n            var subscribable = this._subscribable;\n            // Release this reference.  It will prevent potential unwanted recursion.\n            this._subscribable = null;\n            try {\n                if (subscriber && subscribable) {\n                    subscribable.unsubscribe(subscriber);\n                }\n            }\n            finally {\n                // Keep this reference until the end so it can be identified by the list.\n                this._subscriber = null;\n            }\n        };\n        return Subscription;\n    }());\n    exports.Subscription = Subscription;\n    exports.default = Subscription;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\nimport {IDisposableAware} from \"../Disposable/IDisposableAware\";\r\nimport {ISubscribable} from \"./ISubscribable\"; // For compatibility with (let, const, function, class);\r\n\r\n/**\r\n * A registration that an IObservable returns that can be disposed in order to cancel sending data to the observer.\r\n */\r\nexport class Subscription<T> implements IDisposableAware\r\n{\r\n\tconstructor(\r\n\t\tprivate _subscribable:ISubscribable<T>,\r\n\t\tprivate _subscriber:T)\r\n\t{\r\n\t\tif(!_subscribable || !_subscriber)\r\n\t\t\tthrow 'Subscribable and subscriber cannot be null.';\r\n\t}\r\n\r\n\tget subscriber():T\r\n\t{\r\n\t\treturn this._subscriber;\r\n\t}\r\n\r\n\t/*\r\n\t In the case where we could possibly have the following happen:\r\n\r\n\t var u = observable.subscribe(observer);\r\n\r\n\t ...\r\n\r\n\t u.dispose(); // Should only be allowed to unsubscribe once and then it's useless.\r\n\r\n\t // Resubscribing creates a new instance.\r\n\t var x = observable.subscribe(observer);\r\n\r\n\t u.dispose(); // Calling this again should do nothing and 'x' should still work.\r\n\t */\r\n\r\n\tget wasDisposed():boolean\r\n\t{\r\n\t\treturn !this._subscribable || !this._subscriber;\r\n\t}\r\n\r\n\tdispose():void\r\n\t{\r\n\t\tconst subscriber = this.subscriber;\r\n\t\tconst subscribable = this._subscribable;\r\n\r\n\t\t// Release this reference.  It will prevent potential unwanted recursion.\r\n\t\tthis._subscribable = <any>null;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(subscriber && subscribable)\r\n\t\t\t{\r\n\t\t\t\tsubscribable.unsubscribe(subscriber);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfinally\r\n\t\t{\r\n\t\t\t// Keep this reference until the end so it can be identified by the list.\r\n\t\t\tthis._subscriber = <any>null;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Subscription;\r\n"]}