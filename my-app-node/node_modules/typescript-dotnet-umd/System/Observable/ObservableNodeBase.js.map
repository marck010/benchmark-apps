{"version":3,"sources":["System/Observable/ObservableNodeBase.js","System/Observable/ObservableNodeBase.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","ObservableBase_1","extends_1","__extends","ObservableNodeBase","_super","apply","this","arguments","prototype","onNext","_onNext","onError","error","_onError","onCompleted","_onCompleted"],"mappings":";;;;;;CAMA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,mBAAoB,iBAAkBN,IAEzE,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCR1D,IAAAC,GAAAP,EAAA,oBAEAQ,EAAAR,EAAA,iBAEMS,EAAYD,EAAAA,WAElBE,EAAA,SAAAC,GAAA,QAAAD,KDWY,MAAkB,QAAXC,GAAmBA,EAAOC,MAAMC,KAAMC,YAAcD,KCOvE,MAjBQJ,GAAAC,EAAAC,GAGPD,EAAAK,UAAAC,OAAA,SAAOV,GAENO,KAAKI,QAAQX,IAGdI,EAAAK,UAAAG,QAAA,SAAQC,GAEPN,KAAKO,SAASD,IAGfT,EAAAK,UAAAM,YAAA,WAECR,KAAKS,gBAEPZ,GAjBQH,EAAAA,WADKT,GAAAY,mBAAAA,EAoBbZ,EAAAA,WAAeY","file":"ObservableNodeBase.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based upon .NET source.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./ObservableBase\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    // Can be used as a base class, mixin, or simply reference on how to implement the pattern.\n    var ObservableBase_1 = require(\"./ObservableBase\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var ObservableNodeBase = /** @class */ (function (_super) {\n        __extends(ObservableNodeBase, _super);\n        function ObservableNodeBase() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        ObservableNodeBase.prototype.onNext = function (value) {\n            this._onNext(value);\n        };\n        ObservableNodeBase.prototype.onError = function (error) {\n            this._onError(error);\n        };\n        ObservableNodeBase.prototype.onCompleted = function () {\n            this._onCompleted();\n        };\n        return ObservableNodeBase;\n    }(ObservableBase_1.default));\n    exports.ObservableNodeBase = ObservableNodeBase;\n    exports.default = ObservableNodeBase;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based upon .NET source.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Source: http://referencesource.microsoft.com/#mscorlib/system/IObserver.cs\r\n */\r\n\r\n// Can be used as a base class, mixin, or simply reference on how to implement the pattern.\r\nimport ObservableBase from \"./ObservableBase\";\r\nimport {IObserver} from \"./IObserver\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nexport class ObservableNodeBase<T>\r\nextends ObservableBase<T> implements IObserver<T>\r\n{\r\n\r\n\tonNext(value:T):void\r\n\t{\r\n\t\tthis._onNext(value);\r\n\t}\r\n\r\n\tonError(error:any):void\r\n\t{\r\n\t\tthis._onError(error);\r\n\t}\r\n\r\n\tonCompleted():void\r\n\t{\r\n\t\tthis._onCompleted();\r\n\t}\r\n}\r\n\r\nexport default ObservableNodeBase;"]}