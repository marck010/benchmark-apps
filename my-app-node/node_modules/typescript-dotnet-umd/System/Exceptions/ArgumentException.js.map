{"version":3,"sources":["System/Exceptions/ArgumentException.js","System/Exceptions/ArgumentException.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","SystemException_1","Utility_1","extends_1","__extends","NAME","ArgumentException","_super","paramName","message","innerException","beforeSealing","_this","this","pn","call","trim","_","prototype","getName","SystemException"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,oBAAqB,kBAAmB,iBAAkBN,IAE7F,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCT1D,IAAAC,GAAAP,EAAA,qBACAQ,EAAAR,EAAA,mBACAS,EAAAT,EAAA,iBAEMU,EAAYD,EAAAA,WAEZE,EAAc,oBAIpBC,EAAA,SAAAC,GAMC,QAAAD,GACCE,EACAC,EACAC,EACAC,GAJD,GAAAC,GAAAC,KAMKC,EAAKN,EAAa,IAAMA,EAAY,KAAQ,EDKtC,OCJVI,GAAAL,EAAAQ,KAAAF,KAAMX,EAAAc,KAAKF,GAAML,GAAW,KAAMC,EAAgB,SAACO,GAElDA,EAAET,UAAYA,EACXG,GAAeA,EAAcM,MAC/BJ,KASJ,MA1BuCT,GAAAE,EAAAC,GAqB5BD,EAAAY,UAAAC,QAAV,WAEC,MAAOd,IAGTC,GA1BuCL,EAAAmB,gBAA1B5B,GAAAc,kBAAAA,EA4Bbd,EAAAA,WAAec","file":"ArgumentException.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./SystemException\", \"../Text/Utility\", \"../../extends\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var SystemException_1 = require(\"./SystemException\");\n    var Utility_1 = require(\"../Text/Utility\");\n    var extends_1 = require(\"../../extends\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    var NAME = 'ArgumentException';\n    var ArgumentException = /** @class */ (function (_super) {\n        __extends(ArgumentException, _super);\n        // For simplicity and consistency, lets stick with 1 signature.\n        function ArgumentException(paramName, message, innerException, beforeSealing) {\n            var _this = this;\n            var pn = paramName ? ('{' + paramName + '} ') : '';\n            _this = _super.call(this, Utility_1.trim(pn + (message || '')), innerException, function (_) {\n                _.paramName = paramName;\n                if (beforeSealing)\n                    beforeSealing(_);\n            }) || this;\n            return _this;\n        }\n        ArgumentException.prototype.getName = function () {\n            return NAME;\n        };\n        return ArgumentException;\n    }(SystemException_1.SystemException));\n    exports.ArgumentException = ArgumentException;\n    exports.default = ArgumentException;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based upon: https://msdn.microsoft.com/en-us/library/System.Exception%28v=vs.110%29.aspx\r\n */\r\n\r\nimport {Error, SystemException} from \"./SystemException\";\r\nimport {trim} from \"../Text/Utility\";\r\nimport __extendsImport from \"../../extends\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\nconst NAME:string = 'ArgumentException';\r\n\r\nexport {Error};\r\n\r\nexport class ArgumentException extends SystemException\r\n{\r\n\r\n\tparamName:string;\r\n\r\n\t// For simplicity and consistency, lets stick with 1 signature.\r\n\tconstructor(\r\n\t\tparamName:string,\r\n\t\tmessage?:string,\r\n\t\tinnerException?:Error,\r\n\t\tbeforeSealing?:(ex:any)=>void)\r\n\t{\r\n\t\tlet pn = paramName ? ('{' + paramName + '} ') : '';\r\n\t\tsuper(trim(pn + (message || '')), innerException, (_)=>\r\n\t\t{\r\n\t\t\t_.paramName = paramName;\r\n\t\t\tif(beforeSealing) beforeSealing(_);\r\n\t\t});\r\n\t}\r\n\r\n\r\n\tprotected getName():string\r\n\t{\r\n\t\treturn NAME;\r\n\t}\r\n\r\n}\r\n\r\nexport default ArgumentException;"]}