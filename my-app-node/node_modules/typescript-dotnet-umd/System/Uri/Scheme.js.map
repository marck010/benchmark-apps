{"version":3,"sources":["System/Uri/Scheme.js","System/Uri/Scheme.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Scheme","isValid","scheme","All","indexOf","File","FTP","GOPHER","HTTP","HTTPS","LDAP","MAILTO","PIPE","TCP","NEWS","NNTP","TELNET","UUID","freeze"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCP1D,IAAcC,IAAd,SAAcA,GAsFb,QAAAC,GAAwBC,GAEvB,MAAOF,GAAAG,IAAIC,QAAaF,OAnFZF,EAAAK,KAAwB,OAMxBL,EAAAM,IAAsB,MAMtBN,EAAAO,OAA4B,SAM5BP,EAAAQ,KAAwB,OAMxBR,EAAAS,MAA0B,QAM1BT,EAAAU,KAAwB,OAMxBV,EAAAW,OAA4B,SAM5BX,EAAAY,KAAwB,WAMxBZ,EAAAa,IAAsB,UAMtBb,EAAAc,KAAwB,OAMxBd,EAAAe,KAAwB,OAMxBf,EAAAgB,OAA4B,SAK5BhB,EAAAiB,KAAwB,OAMxBjB,EAAAG,IAAMN,OAAOqB,QACzBlB,EAAAK,KAAML,EAAAM,IAAKN,EAAAO,OAAQP,EAAAQ,KAAMR,EAAAS,MAAOT,EAAAU,KAAMV,EAAAW,OAAQX,EAAAY,KAAMZ,EAAAa,IAAKb,EAAAc,KAAMd,EAAAe,KAAMf,EAAAgB,OAAQhB,EAAAiB,OAG9DjB,EAAAC,QAAOA,GAtFVD,EAAAT,EAAAS,SAAAT,EAAAS,YA6FdH,OAAOqB,OAAOlB,GAEdT,EAAAA,WAAeS","file":"Scheme.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n * Based on: https://msdn.microsoft.com/en-us/library/system.uri.scheme%28v=vs.110%29.aspx\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Scheme;\n    (function (Scheme) {\n        /**\n         * The resource is a file on the local computer.\n         */\n        Scheme.File = \"file\";\n        /**\n         * The resource is accessed through FTP.\n         */\n        Scheme.FTP = \"ftp\";\n        /**\n         * The resource is accessed through the Gopher protocol.\n         */\n        Scheme.GOPHER = \"gopher\";\n        /**\n         * The resource is accessed through HTTP.\n         */\n        Scheme.HTTP = \"http\";\n        /**\n         * The resource is accessed through SSL-encrypted HTTP.\n         */\n        Scheme.HTTPS = \"https\";\n        /**\n         * The resource is accessed through the LDAP protocol.\n         */\n        Scheme.LDAP = \"ldap\";\n        /**\n         * The resource is an e-mail address and accessed through the SMTP protocol.\n         */\n        Scheme.MAILTO = \"mailto\";\n        /**\n         * The resource is accessed through a named pipe.\n         */\n        Scheme.PIPE = \"net.pipe\";\n        /**\n         * The resource is accessed from TCP endpoint.\n         */\n        Scheme.TCP = \"net.tcp\";\n        /**\n         * The resource is accessed through the NNTP protocol.\n         */\n        Scheme.NEWS = \"news\";\n        /**\n         * The resource is accessed through the NNTP protocol.\n         */\n        Scheme.NNTP = \"nntp\";\n        /**\n         * The resource is accessed through the TELNET protocol.\n         */\n        Scheme.TELNET = \"telnet\";\n        /**\n         * The resource is accessed through a unique UUID endpoint name for communicating with a service.\n         */\n        Scheme.UUID = \"uuid\";\n        /**\n         * An index of possible values to validate against.\n         * @type {Array}\n         */\n        Scheme.All = Object.freeze([\n            Scheme.File, Scheme.FTP, Scheme.GOPHER, Scheme.HTTP, Scheme.HTTPS, Scheme.LDAP, Scheme.MAILTO, Scheme.PIPE, Scheme.TCP, Scheme.NEWS, Scheme.NNTP, Scheme.TELNET, Scheme.UUID\n        ]);\n        function isValid(scheme) {\n            return Scheme.All.indexOf(scheme) != -1;\n        }\n        Scheme.isValid = isValid;\n    })(Scheme = exports.Scheme || (exports.Scheme = {}));\n    Object.freeze(Scheme);\n    exports.default = Scheme;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n * Based on: https://msdn.microsoft.com/en-us/library/system.uri.scheme%28v=vs.110%29.aspx\r\n */\r\n\r\nimport {SchemeValue} from \"./SchemeValue\";\r\n\r\nexport module Scheme {\r\n\r\n\t/**\r\n\t * The resource is a file on the local computer.\r\n\t */\r\n\texport const File:SchemeValue.File = \"file\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through FTP.\r\n\t */\r\n\texport const FTP:SchemeValue.FTP = \"ftp\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through the Gopher protocol.\r\n\t */\r\n\texport const GOPHER:SchemeValue.Gopher = \"gopher\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through HTTP.\r\n\t */\r\n\texport const HTTP:SchemeValue.HTTP = \"http\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through SSL-encrypted HTTP.\r\n\t */\r\n\texport const HTTPS:SchemeValue.HTTPS = \"https\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through the LDAP protocol.\r\n\t */\r\n\texport const LDAP:SchemeValue.LDAP = \"ldap\";\r\n\r\n\r\n\t/**\r\n\t * The resource is an e-mail address and accessed through the SMTP protocol.\r\n\t */\r\n\texport const MAILTO:SchemeValue.MailTo = \"mailto\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through a named pipe.\r\n\t */\r\n\texport const PIPE:SchemeValue.Pipe = \"net.pipe\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed from TCP endpoint.\r\n\t */\r\n\texport const TCP:SchemeValue.TCP = \"net.tcp\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through the NNTP protocol.\r\n\t */\r\n\texport const NEWS:SchemeValue.NNTP = \"news\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through the NNTP protocol.\r\n\t */\r\n\texport const NNTP:SchemeValue.NNTP = \"nntp\";\r\n\r\n\r\n\t/**\r\n\t * The resource is accessed through the TELNET protocol.\r\n\t */\r\n\texport const TELNET:SchemeValue.Telnet = \"telnet\";\r\n\r\n\t/**\r\n\t * The resource is accessed through a unique UUID endpoint name for communicating with a service.\r\n\t */\r\n\texport const UUID:SchemeValue.UUID = \"uuid\";\r\n\r\n\t/**\r\n\t * An index of possible values to validate against.\r\n\t * @type {Array}\r\n\t */\r\n\texport const All = Object.freeze([\r\n\t\tFile, FTP, GOPHER, HTTP, HTTPS, LDAP, MAILTO, PIPE, TCP, NEWS, NNTP, TELNET, UUID\r\n\t]);\r\n\r\n\texport function isValid(scheme:string):scheme is SchemeValue.Any\r\n\t{\r\n\t\treturn All.indexOf(<any>scheme)!= -1;\r\n\t}\r\n\r\n}\r\n\r\nObject.freeze(Scheme);\r\n\r\nexport default Scheme;"]}