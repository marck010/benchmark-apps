{"version":3,"sources":["System/Utility/applyMixins.js","System/Utility/applyMixins.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","applyMixins","derivedConstructor","baseConstructors","forEach","bc","Object","getOwnPropertyNames","prototype","name","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YCRJ,SAAAM,GAAoCC,EAAwBC,GAE3DA,EACEC,QACA,SAAAC,GAECC,OAAOC,oBAAoBF,EAAGG,WAAWJ,QACxC,SAAAK,GAECP,EAAmBM,UAAUC,GAAQJ,EAAGG,UAAUC,ODApDH,OAAOI,eAAef,EAAS,cAAgBgB,OAAO,ICT1DhB,EAAAA,WAAAM","file":"applyMixins.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    function applyMixins(derivedConstructor, baseConstructors) {\n        baseConstructors\n            .forEach(function (bc) {\n            Object.getOwnPropertyNames(bc.prototype).forEach(function (name) {\n                derivedConstructor.prototype[name] = bc.prototype[name];\n            });\n        });\n    }\n    exports.default = applyMixins;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nexport default function applyMixins(derivedConstructor:any, baseConstructors:any[]):void\r\n{\r\n\tbaseConstructors\r\n\t\t.forEach(\r\n\t\t\tbc =>\r\n\t\t\t{\r\n\t\t\t\tObject.getOwnPropertyNames(bc.prototype).forEach(\r\n\t\t\t\t\tname =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tderivedConstructor.prototype[name] = bc.prototype[name];\r\n\t\t\t\t\t}\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t);\r\n}\r\n"]}