{"version":3,"sources":["System/Utility/clone.js","System/Utility/clone.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","clone","source","depth","Types_1","Type","isObject","isArrayLike","result","copy_1","copy","len","length","i","k","Object","defineProperty","value"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,6BAA8BN,IAE7E,SAAUI,EAASF,GAClB,YCHJ,SAAAM,GAA8BC,EAAwCC,GAErE,GAFqE,SAAAA,IAAAA,EAAA,GAElEA,EAAM,EACR,MAAOD,EAGR,KAAIE,EAAAC,KAAKC,SAASJ,GACjB,MAAOA,EAER,IAAGE,EAAAC,KAAKE,YAAYL,GACpB,CAEC,GAAMM,GAASC,EAAAC,KAAKR,EACpB,IAAGC,EAAM,EAGR,IAAI,GADEQ,GAAMT,EAAOU,OACXC,EAAI,EAAGA,EAAEF,EAAKE,IAErBL,EAAOK,GAAKZ,EAAMO,EAAOK,GAAIV,EAAQ,EAGvC,OAAOK,GAIP,GAAMA,KACN,IAAGL,EAAM,EAAG,IAAI,GAAIW,KAAUZ,GAG7BM,EAAOM,GAAKb,EAAYC,EAAQY,GAAIX,EAAQ,EAE7C,OAAOK,GD3BLO,OAAOC,eAAerB,EAAS,cAAgBsB,OAAO,GCT1D,IAAAb,GAAAP,EAAA,YAGAY,EAAAZ,EAAA,4BAEAF,GAAAA,WAAAM","file":"clone.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"../Collections/Array/copy\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Types_1 = require(\"../Types\");\n    var copy_1 = require(\"../Collections/Array/copy\");\n    function clone(source, depth) {\n        if (depth === void 0) { depth = 0; }\n        if (depth < 0)\n            return source;\n        // return primitives as is.\n        if (!Types_1.Type.isObject(source))\n            return source;\n        if (Types_1.Type.isArrayLike(source)) {\n            // Make a copy first just in case there's some weird references.\n            var result = copy_1.copy(source);\n            if (depth > 0) {\n                var len = source.length;\n                for (var i = 0; i < len; i++) {\n                    result[i] = clone(result[i], depth - 1);\n                }\n            }\n            return result;\n        }\n        else {\n            var result = {};\n            if (depth > 0)\n                for (var k in source) {\n                    //noinspection JSUnfilteredForInLoop\n                    result[k] = clone(source[k], depth - 1);\n                }\n            return result;\n        }\n    }\n    exports.default = clone;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {Primitive} from \"../Primitive\";\r\nimport {JsonArray, JsonMap} from \"../../JSON\";\r\nimport {copy} from \"../Collections/Array/copy\";\r\n\r\nexport default function clone(source:Primitive | JsonMap | JsonArray, depth:number = 0):any\r\n{\r\n\tif(depth<0)\r\n\t\treturn source;\r\n\r\n\t// return primitives as is.\r\n\tif(!Type.isObject(source))\r\n\t\treturn source;\r\n\r\n\tif(Type.isArrayLike(source))\r\n\t{\r\n\t\t// Make a copy first just in case there's some weird references.\r\n\t\tconst result = copy(source);\r\n\t\tif(depth>0)\r\n\t\t{\r\n\t\t\tconst len = source.length;\r\n\t\t\tfor(let i = 0; i<len; i++)\r\n\t\t\t{\r\n\t\t\t\tresult[i] = clone(result[i], depth - 1);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tconst result:any = {};\r\n\t\tif(depth>0) for(let k in <any>source)\r\n\t\t{\r\n\t\t\t//noinspection JSUnfilteredForInLoop\r\n\t\t\tresult[k] = clone((<any>source)[k], depth - 1);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\r\n}\r\n"]}