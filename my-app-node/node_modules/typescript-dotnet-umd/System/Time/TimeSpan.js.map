{"version":3,"sources":["System/Time/TimeSpan.js","System/Time/TimeSpan.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Types_1","TimeUnit_1","ClockTime_1","TimeQuantity_1","extends_1","Lazy_1","__extends","TimeSpan","_super","units","TimeUnit","Milliseconds","_this","this","ms","toMilliseconds","call","ticks","milliseconds","seconds","minutes","hours","days","_time","Lazy","create","ClockTime","getTotalMilliseconds","freeze","prototype","get","enumerable","configurable","add","other","Type","isNumber","Error","total","addUnit","from","fromDays","Days","fromHours","Hours","fromMinutes","Minutes","fromSeconds","Seconds","fromMilliseconds","fromTicks","Ticks","timeSpanZero","TimeQuantity"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,WAAY,aAAc,cAAe,iBAAkB,gBAAiB,WAAYN,IAE3H,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCT1D,IAAAC,GAAAP,EAAA,YACAQ,EAAAR,EAAA,cACAS,EAAAT,EAAA,eACAU,EAAAV,EAAA,kBAIAW,EAAAX,EAAA,iBACAY,EAAAZ,EAAA,WAEMa,EAAYF,EAAAA,WAMlBG,EAAA,SAAAC,GAiCC,QAAAD,GAAYR,EAAcU,GAAA,SAAAA,IAAAA,EAAiBR,EAAAS,SAASC,aAApD,IAAAC,GAAAC,KAEOC,EAAKb,EAAAS,SAASK,eAAehB,EAAOU,EDdhC,OCeVG,GAAAJ,EAAAQ,KAAAH,KAAMC,IAAGD,KAETD,EAAKK,MAAU,IAAFH,EACbF,EAAKM,aAAeJ,EACpBF,EAAKO,QAAUL,EAAE,IACjBF,EAAKQ,QAAUN,EAAE,IACjBF,EAAKS,MAAQP,EAAE,KACfF,EAAKU,KAAOR,EAAE,MAEdF,EAAKW,MAAQlB,EAAAmB,KAAKC,OAAO,WAAK,MAAA,IAAIvB,GAAAwB,UAAUd,EAAKe,0BAEjD9B,OAAO+B,OAAOhB,GD1BGA,ECsGnB,MA3H8BN,GAAAC,EAAAC,GAsD7BX,OAAAC,eAAIS,EAAAsB,UAAA,SD1BOC,IC0BX,WAEC,MAAOjB,ODzBGkB,YAAY,EACZC,cAAc,IC6BzBnC,OAAAC,eAAIS,EAAAsB,UAAA,QDzBOC,ICyBX,WAEC,MAAOjB,MAAKU,MAAMxB,ODxBRgC,YAAY,EACZC,cAAc,IC0BzBzB,EAAAsB,UAAAI,IAAA,SAAIC,GAEH,GAAGlC,EAAAmC,KAAKC,SAASF,GAChB,KAAM,IAAIG,OACT,yKAIF,OAAO,IAAI9B,GAASM,KAAKc,uBAAyBO,EAAMI,MAAMpB,eAG/DX,EAAAsB,UAAAU,QAAA,SAAQxC,EAAcU,GAErB,MAFqB,UAAAA,IAAAA,EAAiBR,EAAAS,SAASC,cAExC,GAAIJ,GAASM,KAAKc,uBAAyB1B,EAAAS,SAASK,eAAehB,EAAOU,KAI3EF,EAAAiC,KAAP,SAAYzC,EAAcU,GAEzB,MAAO,IAAIF,GAASR,EAAOU,IAGrBF,EAAAkC,SAAP,SAAgB1C,GAEf,MAAO,IAAIQ,GAASR,EAAOE,EAAAS,SAASgC,OAG9BnC,EAAAoC,UAAP,SAAiB5C,GAEhB,MAAO,IAAIQ,GAASR,EAAOE,EAAAS,SAASkC,QAG9BrC,EAAAsC,YAAP,SAAmB9C,GAElB,MAAO,IAAIQ,GAASR,EAAOE,EAAAS,SAASoC,UAG9BvC,EAAAwC,YAAP,SAAmBhD,GAElB,MAAO,IAAIQ,GAASR,EAAOE,EAAAS,SAASsC,UAG9BzC,EAAA0C,iBAAP,SAAwBlD,GAEvB,MAAO,IAAIQ,GAASR,EAAOE,EAAAS,SAASC,eAG9BJ,EAAA2C,UAAP,SAAiBnD,GAEhB,MAAO,IAAIQ,GAASR,EAAOE,EAAAS,SAASyC,QAIrCtD,OAAAC,eAAWS,EAAA,QD7CAuB,IC6CX,WAEC,MAAOsB,KAAiBA,EAAe,GAAI7C,GAAS,KD5C1CwB,YAAY,EACZC,cAAc,IC6C1BzB,GA3H8BJ,EAAAkD,aAAjB9D,GAAAgB,SAAAA,CA8Hb,IAAI6C,EAEJ7D,GAAAA,WAAegB","file":"TimeSpan.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Originally based upon .NET source but with many additions and improvements.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Types\", \"./TimeUnit\", \"./ClockTime\", \"./TimeQuantity\", \"../../extends\", \"../Lazy\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Types_1 = require(\"../Types\");\n    var TimeUnit_1 = require(\"./TimeUnit\");\n    var ClockTime_1 = require(\"./ClockTime\");\n    var TimeQuantity_1 = require(\"./TimeQuantity\");\n    var extends_1 = require(\"../../extends\");\n    var Lazy_1 = require(\"../Lazy\");\n    // noinspection JSUnusedLocalSymbols\n    var __extends = extends_1.default;\n    /**\n     * TimeSpan expands on TimeQuantity to provide an class that is similar to .NET's TimeSpan including many useful static methods.\n     */\n    var TimeSpan = /** @class */ (function (_super) {\n        __extends(TimeSpan, _super);\n        // In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\n        function TimeSpan(value, units) {\n            if (units === void 0) { units = TimeUnit_1.TimeUnit.Milliseconds; }\n            var _this = this;\n            var ms = TimeUnit_1.TimeUnit.toMilliseconds(value, units);\n            _this = _super.call(this, ms) || this;\n            _this.ticks = ms * 10000 /* Millisecond */;\n            _this.milliseconds = ms;\n            _this.seconds = ms / 1000 /* Second */;\n            _this.minutes = ms / 60000 /* Minute */;\n            _this.hours = ms / 3600000 /* Hour */;\n            _this.days = ms / 86400000 /* Day */;\n            _this._time = Lazy_1.Lazy.create(function () { return new ClockTime_1.ClockTime(_this.getTotalMilliseconds()); });\n            Object.freeze(_this);\n            return _this;\n        }\n        Object.defineProperty(TimeSpan.prototype, \"total\", {\n            /**\n             * Provides an standard interface for acquiring the total time.\n             * @returns {TimeSpan}\n             */\n            get: function () {\n                return this;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(TimeSpan.prototype, \"time\", {\n            // Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\n            get: function () {\n                return this._time.value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        TimeSpan.prototype.add = function (other) {\n            if (Types_1.Type.isNumber(other))\n                throw new Error(\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\n                    \".add only supports quantifiable time values (ITimeTotal).\");\n            return new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\n        };\n        TimeSpan.prototype.addUnit = function (value, units) {\n            if (units === void 0) { units = TimeUnit_1.TimeUnit.Milliseconds; }\n            return new TimeSpan(this.getTotalMilliseconds() + TimeUnit_1.TimeUnit.toMilliseconds(value, units));\n        };\n        TimeSpan.from = function (value, units) {\n            return new TimeSpan(value, units);\n        };\n        TimeSpan.fromDays = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Days);\n        };\n        TimeSpan.fromHours = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Hours);\n        };\n        TimeSpan.fromMinutes = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Minutes);\n        };\n        TimeSpan.fromSeconds = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Seconds);\n        };\n        TimeSpan.fromMilliseconds = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Milliseconds);\n        };\n        TimeSpan.fromTicks = function (value) {\n            return new TimeSpan(value, TimeUnit_1.TimeUnit.Ticks);\n        };\n        Object.defineProperty(TimeSpan, \"zero\", {\n            get: function () {\n                return timeSpanZero || (timeSpanZero = new TimeSpan(0));\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return TimeSpan;\n    }(TimeQuantity_1.TimeQuantity));\n    exports.TimeSpan = TimeSpan;\n    var timeSpanZero;\n    exports.default = TimeSpan;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {ClockTime} from \"./ClockTime\";\r\nimport {TimeQuantity} from \"./TimeQuantity\";\r\nimport {Milliseconds, Ticks} from \"./HowMany\";\r\nimport {ITimeMeasurement} from \"./ITimeMeasurement\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport __extendsImport from \"../../extends\";\r\nimport {Lazy} from \"../Lazy\";\r\n// noinspection JSUnusedLocalSymbols\r\nconst __extends = __extendsImport;\r\n\r\n\r\n/**\r\n * TimeSpan expands on TimeQuantity to provide an class that is similar to .NET's TimeSpan including many useful static methods.\r\n */\r\nexport class TimeSpan extends TimeQuantity implements ITimeMeasurement\r\n{\r\n\t/**\r\n\t * The total number of ticks that represent this amount of time.\r\n\t */\r\n\treadonly ticks:number;\r\n\r\n\t/**\r\n\t * The total number of ticks that milliseconds this amount of time.\r\n\t */\r\n\treadonly milliseconds:number;\r\n\r\n\t/**\r\n\t * The total number of ticks that seconds this amount of time.\r\n\t */\r\n\treadonly seconds:number;\r\n\r\n\t/**\r\n\t * The total number of ticks that minutes this amount of time.\r\n\t */\r\n\treadonly minutes:number;\r\n\r\n\t/**\r\n\t * The total number of ticks that hours this amount of time.\r\n\t */\r\n\treadonly hours:number;\r\n\r\n\t/**\r\n\t * The total number of ticks that days this amount of time.\r\n\t */\r\n\treadonly days:number;\r\n\r\n\t// In .NET the default type is Ticks, but for JavaScript, we will use Milliseconds.\r\n\tconstructor(value:number, units:TimeUnit = TimeUnit.Milliseconds)\r\n\t{\r\n\t\tconst ms = TimeUnit.toMilliseconds(value, units);\r\n\t\tsuper(ms);\r\n\r\n\t\tthis.ticks = ms*Ticks.Per.Millisecond;\r\n\t\tthis.milliseconds = ms;\r\n\t\tthis.seconds = ms/Milliseconds.Per.Second;\r\n\t\tthis.minutes = ms/Milliseconds.Per.Minute;\r\n\t\tthis.hours = ms/Milliseconds.Per.Hour;\r\n\t\tthis.days = ms/Milliseconds.Per.Day;\r\n\r\n\t\tthis._time = Lazy.create(()=> new ClockTime(this.getTotalMilliseconds()));\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Provides an standard interface for acquiring the total time.\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\tget total():TimeSpan\r\n\t{\r\n\t\treturn this;\r\n\t}\r\n\r\n\tprivate _time:Lazy<ClockTime>;\r\n\t// Instead of the confusing getTotal versus unit name, expose a 'ClockTime' value which reports the individual components.\r\n\tget time():ClockTime\r\n\t{\r\n\t\treturn this._time.value;\r\n\t}\r\n\r\n\tadd(other:ITimeQuantity):TimeSpan\r\n\t{\r\n\t\tif(Type.isNumber(other))\r\n\t\t\tthrow new Error(\r\n\t\t\t\t\"Use .addUnit(value:number,units:TimeUnit) to add a numerical value amount.  Default units are milliseconds.\\n\" +\r\n\t\t\t\t\".add only supports quantifiable time values (ITimeTotal).\"\r\n\t\t\t);\r\n\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + other.total.milliseconds);\r\n\t}\r\n\r\n\taddUnit(value:number, units:TimeUnit = TimeUnit.Milliseconds):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(this.getTotalMilliseconds() + TimeUnit.toMilliseconds(value, units));\r\n\t}\r\n\r\n\r\n\tstatic from(value:number, units:TimeUnit)\r\n\t{\r\n\t\treturn new TimeSpan(value, units);\r\n\t}\r\n\r\n\tstatic fromDays(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Days);\r\n\t}\r\n\r\n\tstatic fromHours(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Hours);\r\n\t}\r\n\r\n\tstatic fromMinutes(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Minutes);\r\n\t}\r\n\r\n\tstatic fromSeconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Seconds);\r\n\t}\r\n\r\n\tstatic fromMilliseconds(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Milliseconds);\r\n\t}\r\n\r\n\tstatic fromTicks(value:number):TimeSpan\r\n\t{\r\n\t\treturn new TimeSpan(value, TimeUnit.Ticks);\r\n\t}\r\n\r\n\r\n\tstatic get zero():TimeSpan\r\n\t{\r\n\t\treturn timeSpanZero || (timeSpanZero = new TimeSpan(0));\r\n\t}\r\n}\r\n\r\n\r\nlet timeSpanZero:TimeSpan;\r\n\r\nexport default TimeSpan;"]}