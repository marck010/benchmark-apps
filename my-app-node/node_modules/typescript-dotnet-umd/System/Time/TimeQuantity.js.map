{"version":3,"sources":["System/Time/TimeQuantity.js","System/Time/TimeQuantity.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Compare_1","TimeUnit_1","Lazy_1","TimeQuantity","_quantity","this","_resetTotal","prototype","getTotalMilliseconds","get","compare","enumerable","configurable","equals","other","areEqual","total","milliseconds","compareTo","_this","t","_total","isValueCreated","Lazy","create","ms","freeze","ticks","seconds","minutes","hours","days","getTotal","units","TimeUnit","fromMilliseconds"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,aAAc,aAAc,WAAYN,IAE3E,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCT1D,IAAAC,GAAAP,EAAA,cACAQ,EAAAR,EAAA,cAMAS,EAAAT,EAAA,WAKAU,EAAA,WAGC,QAAAA,GAAsBC,GAAA,SAAAA,IAAAA,EAAA,GAAAC,KAAAD,UAAAA,EAErBC,KAAKC,cA+EP,MA3ECH,GAAAI,UAAAC,qBAAA,WAEC,MAAOH,MAAKD,WAObP,OAAAC,eAAIK,EAAAI,UAAA,aDCOE,ICDX,WAEC,MAAOT,GAAAU,QAAQL,KAAKG,uBAAwB,IDElCG,YAAY,EACZC,cAAc,ICKzBT,EAAAI,UAAAM,OAAA,SAAOC,GAEN,MAAOd,GAAAe,SAASV,KAAKG,uBAAwBM,GAASA,EAAME,OAASF,EAAME,MAAMC,eAQlFd,EAAAI,UAAAW,UAAA,SAAUJ,GAET,MAAOd,GAAAU,QAAQL,KAAKG,uBAAwBM,GAASA,EAAME,OAASF,EAAME,MAAMC,eAKvEd,EAAAI,UAAAD,YAAV,WAAA,GAAAa,GAAAd,KAEOe,EAAIf,KAAKgB,MACXD,KAAKA,EAAEE,iBAEVjB,KAAKgB,OAASnB,EAAAqB,KAAKC,OAAO,WAEzB,GAAMC,GAAKN,EAAKX,sBAEhB,OAAyBX,QAAO6B,QAC/BC,MAAS,IAAFF,EACPR,aAAcQ,EACdG,QAASH,EAAE,IACXI,QAASJ,EAAE,IACXK,MAAOL,EAAE,KACTM,KAAMN,EAAE,YAUZ5B,OAAAC,eAAIK,EAAAI,UAAA,SDPOE,ICOX,WAEC,MAAOJ,MAAKgB,OAAOtB,ODNTY,YAAY,EACZC,cAAc,ICazBT,EAAAI,UAAAyB,SAAA,SAASC,GAER,MAAOhC,GAAAiC,SAASC,iBAAiB9B,KAAKG,uBAAwByB,IAEhE9B,IApFaZ,GAAAY,aAAAA,EAsFbZ,EAAAA,WAAeY","file":"TimeQuantity.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Compare\", \"./TimeUnit\", \"../Lazy\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Compare_1 = require(\"../Compare\");\n    var TimeUnit_1 = require(\"./TimeUnit\");\n    var Lazy_1 = require(\"../Lazy\");\n    /**\n     * This class provides a simple means for storing and calculating time quantities.\n     */\n    var TimeQuantity = /** @class */ (function () {\n        function TimeQuantity(_quantity) {\n            if (_quantity === void 0) { _quantity = 0; }\n            this._quantity = _quantity;\n            this._resetTotal();\n        }\n        // Provides an overridable mechanism for extending this class.\n        TimeQuantity.prototype.getTotalMilliseconds = function () {\n            return this._quantity;\n        };\n        Object.defineProperty(TimeQuantity.prototype, \"direction\", {\n            /**\n             * +1, 0, or -1 depending on the time direction.\n             * @returns {number}\n             */\n            get: function () {\n                return Compare_1.compare(this.getTotalMilliseconds(), 0);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Compares this instance against any other time quantity instance and return true if the amount of time is the same.\n         * @param other\n         * @returns {boolean}\n         */\n        TimeQuantity.prototype.equals = function (other) {\n            return Compare_1.areEqual(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\n        };\n        /**\n         * Compares this instance against any other time quantity instance.\n         * @param other\n         * @returns {CompareResult}\n         */\n        TimeQuantity.prototype.compareTo = function (other) {\n            return Compare_1.compare(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\n        };\n        TimeQuantity.prototype._resetTotal = function () {\n            var _this = this;\n            var t = this._total;\n            if (!t || t.isValueCreated) {\n                this._total = Lazy_1.Lazy.create(function () {\n                    var ms = _this.getTotalMilliseconds();\n                    return Object.freeze({\n                        ticks: ms * 10000 /* Millisecond */,\n                        milliseconds: ms,\n                        seconds: ms / 1000 /* Second */,\n                        minutes: ms / 60000 /* Minute */,\n                        hours: ms / 3600000 /* Hour */,\n                        days: ms / 86400000 /* Day */,\n                    });\n                });\n            }\n        };\n        Object.defineProperty(TimeQuantity.prototype, \"total\", {\n            /**\n             * Returns an object with all units exposed as totals.\n             * @returns {ITimeMeasurement}\n             */\n            get: function () {\n                return this._total.value;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns the total amount of time measured in the requested TimeUnit.\n         * @param units\n         * @returns {number}\n         */\n        TimeQuantity.prototype.getTotal = function (units) {\n            return TimeUnit_1.TimeUnit.fromMilliseconds(this.getTotalMilliseconds(), units);\n        };\n        return TimeQuantity;\n    }());\n    exports.TimeQuantity = TimeQuantity;\n    exports.default = TimeQuantity;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {areEqual, compare} from \"../Compare\";\r\nimport {TimeUnit} from \"./TimeUnit\";\r\nimport {Milliseconds, Ticks} from \"./HowMany\";\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport {IComparable} from \"../IComparable\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport {ITimeMeasurement} from \"./ITimeMeasurement\";\r\nimport {Lazy} from \"../Lazy\";\r\n\r\n/**\r\n * This class provides a simple means for storing and calculating time quantities.\r\n */\r\nexport class TimeQuantity implements IEquatable<ITimeQuantity>, IComparable<ITimeQuantity>, ITimeQuantity\r\n{\r\n\r\n\tconstructor(protected _quantity:number = 0)\r\n\t{\r\n\t\tthis._resetTotal();\r\n\t}\r\n\r\n\t// Provides an overridable mechanism for extending this class.\r\n\tgetTotalMilliseconds():number\r\n\t{\r\n\t\treturn this._quantity;\r\n\t}\r\n\r\n\t/**\r\n\t * +1, 0, or -1 depending on the time direction.\r\n\t * @returns {number}\r\n\t */\r\n\tget direction():number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), 0);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance and return true if the amount of time is the same.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:ITimeQuantity):boolean\r\n\t{\r\n\t\treturn areEqual(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares this instance against any other time quantity instance.\r\n\t * @param other\r\n\t * @returns {CompareResult}\r\n\t */\r\n\tcompareTo(other:ITimeQuantity):number\r\n\t{\r\n\t\treturn compare(this.getTotalMilliseconds(), other && other.total && other.total.milliseconds);\r\n\t}\r\n\r\n\tprotected _total:Lazy<ITimeMeasurement>;\r\n\r\n\tprotected _resetTotal():void\r\n\t{\r\n\t\tconst t = this._total;\r\n\t\tif(!t || t.isValueCreated)\r\n\t\t{\r\n\t\t\tthis._total = Lazy.create(() =>\r\n\t\t\t{\r\n\t\t\t\tconst ms = this.getTotalMilliseconds();\r\n\r\n\t\t\t\treturn <ITimeMeasurement>Object.freeze({\r\n\t\t\t\t\tticks: ms*Ticks.Per.Millisecond,\r\n\t\t\t\t\tmilliseconds: ms,\r\n\t\t\t\t\tseconds: ms/Milliseconds.Per.Second,\r\n\t\t\t\t\tminutes: ms/Milliseconds.Per.Minute,\r\n\t\t\t\t\thours: ms/Milliseconds.Per.Hour,\r\n\t\t\t\t\tdays: ms/Milliseconds.Per.Day,\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an object with all units exposed as totals.\r\n\t * @returns {ITimeMeasurement}\r\n\t */\r\n\tget total():ITimeMeasurement\r\n\t{\r\n\t\treturn this._total.value;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the total amount of time measured in the requested TimeUnit.\r\n\t * @param units\r\n\t * @returns {number}\r\n\t */\r\n\tgetTotal(units:TimeUnit):number\r\n\t{\r\n\t\treturn TimeUnit.fromMilliseconds(this.getTotalMilliseconds(), units);\r\n\t}\r\n}\r\n\r\nexport default TimeQuantity;"]}