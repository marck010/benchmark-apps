{"version":3,"sources":["System/Time/TimeStamp.js","System/Time/TimeStamp.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","Types_1","TimeStamp","year","month","day","hour","minute","second","millisecond","tick","this","freeze","prototype","toJsDate","_","Date","from","d","Type","hasMember","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","Error"],"mappings":";;;;CAIA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,YAAaN,IAEhD,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCT1D,IAAAC,GAAAP,EAAA,YASAQ,EAAA,WAGC,QAAAA,GACiBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GALA,SAAAL,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GACA,SAAAC,IAAAA,EAAA,GAPAC,KAAAR,KAAAA,EACAQ,KAAAP,MAAAA,EACAO,KAAAN,IAAAA,EACAM,KAAAL,KAAAA,EACAK,KAAAJ,OAAAA,EACAI,KAAAH,OAAAA,EACAG,KAAAF,YAAAA,EACAE,KAAAD,KAAAA,EAKhBZ,OAAOc,OAAOD,MA8BhB,MA3BCT,GAAAW,UAAAC,SAAA,WAEC,GAAMC,GAAIJ,IACV,OAAO,IAAIK,MAAKD,EAAEZ,KAAMY,EAAEX,MAAOW,EAAEV,IAAKU,EAAET,KAAMS,EAAER,OAAQQ,EAAEP,OAAQO,EAAEN,YAAcM,EAAEL,KAAI,MAGpFR,EAAAe,KAAP,SAAYC,GAIX,GAFKA,YAAaF,QAASf,EAAAkB,KAAKC,UAAUF,EAAG,cAC5CA,EAAgBA,EAAGJ,YACjBI,YAAaF,MAEf,MAAO,IAAId,GACVgB,EAAEG,cACFH,EAAEI,WACFJ,EAAEK,UACFL,EAAEM,WACFN,EAAEO,aACFP,EAAEQ,aACFR,EAAES,kBAKH,MAAMC,OAAM,uBAGf1B,IA9CaV,GAAAU,UAAAA,EAgDbV,EAAAA,WAAeU","file":"TimeStamp.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"../Types\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var Types_1 = require(\"../Types\");\n    /**\n     * An alternative to Date or DateTime.  Is a model representing the exact date and time.\n     */\n    var TimeStamp = /** @class */ (function () {\n        function TimeStamp(year, month, day, hour, minute, second, millisecond, tick) {\n            // Add validation or properly carry out of range values?\n            if (day === void 0) { day = 1; }\n            if (hour === void 0) { hour = 0; }\n            if (minute === void 0) { minute = 0; }\n            if (second === void 0) { second = 0; }\n            if (millisecond === void 0) { millisecond = 0; }\n            if (tick === void 0) { tick = 0; }\n            this.year = year;\n            this.month = month;\n            this.day = day;\n            this.hour = hour;\n            this.minute = minute;\n            this.second = second;\n            this.millisecond = millisecond;\n            this.tick = tick;\n            Object.freeze(this);\n        }\n        TimeStamp.prototype.toJsDate = function () {\n            var _ = this;\n            return new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick / 10000 /* Millisecond */);\n        };\n        TimeStamp.from = function (d) {\n            if (!(d instanceof Date) && Types_1.Type.hasMember(d, 'toJsDate'))\n                d = d.toJsDate();\n            if (d instanceof Date) {\n                return new TimeStamp(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n            }\n            else {\n                throw Error('Invalid date type.');\n            }\n        };\n        return TimeStamp;\n    }());\n    exports.TimeStamp = TimeStamp;\n    exports.default = TimeStamp;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Type} from \"../Types\";\r\nimport {ITimeStamp} from \"./ITimeStamp\";\r\nimport {Ticks} from \"./HowMany\";\r\nimport {IDateTime} from \"./IDateTime\";\r\nimport {Gregorian} from \"./Calendars\";\r\n\r\n/**\r\n * An alternative to Date or DateTime.  Is a model representing the exact date and time.\r\n */\r\nexport class TimeStamp implements ITimeStamp, IDateTime\r\n{\r\n\r\n\tconstructor(\r\n\t\tpublic readonly year:number,\r\n\t\tpublic readonly month:Gregorian.Month,\r\n\t\tpublic readonly day:number = 1,\r\n\t\tpublic readonly hour:number = 0,\r\n\t\tpublic readonly minute:number = 0,\r\n\t\tpublic readonly second:number = 0,\r\n\t\tpublic readonly millisecond:number = 0,\r\n\t\tpublic readonly tick:number = 0)\r\n\t{\r\n\r\n\t\t// Add validation or properly carry out of range values?\r\n\r\n\t\tObject.freeze(this);\r\n\t}\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn new Date(_.year, _.month, _.day, _.hour, _.minute, _.second, _.millisecond + _.tick/Ticks.Per.Millisecond);\r\n\t}\r\n\r\n\tstatic from(d:Date|IDateTime):TimeStamp\r\n\t{\r\n\t\tif(!(d instanceof Date) && Type.hasMember(d, 'toJsDate'))\r\n\t\t\td = (<IDateTime>d).toJsDate();\r\n\t\tif(d instanceof Date)\r\n\t\t{\r\n\t\t\treturn new TimeStamp(\r\n\t\t\t\td.getFullYear(),\r\n\t\t\t\td.getMonth(),\r\n\t\t\t\td.getDate(),\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds()\r\n\t\t\t);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthrow Error('Invalid date type.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default TimeStamp;"]}