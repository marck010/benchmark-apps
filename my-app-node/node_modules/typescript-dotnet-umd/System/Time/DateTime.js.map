{"version":3,"sources":["System/Time/DateTime.js","System/Time/DateTime.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","TimeSpan_1","ClockTime_1","TimeStamp_1","ArgumentNullException_1","VOID0","DateTime","kind","Date","Kind","Local","this","_kind","_value","toJsDate","getTime","prototype","get","enumerable","configurable","getFullYear","getMonth","year","month","calendarMonth","day","getDate","getDay","addMilliseconds","ms","addSeconds","seconds","addMinutes","minutes","addHours","hours","addDays","days","addMonths","months","d","setMonth","addYears","years","setFullYear","add","time","getTotalMilliseconds","subtract","timePassedSince","previous","between","_","t","_time","ClockTime","getHours","getMinutes","getSeconds","getMilliseconds","toTimeStamp","TimeStamp","from","toUniversalTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","Utc","equals","other","strict","ok","compareTo","ArgumentNullException","equivalent","toUTCString","now","date","today","first","last","f","l","TimeSpan","isLeapYear","daysInMonth","yearOrDate","fromCalendarDate","freeze"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,UAAW,aAAc,cAAe,cAAe,uCAAwCN,IAEvH,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCR1D,IAAAC,GAAAP,EAAA,cACAQ,EAAAR,EAAA,eAEAS,EAAAT,EAAA,eAMAU,EAAAV,EAAA,uCAEMW,EAAkB,OAExBC,EAAA,WAcC,QAAAA,GAAYN,EAAwBO,GAAxB,SAAAP,IAAAA,EAAA,GAAgBQ,OAAQ,SAAAD,IAAAA,EAAqBD,EAASG,KAAKC,OAEtEC,KAAKC,MAAQL,EACVP,YAAiBM,IAEnBK,KAAKE,OAASb,EAAMc,WACjBP,IAAOF,IAAOM,KAAKC,MAAQZ,EAAMY,QAE7BZ,YAAiBQ,MACxBG,KAAKE,OAAS,GAAIL,MAAKR,EAAMe,WAE7BJ,KAAKE,OAASb,IAAQK,EACnB,GAAIG,MACJ,GAAIA,MAAKR,GA4Zf,MAnbCM,GAAAU,UAAAF,SAAA,WAEC,MAAO,IAAIN,MAAKG,KAAKE,OAAOE,YAyB7BjB,OAAAC,eAAIO,EAAAU,UAAA,QDTOC,ICSX,WAEC,MAAON,MAAKC,ODRFM,YAAY,EACZC,cAAc,ICUzBrB,OAAAC,eAAIO,EAAAU,UAAA,QDPOC,ICOX,WAEC,MAAON,MAAKE,OAAOO,eDNTF,YAAY,EACZC,cAAc,ICYzBrB,OAAAC,eAAIO,EAAAU,UAAA,SDLOC,ICKX,WAEC,MAAON,MAAKE,OAAOQ,YDJTH,YAAY,EACZC,cAAc,ICUzBrB,OAAAC,eAAIO,EAAAU,UAAA,iBDHOC,ICGX,WAEC,MAAON,MAAKE,OAAOQ,WAAa,GDFtBH,YAAY,EACZC,cAAc,ICIzBrB,OAAAC,eAAIO,EAAAU,UAAA,YDDOC,ICCX,WAEC,OACCK,KAAMX,KAAKW,KACXC,MAAOZ,KAAKa,cACZC,IAAKd,KAAKc,MDCDP,YAAY,EACZC,cAAc,ICMzBrB,OAAAC,eAAIO,EAAAU,UAAA,ODCOC,ICDX,WAEC,MAAON,MAAKE,OAAOa,WDETR,YAAY,EACZC,cAAc,ICIzBrB,OAAAC,eAAIO,EAAAU,UAAA,YDGOC,ICHX,WAEC,MAAON,MAAKE,OAAOa,UAAY,GDIrBR,YAAY,EACZC,cAAc,ICEzBrB,OAAAC,eAAIO,EAAAU,UAAA,aDKOC,ICLX,WAEC,MAAON,MAAKE,OAAOc,UDMTT,YAAY,EACZC,cAAc,ICHzBb,EAAAU,UAAAY,gBAAA,SAAgBC,GAGf,MADAA,GAAKA,GAAM,EACJ,GAAIvB,GAASK,KAAKE,OAAOE,UAAYc,EAAIlB,KAAKC,QAGtDN,EAAAU,UAAAc,WAAA,SAAWC,GAGV,MADAA,GAAUA,GAAW,EACdpB,KAAKiB,gBAAuB,IAAPG,IAG7BzB,EAAAU,UAAAgB,WAAA,SAAWC,GAGV,MADAA,GAAUA,GAAW,EACdtB,KAAKiB,gBAAuB,IAAPK,IAG7B3B,EAAAU,UAAAkB,SAAA,SAASC,GAGR,MADAA,GAAQA,GAAS,EACVxB,KAAKiB,gBAAqB,KAALO,IAG7B7B,EAAAU,UAAAoB,QAAA,SAAQC,GAGP,MADAA,GAAOA,GAAQ,EACR1B,KAAKiB,gBAAoB,MAAJS,IAG7B/B,EAAAU,UAAAsB,UAAA,SAAUC,GAETA,EAASA,GAAU,CACnB,IAAMC,GAAI7B,KAAKG,UAEf,OADA0B,GAAEC,SAASD,EAAEnB,WAAakB,GACnB,GAAIjC,GAASkC,EAAG7B,KAAKC,QAG7BN,EAAAU,UAAA0B,SAAA,SAASC,GAERA,EAAQA,GAAS,CACjB,IAAMH,GAAI7B,KAAKG,UAEf,OADA0B,GAAEI,YAAYJ,EAAEpB,cAAgBuB,GACzB,GAAIrC,GAASkC,EAAG7B,KAAKC,QAS7BN,EAAAU,UAAA6B,IAAA,SAAIC,GAEH,MAAOnC,MAAKiB,gBAAgBkB,EAAKC,yBAQlCzC,EAAAU,UAAAgC,SAAA,SAASF,GAER,MAAOnC,MAAKiB,iBAAiBkB,EAAKC,yBAQnCzC,EAAAU,UAAAiC,gBAAA,SAAgBC,GAEf,MAAO5C,GAAS6C,QAAQD,EAAUvC,OAMnCb,OAAAC,eAAIO,EAAAU,UAAA,QDfOC,ICeX,WAEC,GAAMmC,GAAIzC,IACV,OAAO,IAAIL,GACV,GAAIE,MACH4C,EAAE9B,KACF8B,EAAE7B,MACF6B,EAAE3B,KAED2B,EAAExC,QDpBKM,YAAY,EACZC,cAAc,IC6BzBrB,OAAAC,eAAIO,EAAAU,UAAA,aDtBOC,ICsBX,WAEC,GAAMmC,GAAIzC,KACN0C,EAAID,EAAEE,KACV,KAAID,EACJ,CACC,GAAMb,GAAI7B,KAAKE,MACfuC,GAAEE,MAAQD,EAAI,GAAInD,GAAAqD,UACjBf,EAAEgB,WACFhB,EAAEiB,aACFjB,EAAEkB,aACFlB,EAAEmB,mBAEJ,MAAON,ID1BGnC,YAAY,EACZC,cAAc,IC+BzBb,EAAAU,UAAA4C,YAAA,WAEC,MAAOzD,GAAA0D,UAAUC,KAAKnD,OAOvBb,OAAAC,eAAWO,EAAA,OD3BAW,IC2BX,WAEC,MAAO,IAAIX,ID1BDY,YAAY,EACZC,cAAc,ICgCzBb,EAAAU,UAAA+C,gBAAA,WAEC,GAAMX,GAAIzC,IACV,IAAGyC,EAAExC,OAAON,EAASG,KAAKC,MACzB,MAAO,IAAIJ,GAAS8C,EAAGA,EAAExC,MAE1B,IAAM4B,GAAIY,EAAEvC,MACZ,OAAO,IAAIP,GACV,GAAIE,MACHgC,EAAEwB,iBACFxB,EAAEyB,cACFzB,EAAE0B,aACF1B,EAAE2B,cACF3B,EAAE4B,gBACF5B,EAAE6B,gBACF7B,EAAE8B,sBAEHhE,EAASG,KAAK8D,MAmBhBjE,EAAAU,UAAAwD,OAAA,SAAOC,EAAwBC,GAE9B,GAF8B,SAAAA,IAAAA,GAAA,IAE1BD,EAAO,OAAO,CAClB,IAAGA,GAAO9D,KAAM,OAAO,CAEvB,IAAG8D,YAAiBjE,MACpB,CACC,GAAIf,GAAIkB,KAAKE,MACb,OAAO4D,IAAOhF,GAAKgF,EAAM1D,WAAWtB,EAAEsB,UAGvC,GAAG0D,YAAiBnE,GACpB,CACC,GAAGoE,EACH,CACC,GAAIC,GAAKF,EAAM7D,KACf,KAAI+D,GAAMhE,KAAKC,OAAS+D,GAAIhE,KAAKC,MAAO,OAAO,EAGhD,MAAOD,MAAK6D,OAAOC,EAAM5D,QAErB,OAAG6D,GAGD/D,KAAK6D,OAAOC,EAAM3D,aAK1BR,EAAAU,UAAA4D,UAAA,SAAUH,GAET,IAAIA,EAAO,KAAM,IAAIrE,GAAAyE,sBAAsB,QAC3C,IAAGJ,GAAO9D,KAAM,MAAO,EAEpB8D,aAAiBnE,KAEnBmE,EAAQA,EAAM5D,OAGf,IAAMgB,GAAKlB,KAAKE,OAAOE,SAEvB,OAAG0D,aAAiBjE,MAEZqB,EAAK4C,EAAM1D,UAGZc,EAAK4C,EAAM3D,WAAWC,WAG9BT,EAAAU,UAAA8D,WAAA,SAAWL,GAEV,IAAIA,EAAO,OAAO,CAClB,IAAGA,GAAO9D,KAAM,OAAO,CAEvB,IAAG8D,YAAiBjE,MACpB,CACC,GAAIf,GAAIkB,KAAKE,MAEb,OAAOpB,GAAEsF,eAAeN,EAAMM,cAG/B,SAAGN,YAAiBnE,IAEhBK,KAAK6D,OAAOC,GAAO,KAGhB9D,KAAKmE,WAAWL,EAAM3D,aAO9BhB,OAAAC,eAAWO,EAAA,SDtEAW,ICsEX,WAEC,MAAOX,GAAS0E,IAAIC,MDrEV/D,YAAY,EACZC,cAAc,IC2EzBrB,OAAAC,eAAWO,EAAA,YDpEAW,ICoEX,WAEC,GAAMiE,GAAiB5E,EAAS4E,KAChC,OAAOA,GAAM9C,QAAQ,IDnEXlB,YAAY,EACZC,cAAc,IC0ElBb,EAAA6C,QAAP,SAAegC,EAAqBC,GAEnC,GAAMC,GAASF,YAAiB7E,GAAW6E,EAAMtE,OAAesE,EAC1DG,EAASF,YAAgB9E,GAAW8E,EAAKvE,OAAeuE,CAE9D,OAAO,IAAInF,GAAAsF,SAASD,EAAEvE,UAAYsE,EAAEtE,YAS9BT,EAAAkF,WAAP,SAAkBlE,GAEjB,MAASA,GAAK,GAAG,GAAOA,EAAK,KAAK,GAAQA,EAAK,KAAK,GAS9ChB,EAAAmF,YAAP,SAAmBnE,EAAaC,GAG/B,MAAO,IAAKf,MAAKc,EAAMC,EAAQ,EAAG,GAAIG,WAKhCpB,EAAAwD,KAAP,SACC4B,EACAnE,EACAE,GADA,SAAAF,IAAAA,EAAA,GACA,SAAAE,IAAAA,EAAA,EAEA,IAAIH,EAYJ,OAXsB,gBAAZoE,IAETjE,EAAsBiE,EAAYjE,IAClCF,EAAwBmE,EAAYnE,MACpCD,EAAuBoE,EAAYpE,MAInCA,EAAOoE,EAGD,GAAIpF,GAAS,GAAIE,MAAKc,EAAMC,EAAOE,KAOpCnB,EAAAqF,iBAAP,SACCD,EACAnE,EACAE,GADA,SAAAF,IAAAA,EAAA,GACA,SAAAE,IAAAA,EAAA,EAEA,IAAIH,EAYJ,OAXsB,gBAAZoE,IAETjE,EAAsBiE,EAAYjE,IAClCF,EAAwBmE,EAAYnE,MACpCD,EAAuBoE,EAAYpE,MAInCA,EAAOoE,EAGD,GAAIpF,GAAS,GAAIE,MAAKc,EAAMC,EAAQ,EAAGE,KAIhDnB,IAvbad,GAAAc,SAAAA,EA0bb,SAAcA,GAEb,GAAYG,IAAZ,SAAYA,GACXA,EAAAA,EAAA,YAAA,GAAA,cACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,IAAA,GAAA,OAHWA,EAAAH,EAAAG,OAAAH,EAAAG,WAFCH,EAAAd,EAAAc,WAAAd,EAAAc,cA1bDd,EAAAc,SAAAA,EAmcbR,OAAO8F,OAAOtF,GAEdd,EAAAA,WAAec","file":"DateTime.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Based on .NET DateTime's interface.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\", \"./TimeSpan\", \"./ClockTime\", \"./TimeStamp\", \"../Exceptions/ArgumentNullException\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var TimeSpan_1 = require(\"./TimeSpan\");\n    var ClockTime_1 = require(\"./ClockTime\");\n    var TimeStamp_1 = require(\"./TimeStamp\");\n    var ArgumentNullException_1 = require(\"../Exceptions/ArgumentNullException\");\n    var VOID0 = void 0;\n    var DateTime = /** @class */ (function () {\n        function DateTime(value, kind) {\n            if (value === void 0) { value = new Date(); }\n            if (kind === void 0) { kind = DateTime.Kind.Local; }\n            this._kind = kind;\n            if (value instanceof DateTime) {\n                this._value = value.toJsDate();\n                if (kind === VOID0)\n                    this._kind = value._kind;\n            }\n            else if (value instanceof Date)\n                this._value = new Date(value.getTime());\n            else\n                this._value = value === VOID0\n                    ? new Date()\n                    : new Date(value);\n        }\n        DateTime.prototype.toJsDate = function () {\n            return new Date(this._value.getTime()); // return a clone.\n        };\n        Object.defineProperty(DateTime.prototype, \"kind\", {\n            get: function () {\n                return this._kind;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"year\", {\n            get: function () {\n                return this._value.getFullYear();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"month\", {\n            /**\n             * Returns the Gregorian Month (zero indexed).\n             * @returns {number}\n             */\n            get: function () {\n                return this._value.getMonth();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"calendarMonth\", {\n            /**\n             * Returns the month number (1-12).\n             * @returns {number}\n             */\n            get: function () {\n                return this._value.getMonth() + 1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"calendar\", {\n            get: function () {\n                return {\n                    year: this.year,\n                    month: this.calendarMonth,\n                    day: this.day\n                };\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"day\", {\n            /**\n             * Returns the day of the month.  An integer between 1 and 31.\n             * @returns {number}\n             */\n            get: function () {\n                return this._value.getDate();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"dayIndex\", {\n            /**\n             * Returns the day of the month indexed starting at zero.\n             * @returns {number}\n             */\n            get: function () {\n                return this._value.getDate() - 1;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"dayOfWeek\", {\n            /**\n             * Returns the zero indexed day of the week. (Sunday == 0)\n             * @returns {number}\n             */\n            get: function () {\n                return this._value.getDay();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        DateTime.prototype.addMilliseconds = function (ms) {\n            ms = ms || 0;\n            return new DateTime(this._value.getTime() + ms, this._kind);\n        };\n        DateTime.prototype.addSeconds = function (seconds) {\n            seconds = seconds || 0;\n            return this.addMilliseconds(seconds * 1000 /* Second */);\n        };\n        DateTime.prototype.addMinutes = function (minutes) {\n            minutes = minutes || 0;\n            return this.addMilliseconds(minutes * 60000 /* Minute */);\n        };\n        DateTime.prototype.addHours = function (hours) {\n            hours = hours || 0;\n            return this.addMilliseconds(hours * 3600000 /* Hour */);\n        };\n        DateTime.prototype.addDays = function (days) {\n            days = days || 0;\n            return this.addMilliseconds(days * 86400000 /* Day */);\n        };\n        DateTime.prototype.addMonths = function (months) {\n            months = months || 0;\n            var d = this.toJsDate();\n            d.setMonth(d.getMonth() + months);\n            return new DateTime(d, this._kind);\n        };\n        DateTime.prototype.addYears = function (years) {\n            years = years || 0;\n            var d = this.toJsDate();\n            d.setFullYear(d.getFullYear() + years);\n            return new DateTime(d, this._kind);\n        };\n        /**\n         * Receives an ITimeQuantity value and adds based on the total milliseconds.\n         * @param {ITimeQuantity} time\n         * @returns {DateTime}\n         */\n        DateTime.prototype.add = function (time) {\n            return this.addMilliseconds(time.getTotalMilliseconds());\n        };\n        /**\n         * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\n         * @param {ITimeQuantity} time\n         * @returns {DateTime}\n         */\n        DateTime.prototype.subtract = function (time) {\n            return this.addMilliseconds(-time.getTotalMilliseconds());\n        };\n        /**\n         * Returns a TimeSpan representing the amount of time between two dates.\n         * @param previous\n         * @returns {TimeSpan}\n         */\n        DateTime.prototype.timePassedSince = function (previous) {\n            return DateTime.between(previous, this);\n        };\n        Object.defineProperty(DateTime.prototype, \"date\", {\n            /**\n             * Returns a DateTime object for 00:00 of this date.\n             */\n            get: function () {\n                var _ = this;\n                return new DateTime(new Date(_.year, _.month, _.day), _._kind);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime.prototype, \"timeOfDay\", {\n            /**\n             * Returns the time of day represented by a ClockTime object.\n             * @returns {ClockTime}\n             */\n            get: function () {\n                var _ = this;\n                var t = _._time;\n                if (!t) {\n                    var d = this._value;\n                    _._time = t = new ClockTime_1.ClockTime(d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds());\n                }\n                return t;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns a readonly object which contains all the date and time components.\n         */\n        DateTime.prototype.toTimeStamp = function () {\n            return TimeStamp_1.TimeStamp.from(this);\n        };\n        Object.defineProperty(DateTime, \"now\", {\n            /**\n             * Returns the now local time.\n             * @returns {DateTime}\n             */\n            get: function () {\n                return new DateTime();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Returns a UTC version of this date if its kind is local.\n         * @returns {DateTime}\n         */\n        DateTime.prototype.toUniversalTime = function () {\n            var _ = this;\n            if (_._kind != DateTime.Kind.Local)\n                return new DateTime(_, _._kind);\n            var d = _._value;\n            return new DateTime(new Date(d.getUTCFullYear(), d.getUTCMonth(), d.getUTCDate(), d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()), DateTime.Kind.Utc);\n        };\n        DateTime.prototype.equals = function (other, strict) {\n            if (strict === void 0) { strict = false; }\n            if (!other)\n                return false;\n            if (other == this)\n                return true;\n            if (other instanceof Date) {\n                var v = this._value;\n                return other == v || other.getTime() == v.getTime();\n            }\n            if (other instanceof DateTime) {\n                if (strict) {\n                    var ok = other._kind;\n                    if (!ok && this._kind || ok != this._kind)\n                        return false;\n                }\n                return this.equals(other._value);\n            }\n            else if (strict)\n                return false;\n            return this.equals(other.toJsDate());\n        };\n        // https://msdn.microsoft.com/en-us/library/System.IComparable.CompareTo(v=vs.110).aspx\n        DateTime.prototype.compareTo = function (other) {\n            if (!other)\n                throw new ArgumentNullException_1.ArgumentNullException(\"other\");\n            if (other == this)\n                return 0;\n            if (other instanceof DateTime) {\n                other = other._value;\n            }\n            var ms = this._value.getTime();\n            if (other instanceof Date) {\n                return ms - other.getTime();\n            }\n            return ms - other.toJsDate().getTime();\n        };\n        DateTime.prototype.equivalent = function (other) {\n            if (!other)\n                return false;\n            if (other == this)\n                return true;\n            if (other instanceof Date) {\n                var v = this._value;\n                // TODO: What is the best way to handle this when kinds match or don't?\n                return v.toUTCString() == other.toUTCString();\n            }\n            if (other instanceof DateTime) {\n                if (this.equals(other, true))\n                    return true;\n            }\n            return this.equivalent(other.toJsDate());\n        };\n        Object.defineProperty(DateTime, \"today\", {\n            /**\n             * The date component for now.\n             * @returns {DateTime}\n             */\n            get: function () {\n                return DateTime.now.date;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(DateTime, \"tomorrow\", {\n            /**\n             * Midnight tomorrow.\n             * @returns {DateTime}\n             */\n            get: function () {\n                var today = DateTime.today;\n                return today.addDays(1);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Measures the difference between two dates as a TimeSpan.\n         * @param first\n         * @param last\n         */\n        DateTime.between = function (first, last) {\n            var f = first instanceof DateTime ? first._value : first, l = last instanceof DateTime ? last._value : last;\n            return new TimeSpan_1.TimeSpan(l.getTime() - f.getTime());\n        };\n        /**\n         * Calculates if the given year is a leap year using the formula:\n         * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\n         * @param year\n         * @returns {boolean}\n         */\n        DateTime.isLeapYear = function (year) {\n            return ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n        };\n        /**\n         * Returns the number of days for the specific year and month.\n         * @param year\n         * @param month\n         * @returns {any}\n         */\n        DateTime.daysInMonth = function (year, month) {\n            // Basically, add 1 month, subtract a day... What's the date?\n            return (new Date(year, month + 1, 0)).getDate();\n        };\n        DateTime.from = function (yearOrDate, month, day) {\n            if (month === void 0) { month = 0; }\n            if (day === void 0) { day = 1; }\n            var year;\n            if (typeof yearOrDate == \"object\") {\n                day = yearOrDate.day;\n                month = yearOrDate.month;\n                year = yearOrDate.year;\n            }\n            else {\n                year = yearOrDate;\n            }\n            return new DateTime(new Date(year, month, day));\n        };\n        DateTime.fromCalendarDate = function (yearOrDate, month, day) {\n            if (month === void 0) { month = 1; }\n            if (day === void 0) { day = 1; }\n            var year;\n            if (typeof yearOrDate == \"object\") {\n                day = yearOrDate.day;\n                month = yearOrDate.month;\n                year = yearOrDate.year;\n            }\n            else {\n                year = yearOrDate;\n            }\n            return new DateTime(new Date(year, month - 1, day));\n        };\n        return DateTime;\n    }());\n    exports.DateTime = DateTime;\n    // Extend DateTime's usefulness.\n    (function (DateTime) {\n        var Kind;\n        (function (Kind) {\n            Kind[Kind[\"Unspecified\"] = 0] = \"Unspecified\";\n            Kind[Kind[\"Local\"] = 1] = \"Local\";\n            Kind[Kind[\"Utc\"] = 2] = \"Utc\";\n        })(Kind = DateTime.Kind || (DateTime.Kind = {}));\n    })(DateTime = exports.DateTime || (exports.DateTime = {}));\n    exports.DateTime = DateTime;\n    Object.freeze(DateTime);\n    exports.default = DateTime;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Based on .NET DateTime's interface.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {ICalendarDate, ITimeStamp} from \"./ITimeStamp\";\r\nimport {TimeSpan} from \"./TimeSpan\";\r\nimport {ClockTime} from \"./ClockTime\";\r\nimport {Milliseconds} from \"./HowMany\";\r\nimport {TimeStamp} from \"./TimeStamp\";\r\nimport {IDateTime} from \"./IDateTime\";\r\nimport {Gregorian} from \"./Calendars\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\nimport {IEquatable} from \"../IEquatable\";\r\nimport {IComparable} from \"../IComparable\";\r\nimport {ArgumentNullException} from \"../Exceptions/ArgumentNullException\";\r\n\r\nconst VOID0:undefined = void 0;\r\n\r\nexport class DateTime implements ICalendarDate, IDateTime, IEquatable<IDateTime>, IComparable<IDateTime>\r\n{\r\n\tprivate readonly _value:Date;\r\n\r\n\ttoJsDate():Date\r\n\t{\r\n\t\treturn new Date(this._value.getTime()); // return a clone.\r\n\t}\r\n\r\n\tconstructor();\r\n\tconstructor(dateString:string, kind?:DateTime.Kind);\r\n\tconstructor(milliseconds:number, kind?:DateTime.Kind);\r\n\tconstructor(source:Date, kind?:DateTime.Kind);\r\n\tconstructor(source:DateTime, kind?:DateTime.Kind);\r\n\tconstructor(value:any = new Date(), kind:DateTime.Kind = DateTime.Kind.Local)\r\n\t{\r\n\t\tthis._kind = kind;\r\n\t\tif(value instanceof DateTime)\r\n\t\t{\r\n\t\t\tthis._value = value.toJsDate();\r\n\t\t\tif(kind===VOID0) this._kind = value._kind;\r\n\t\t}\r\n\t\telse if(value instanceof Date)\r\n\t\t\tthis._value = new Date(value.getTime());\r\n\t\telse\r\n\t\t\tthis._value = value===VOID0\r\n\t\t\t\t? new Date()\r\n\t\t\t\t: new Date(value);\r\n\t}\r\n\r\n\tprivate readonly _kind:DateTime.Kind;\r\n\tget kind():DateTime.Kind\r\n\t{\r\n\t\treturn this._kind;\r\n\t}\r\n\r\n\tget year():number\r\n\t{\r\n\t\treturn this._value.getFullYear();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the Gregorian Month (zero indexed).\r\n\t * @returns {number}\r\n\t */\r\n\tget month():Gregorian.Month\r\n\t{\r\n\t\treturn this._value.getMonth();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the month number (1-12).\r\n\t * @returns {number}\r\n\t */\r\n\tget calendarMonth():number\r\n\t{\r\n\t\treturn this._value.getMonth() + 1;\r\n\t}\r\n\r\n\tget calendar():ICalendarDate\r\n\t{\r\n\t\treturn {\r\n\t\t\tyear: this.year,\r\n\t\t\tmonth: this.calendarMonth,\r\n\t\t\tday: this.day\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month.  An integer between 1 and 31.\r\n\t * @returns {number}\r\n\t */\r\n\tget day():number\r\n\t{\r\n\t\treturn this._value.getDate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the day of the month indexed starting at zero.\r\n\t * @returns {number}\r\n\t */\r\n\tget dayIndex():number\r\n\t{\r\n\t\treturn this._value.getDate() - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the zero indexed day of the week. (Sunday == 0)\r\n\t * @returns {number}\r\n\t */\r\n\tget dayOfWeek():Gregorian.DayOfWeek\r\n\t{\r\n\t\treturn this._value.getDay();\r\n\t}\r\n\r\n\r\n\taddMilliseconds(ms:number):DateTime\r\n\t{\r\n\t\tms = ms || 0;\r\n\t\treturn new DateTime(this._value.getTime() + ms, this._kind);\r\n\t}\r\n\r\n\taddSeconds(seconds:number):DateTime\r\n\t{\r\n\t\tseconds = seconds || 0;\r\n\t\treturn this.addMilliseconds(seconds*Milliseconds.Per.Second);\r\n\t}\r\n\r\n\taddMinutes(minutes:number):DateTime\r\n\t{\r\n\t\tminutes = minutes || 0;\r\n\t\treturn this.addMilliseconds(minutes*Milliseconds.Per.Minute);\r\n\t}\r\n\r\n\taddHours(hours:number):DateTime\r\n\t{\r\n\t\thours = hours || 0;\r\n\t\treturn this.addMilliseconds(hours*Milliseconds.Per.Hour);\r\n\t}\r\n\r\n\taddDays(days:number):DateTime\r\n\t{\r\n\t\tdays = days || 0;\r\n\t\treturn this.addMilliseconds(days*Milliseconds.Per.Day);\r\n\t}\r\n\r\n\taddMonths(months:number):DateTime\r\n\t{\r\n\t\tmonths = months || 0;\r\n\t\tconst d = this.toJsDate();\r\n\t\td.setMonth(d.getMonth() + months);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\taddYears(years:number):DateTime\r\n\t{\r\n\t\tyears = years || 0;\r\n\t\tconst d = this.toJsDate();\r\n\t\td.setFullYear(d.getFullYear() + years);\r\n\t\treturn new DateTime(d, this._kind);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and adds based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tadd(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Receives an ITimeQuantity value and subtracts based on the total milliseconds.\r\n\t * @param {ITimeQuantity} time\r\n\t * @returns {DateTime}\r\n\t */\r\n\tsubtract(time:ITimeQuantity):DateTime\r\n\t{\r\n\t\treturn this.addMilliseconds(-time.getTotalMilliseconds());\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a TimeSpan representing the amount of time between two dates.\r\n\t * @param previous\r\n\t * @returns {TimeSpan}\r\n\t */\r\n\ttimePassedSince(previous:Date|DateTime):TimeSpan\r\n\t{\r\n\t\treturn DateTime.between(previous, this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a DateTime object for 00:00 of this date.\r\n\t */\r\n\tget date():DateTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\t_.year,\r\n\t\t\t\t_.month,\r\n\t\t\t\t_.day\r\n\t\t\t)\r\n\t\t\t, _._kind\r\n\t\t);\r\n\t}\r\n\r\n\tprivate _time:ClockTime|null;\r\n\r\n\t/**\r\n\t * Returns the time of day represented by a ClockTime object.\r\n\t * @returns {ClockTime}\r\n\t */\r\n\tget timeOfDay():ClockTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tlet t = _._time;\r\n\t\tif(!t)\r\n\t\t{\r\n\t\t\tconst d = this._value;\r\n\t\t\t_._time = t = new ClockTime(\r\n\t\t\t\td.getHours(),\r\n\t\t\t\td.getMinutes(),\r\n\t\t\t\td.getSeconds(),\r\n\t\t\t\td.getMilliseconds());\r\n\t\t}\r\n\t\treturn t;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a readonly object which contains all the date and time components.\r\n\t */\r\n\ttoTimeStamp():ITimeStamp\r\n\t{\r\n\t\treturn TimeStamp.from(this);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the now local time.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get now():DateTime\r\n\t{\r\n\t\treturn new DateTime();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a UTC version of this date if its kind is local.\r\n\t * @returns {DateTime}\r\n\t */\r\n\ttoUniversalTime():DateTime\r\n\t{\r\n\t\tconst _ = this;\r\n\t\tif(_._kind!=DateTime.Kind.Local)\r\n\t\t\treturn new DateTime(_, _._kind);\r\n\r\n\t\tconst d = _._value;\r\n\t\treturn new DateTime(\r\n\t\t\tnew Date(\r\n\t\t\t\td.getUTCFullYear(),\r\n\t\t\t\td.getUTCMonth(),\r\n\t\t\t\td.getUTCDate(),\r\n\t\t\t\td.getUTCHours(),\r\n\t\t\t\td.getUTCMinutes(),\r\n\t\t\t\td.getUTCSeconds(),\r\n\t\t\t\td.getUTCMilliseconds()\r\n\t\t\t),\r\n\t\t\tDateTime.Kind.Utc\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Compares a JS Date with the current instance.  Does not evaluate the kind.\r\n\t * @param other\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:Date):boolean\r\n\r\n\t/**\r\n\t * Compares another IDateTime object and returns true if they or their value are equal.\r\n\t * @param other The other IDateTime object.\r\n\t * @param strict When strict is true, the 'kind' also must match.\r\n\t * @returns {boolean}\r\n\t */\r\n\tequals(other:IDateTime, strict?:boolean):boolean\r\n\r\n\tequals(other:IDateTime | Date, strict:boolean = false):boolean\r\n\t{\r\n\t\tif(!other) return false;\r\n\t\tif(other==this) return true;\r\n\r\n\t\tif(other instanceof Date)\r\n\t\t{\r\n\t\t\tlet v = this._value;\r\n\t\t\treturn other==v || other.getTime()==v.getTime();\r\n\t\t}\r\n\r\n\t\tif(other instanceof DateTime)\r\n\t\t{\r\n\t\t\tif(strict)\r\n\t\t\t{\r\n\t\t\t\tlet ok = other._kind;\r\n\t\t\t\tif(!ok && this._kind || ok!=this._kind) return false;\r\n\t\t\t}\r\n\r\n\t\t\treturn this.equals(other._value);\r\n\t\t}\r\n\t\telse if(strict)\r\n\t\t\treturn false;\r\n\r\n\t\treturn this.equals(other.toJsDate());\r\n\r\n\t}\r\n\r\n\t// https://msdn.microsoft.com/en-us/library/System.IComparable.CompareTo(v=vs.110).aspx\r\n\tcompareTo(other:IDateTime | Date):number\r\n\t{\r\n\t\tif(!other) throw new ArgumentNullException(\"other\");\r\n\t\tif(other==this) return 0;\r\n\r\n\t\tif(other instanceof DateTime)\r\n\t\t{\r\n\t\t\tother = other._value;\r\n\t\t}\r\n\r\n\t\tconst ms = this._value.getTime();\r\n\r\n\t\tif(other instanceof Date)\r\n\t\t{\r\n\t\t\treturn ms - other.getTime();\r\n\t\t}\r\n\r\n\t\treturn ms - other.toJsDate().getTime();\r\n\t}\r\n\r\n\tequivalent(other:IDateTime | Date):boolean\r\n\t{\r\n\t\tif(!other) return false;\r\n\t\tif(other==this) return true;\r\n\r\n\t\tif(other instanceof Date)\r\n\t\t{\r\n\t\t\tlet v = this._value;\r\n\t\t\t// TODO: What is the best way to handle this when kinds match or don't?\r\n\t\t\treturn v.toUTCString()==other.toUTCString();\r\n\t\t}\r\n\r\n\t\tif(other instanceof DateTime)\r\n\t\t{\r\n\t\t\tif(this.equals(other, true)) return true;\r\n\t\t}\r\n\r\n\t\treturn this.equivalent(other.toJsDate());\r\n\t}\r\n\r\n\t/**\r\n\t * The date component for now.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get today():DateTime\r\n\t{\r\n\t\treturn DateTime.now.date;\r\n\t}\r\n\r\n\t/**\r\n\t * Midnight tomorrow.\r\n\t * @returns {DateTime}\r\n\t */\r\n\tstatic get tomorrow():DateTime\r\n\t{\r\n\t\tconst today:DateTime = DateTime.today;\r\n\t\treturn today.addDays(1);\r\n\t}\r\n\r\n\t/**\r\n\t * Measures the difference between two dates as a TimeSpan.\r\n\t * @param first\r\n\t * @param last\r\n\t */\r\n\tstatic between(first:Date|DateTime, last:Date|DateTime):TimeSpan\r\n\t{\r\n\t\tconst f:Date = first instanceof DateTime ? first._value : <Date>first,\r\n\t\t      l:Date = last instanceof DateTime ? last._value : <Date>last;\r\n\r\n\t\treturn new TimeSpan(l.getTime() - f.getTime());\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates if the given year is a leap year using the formula:\r\n\t * ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0)\r\n\t * @param year\r\n\t * @returns {boolean}\r\n\t */\r\n\tstatic isLeapYear(year:number):boolean\r\n\t{\r\n\t\treturn ((year%4==0) && (year%100!=0)) || (year%400==0);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the number of days for the specific year and month.\r\n\t * @param year\r\n\t * @param month\r\n\t * @returns {any}\r\n\t */\r\n\tstatic daysInMonth(year:number, month:Gregorian.Month):number\r\n\t{\r\n\t\t// Basically, add 1 month, subtract a day... What's the date?\r\n\t\treturn (new Date(year, month + 1, 0)).getDate();\r\n\t}\r\n\r\n\tstatic from(calendarDate:ICalendarDate):DateTime;\r\n\tstatic from(year:number, month:Gregorian.Month, day:number):DateTime;\r\n\tstatic from(\r\n\t\tyearOrDate:number|ICalendarDate,\r\n\t\tmonth:number = 0,\r\n\t\tday:number = 1):DateTime\r\n\t{\r\n\t\tlet year:number;\r\n\t\tif(typeof yearOrDate==\"object\")\r\n\t\t{\r\n\t\t\tday = (<ICalendarDate>yearOrDate).day;\r\n\t\t\tmonth = (<ICalendarDate>yearOrDate).month;\r\n\t\t\tyear = (<ICalendarDate>yearOrDate).year;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tyear = yearOrDate;\r\n\t\t}\r\n\r\n\t\treturn new DateTime(new Date(year, month, day));\r\n\r\n\t}\r\n\r\n\r\n\tstatic fromCalendarDate(calendarDate:ICalendarDate):DateTime;\r\n\tstatic fromCalendarDate(year:number, month:number, day:number):DateTime;\r\n\tstatic fromCalendarDate(\r\n\t\tyearOrDate:number|ICalendarDate,\r\n\t\tmonth:number = 1,\r\n\t\tday:number = 1):DateTime\r\n\t{\r\n\t\tlet year:number;\r\n\t\tif(typeof yearOrDate==\"object\")\r\n\t\t{\r\n\t\t\tday = (<ICalendarDate>yearOrDate).day;\r\n\t\t\tmonth = (<ICalendarDate>yearOrDate).month;\r\n\t\t\tyear = (<ICalendarDate>yearOrDate).year;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tyear = yearOrDate;\r\n\t\t}\r\n\r\n\t\treturn new DateTime(new Date(year, month - 1, day));\r\n\r\n\t}\r\n\r\n}\r\n\r\n// Extend DateTime's usefulness.\r\nexport module DateTime\r\n{\r\n\texport enum Kind {\r\n\t\tUnspecified,\r\n\t\tLocal,\r\n\t\tUtc,\r\n\t}\r\n}\r\n\r\nObject.freeze(DateTime);\r\n\r\nexport default DateTime;\r\n"]}