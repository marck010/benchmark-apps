{"version":3,"sources":["System/Time/TimeUnit.js","System/Time/TimeUnit.ts"],"names":["factory","module","exports","v","require","undefined","define","amd","Object","defineProperty","value","TimeUnit","toMilliseconds","units","Milliseconds","Days","Hours","Minutes","Seconds","Ticks","Error","fromMilliseconds","ms","from","quantity","unit","getTotalMilliseconds","assertValid","isNaN","Math","floor","freeze"],"mappings":";;;;;CAKA,SAAWA,GACP,GAAsB,gBAAXC,SAAiD,gBAAnBA,QAAOC,QAAsB,CAClE,GAAIC,GAAIH,EAAQI,QAASF,QACfG,UAANF,IAAiBF,OAAOC,QAAUC,OAEf,kBAAXG,SAAyBA,OAAOC,KAC5CD,QAAQ,UAAW,WAAYN,IAEpC,SAAUI,EAASF,GAClB,YACAM,QAAOC,eAAeP,EAAS,cAAgBQ,OAAO,GCN1D,IAAYC,IAAZ,SAAYA,GAEXA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,QAAA,GAAA,UACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,QAPWA,EAAAT,EAAAS,WAAAT,EAAAS,cAUZ,SAAcA,GAGb,QAAAC,GACCF,EACAG,GAGA,OAHA,SAAAA,IAAAA,EAAiBF,EAASG,cAGnBD,GAEN,IAAKF,GAASI,KACbL,GAAK,EACN,KAAKC,GAASK,MACbN,GAAK,EACN,KAAKC,GAASM,QACbP,GAAK,EACN,KAAKC,GAASO,QACbR,GAAK,GACN,KAAKC,GAASG,aACb,MAAOJ,EACR,KAAKC,GAASQ,MACb,MAAOT,GAAK,GACb,SACC,KAAM,IAAIU,OAAM,sBAInB,QAAAC,GACCC,EACAT,GAEA,OAAOA,GAEN,IAAKF,GAASI,KACb,MAAOO,GAAE,KACV,KAAKX,GAASK,MACb,MAAOM,GAAE,IACV,KAAKX,GAASM,QACb,MAAOK,GAAE,GACV,KAAKX,GAASO,QACb,MAAOI,GAAE,GACV,KAAKX,GAASG,aACb,MAAOQ,EACR,KAAKX,GAASQ,MACb,MAAS,KAAFG,CACR,SACC,KAAM,IAAIF,OAAM,sBAInB,QAAAG,GAAqBC,EAAwBC,GAE5C,MAAOD,IAAYH,EAAiBG,EAASE,uBAAwBD,GAItE,QAAAE,GAA4BF,GAE3B,GAAGG,MAAMH,IAASA,EAAKd,EAASI,MAAQU,EAAKd,EAASQ,OAASU,KAAKC,MAAML,KAAQA,EACjF,KAAM,IAAIL,OAAM,oBAEjB,QAAO,EA1DQT,EAAAC,eAAcA,EAwBdD,EAAAU,iBAAgBA,EAuBhBV,EAAAY,KAAIA,EAMJZ,EAAAgB,YAAWA,GAxDdhB,EAAAT,EAAAS,WAAAT,EAAAS,cAkEdH,OAAOuB,OAAOpB,GAEdT,EAAAA,WAAeS","file":"TimeUnit.js","sourcesContent":["/*!\n * @author electricessence / https://github.com/electricessence/\n * Originally based upon .NET source but with many additions and improvements.\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\n */\n(function (factory) {\n    if (typeof module === \"object\" && typeof module.exports === \"object\") {\n        var v = factory(require, exports);\n        if (v !== undefined) module.exports = v;\n    }\n    else if (typeof define === \"function\" && define.amd) {\n        define([\"require\", \"exports\"], factory);\n    }\n})(function (require, exports) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    var TimeUnit;\n    (function (TimeUnit) {\n        TimeUnit[TimeUnit[\"Ticks\"] = 0] = \"Ticks\";\n        TimeUnit[TimeUnit[\"Milliseconds\"] = 1] = \"Milliseconds\";\n        TimeUnit[TimeUnit[\"Seconds\"] = 2] = \"Seconds\";\n        TimeUnit[TimeUnit[\"Minutes\"] = 3] = \"Minutes\";\n        TimeUnit[TimeUnit[\"Hours\"] = 4] = \"Hours\";\n        TimeUnit[TimeUnit[\"Days\"] = 5] = \"Days\";\n    })(TimeUnit = exports.TimeUnit || (exports.TimeUnit = {})); // Earth Days\n    (function (TimeUnit) {\n        function toMilliseconds(value, units) {\n            if (units === void 0) { units = TimeUnit.Milliseconds; }\n            // noinspection FallThroughInSwitchStatementJS\n            switch (units) {\n                case TimeUnit.Days:\n                    value *= 24 /* Day */;\n                case TimeUnit.Hours:\n                    value *= 60 /* Hour */;\n                case TimeUnit.Minutes:\n                    value *= 60 /* Minute */;\n                case TimeUnit.Seconds:\n                    value *= 1000 /* Second */;\n                case TimeUnit.Milliseconds:\n                    return value;\n                case TimeUnit.Ticks:\n                    return value / 10000 /* Millisecond */;\n                default:\n                    throw new Error(\"Invalid TimeUnit.\");\n            }\n        }\n        TimeUnit.toMilliseconds = toMilliseconds;\n        function fromMilliseconds(ms, units) {\n            switch (units) {\n                case TimeUnit.Days:\n                    return ms / 86400000 /* Day */;\n                case TimeUnit.Hours:\n                    return ms / 3600000 /* Hour */;\n                case TimeUnit.Minutes:\n                    return ms / 60000 /* Minute */;\n                case TimeUnit.Seconds:\n                    return ms / 1000 /* Second */;\n                case TimeUnit.Milliseconds:\n                    return ms;\n                case TimeUnit.Ticks:\n                    return ms * 10000 /* Millisecond */;\n                default:\n                    throw new Error(\"Invalid TimeUnit.\");\n            }\n        }\n        TimeUnit.fromMilliseconds = fromMilliseconds;\n        function from(quantity, unit) {\n            return quantity && fromMilliseconds(quantity.getTotalMilliseconds(), unit);\n        }\n        TimeUnit.from = from;\n        function assertValid(unit) {\n            if (isNaN(unit) || unit > TimeUnit.Days || unit < TimeUnit.Ticks || Math.floor(unit) !== unit)\n                throw new Error(\"Invalid TimeUnit.\");\n            return true;\n        }\n        TimeUnit.assertValid = assertValid;\n    })(TimeUnit = exports.TimeUnit || (exports.TimeUnit = {}));\n    Object.freeze(TimeUnit);\n    exports.default = TimeUnit;\n});\n","/*!\r\n * @author electricessence / https://github.com/electricessence/\r\n * Originally based upon .NET source but with many additions and improvements.\r\n * Licensing: MIT https://github.com/electricessence/TypeScript.NET/blob/master/LICENSE.md\r\n */\r\n\r\nimport {Hours, Milliseconds, Minutes, Seconds, Ticks} from \"./HowMany\";\r\nimport {ITimeQuantity} from \"./ITimeQuantity\";\r\n\r\nexport enum TimeUnit\r\n{\r\n\tTicks,\r\n\tMilliseconds,\r\n\tSeconds,\r\n\tMinutes,\r\n\tHours,\r\n\tDays\r\n} // Earth Days\r\n\r\nexport module TimeUnit\r\n{\r\n\r\n\texport function toMilliseconds(\r\n\t\tvalue:number,\r\n\t\tunits:TimeUnit = TimeUnit.Milliseconds):number\r\n\t{\r\n\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\tvalue *= Hours.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\tvalue *= Minutes.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\tvalue *= Seconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\tvalue *= Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn value;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn value/Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function fromMilliseconds(\r\n\t\tms:number,\r\n\t\tunits:TimeUnit)\r\n\t{\r\n\t\tswitch(units)\r\n\t\t{\r\n\t\t\tcase TimeUnit.Days:\r\n\t\t\t\treturn ms/Milliseconds.Per.Day;\r\n\t\t\tcase TimeUnit.Hours:\r\n\t\t\t\treturn ms/Milliseconds.Per.Hour;\r\n\t\t\tcase TimeUnit.Minutes:\r\n\t\t\t\treturn ms/Milliseconds.Per.Minute;\r\n\t\t\tcase TimeUnit.Seconds:\r\n\t\t\t\treturn ms/Milliseconds.Per.Second;\r\n\t\t\tcase TimeUnit.Milliseconds:\r\n\t\t\t\treturn ms;\r\n\t\t\tcase TimeUnit.Ticks:\r\n\t\t\t\treturn ms*Ticks.Per.Millisecond;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\t\t}\r\n\t}\r\n\r\n\texport function from(quantity:ITimeQuantity, unit:TimeUnit):number\r\n\t{\r\n\t\treturn quantity && fromMilliseconds(quantity.getTotalMilliseconds(), unit);\r\n\t}\r\n\r\n\r\n\texport function assertValid(unit:TimeUnit):true|never\r\n\t{\r\n\t\tif(isNaN(unit) || unit>TimeUnit.Days || unit<TimeUnit.Ticks || Math.floor(unit)!==unit)\r\n\t\t\tthrow new Error(\"Invalid TimeUnit.\");\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n}\r\n\r\nObject.freeze(TimeUnit);\r\n\r\nexport default TimeUnit;\r\n"]}